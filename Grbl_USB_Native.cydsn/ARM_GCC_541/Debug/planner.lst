ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"planner.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	sys_position,12,4
  20              		.comm	sys_probe_position,12,4
  21              		.comm	sys_probe_state,1,1
  22              		.comm	sys_rt_exec_state,1,1
  23              		.comm	sys_rt_exec_alarm,1,1
  24              		.comm	sys_rt_exec_motion_override,1,1
  25              		.comm	sys_rt_exec_accessory_override,1,1
  26              		.bss
  27              		.align	2
  28              	block_buffer:
  29 0000 00000000 		.space	2080
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              	block_buffer_tail:
  31 0820 00       		.space	1
  32              	block_buffer_head:
  33 0821 00       		.space	1
  34              	next_buffer_head:
  35 0822 00       		.space	1
  36              	block_buffer_planned:
  37 0823 00       		.space	1
  38              		.align	2
  39              	pl:
  40 0824 00000000 		.space	28
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              		.section	.text.plan_next_block_index,"ax",%progbits
  42              		.align	2
  43              		.global	plan_next_block_index
  44              		.thumb
  45              		.thumb_func
  46              		.type	plan_next_block_index, %function
  47              	plan_next_block_index:
  48              	.LFB64:
  49              		.file 1 "planner.c"
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 2


   1:planner.c     **** /*
   2:planner.c     ****   planner.c - buffers movement commands and manages the acceleration profile plan
   3:planner.c     ****   Part of Grbl
   4:planner.c     **** 
   5:planner.c     ****   Copyright (c) 2011-2016 Sungeun K. Jeon for Gnea Research LLC
   6:planner.c     ****   Copyright (c) 2009-2011 Simen Svale Skogsrud
   7:planner.c     ****   Copyright (c) 2011 Jens Geisler
   8:planner.c     ****       Updated For PSOC BJD 2017
   9:planner.c     **** 
  10:planner.c     ****   Grbl is free software: you can redistribute it and/or modify
  11:planner.c     ****   it under the terms of the GNU General Public License as published by
  12:planner.c     ****   the Free Software Foundation, either version 3 of the License, or
  13:planner.c     ****   (at your option) any later version.
  14:planner.c     **** 
  15:planner.c     ****   Grbl is distributed in the hope that it will be useful,
  16:planner.c     ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  17:planner.c     ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  18:planner.c     ****   GNU General Public License for more details.
  19:planner.c     **** 
  20:planner.c     ****   You should have received a copy of the GNU General Public License
  21:planner.c     ****   along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
  22:planner.c     **** */
  23:planner.c     **** 
  24:planner.c     **** #include "grbl.h"
  25:planner.c     **** #include <stdlib.h> // PSoc Required for labs
  26:planner.c     **** 
  27:planner.c     **** 
  28:planner.c     **** static plan_block_t block_buffer[BLOCK_BUFFER_SIZE];  // A ring buffer for motion instructions
  29:planner.c     **** static uint8_t block_buffer_tail;     // Index of the block to process now
  30:planner.c     **** static uint8_t block_buffer_head;     // Index of the next block to be pushed
  31:planner.c     **** static uint8_t next_buffer_head;      // Index of the next buffer head
  32:planner.c     **** static uint8_t block_buffer_planned;  // Index of the optimally planned block
  33:planner.c     **** 
  34:planner.c     **** // Define planner variables
  35:planner.c     **** typedef struct {
  36:planner.c     ****   int32_t position[N_AXIS];          // The planner position of the tool in absolute steps. Kept se
  37:planner.c     ****                                      // from g-code position for movements requiring multiple line 
  38:planner.c     ****                                      // i.e. arcs, canned cycles, and backlash compensation.
  39:planner.c     ****   float previous_unit_vec[N_AXIS];   // Unit vector of previous path line segment
  40:planner.c     ****   float previous_nominal_speed;  // Nominal speed of previous path line segment
  41:planner.c     **** } planner_t;
  42:planner.c     **** static planner_t pl;
  43:planner.c     **** 
  44:planner.c     **** 
  45:planner.c     **** // Returns the index of the next block in the ring buffer. Also called by stepper segment buffer.
  46:planner.c     **** uint8_t plan_next_block_index(uint8_t block_index)
  47:planner.c     **** {
  50              		.loc 1 47 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 8
  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55 0000 80B4     		push	{r7}
  56              		.cfi_def_cfa_offset 4
  57              		.cfi_offset 7, -4
  58 0002 83B0     		sub	sp, sp, #12
  59              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 3


  60 0004 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  62 0006 0346     		mov	r3, r0
  63 0008 FB71     		strb	r3, [r7, #7]
  48:planner.c     ****   block_index++;
  64              		.loc 1 48 0
  65 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  66 000c 0133     		adds	r3, r3, #1
  67 000e FB71     		strb	r3, [r7, #7]
  49:planner.c     ****   if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
  68              		.loc 1 49 0
  69 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  70 0012 282B     		cmp	r3, #40
  71 0014 01D1     		bne	.L2
  72              		.loc 1 49 0 is_stmt 0 discriminator 1
  73 0016 0023     		movs	r3, #0
  74 0018 FB71     		strb	r3, [r7, #7]
  75              	.L2:
  50:planner.c     ****   return(block_index);
  76              		.loc 1 50 0 is_stmt 1
  77 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  51:planner.c     **** }
  78              		.loc 1 51 0
  79 001c 1846     		mov	r0, r3
  80 001e 0C37     		adds	r7, r7, #12
  81              		.cfi_def_cfa_offset 4
  82 0020 BD46     		mov	sp, r7
  83              		.cfi_def_cfa_register 13
  84              		@ sp needed
  85 0022 80BC     		pop	{r7}
  86              		.cfi_restore 7
  87              		.cfi_def_cfa_offset 0
  88 0024 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	plan_next_block_index, .-plan_next_block_index
  92 0026 00BF     		.section	.text.plan_prev_block_index,"ax",%progbits
  93              		.align	2
  94              		.thumb
  95              		.thumb_func
  96              		.type	plan_prev_block_index, %function
  97              	plan_prev_block_index:
  98              	.LFB65:
  52:planner.c     **** 
  53:planner.c     **** 
  54:planner.c     **** // Returns the index of the previous block in the ring buffer
  55:planner.c     **** static uint8_t plan_prev_block_index(uint8_t block_index)
  56:planner.c     **** {
  99              		.loc 1 56 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 8
 102              		@ frame_needed = 1, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104 0000 80B4     		push	{r7}
 105              		.cfi_def_cfa_offset 4
 106              		.cfi_offset 7, -4
 107 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 4


 108              		.cfi_def_cfa_offset 16
 109 0004 00AF     		add	r7, sp, #0
 110              		.cfi_def_cfa_register 7
 111 0006 0346     		mov	r3, r0
 112 0008 FB71     		strb	r3, [r7, #7]
  57:planner.c     ****   if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 113              		.loc 1 57 0
 114 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 115 000c 002B     		cmp	r3, #0
 116 000e 01D1     		bne	.L5
 117              		.loc 1 57 0 is_stmt 0 discriminator 1
 118 0010 2823     		movs	r3, #40
 119 0012 FB71     		strb	r3, [r7, #7]
 120              	.L5:
  58:planner.c     ****   block_index--;
 121              		.loc 1 58 0 is_stmt 1
 122 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 123 0016 013B     		subs	r3, r3, #1
 124 0018 FB71     		strb	r3, [r7, #7]
  59:planner.c     ****   return(block_index);
 125              		.loc 1 59 0
 126 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  60:planner.c     **** }
 127              		.loc 1 60 0
 128 001c 1846     		mov	r0, r3
 129 001e 0C37     		adds	r7, r7, #12
 130              		.cfi_def_cfa_offset 4
 131 0020 BD46     		mov	sp, r7
 132              		.cfi_def_cfa_register 13
 133              		@ sp needed
 134 0022 80BC     		pop	{r7}
 135              		.cfi_restore 7
 136              		.cfi_def_cfa_offset 0
 137 0024 7047     		bx	lr
 138              		.cfi_endproc
 139              	.LFE65:
 140              		.size	plan_prev_block_index, .-plan_prev_block_index
 141              		.global	__aeabi_fadd
 142              		.global	__aeabi_fmul
 143              		.global	__aeabi_fcmplt
 144              		.global	__aeabi_fcmpeq
 145              		.global	__aeabi_fcmpgt
 146 0026 00BF     		.section	.text.planner_recalculate,"ax",%progbits
 147              		.align	2
 148              		.thumb
 149              		.thumb_func
 150              		.type	planner_recalculate, %function
 151              	planner_recalculate:
 152              	.LFB66:
  61:planner.c     **** 
  62:planner.c     **** 
  63:planner.c     **** /*                            PLANNER SPEED DEFINITION
  64:planner.c     ****                                      +--------+   <- current->nominal_speed
  65:planner.c     ****                                     /          \
  66:planner.c     ****          current->entry_speed ->   +            \
  67:planner.c     ****                                    |             + <- next->entry_speed (aka exit speed)
  68:planner.c     ****                                    +-------------+
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 5


  69:planner.c     ****                                        time -->
  70:planner.c     **** 
  71:planner.c     ****   Recalculates the motion plan according to the following basic guidelines:
  72:planner.c     **** 
  73:planner.c     ****     1. Go over every feasible block sequentially in reverse order and calculate the junction speeds
  74:planner.c     ****         (i.e. current->entry_speed) such that:
  75:planner.c     ****       a. No junction speed exceeds the pre-computed maximum junction speed limit or nominal speeds 
  76:planner.c     ****          neighboring blocks.
  77:planner.c     ****       b. A block entry speed cannot exceed one reverse-computed from its exit speed (next->entry_sp
  78:planner.c     ****          with a maximum allowable deceleration over the block travel distance.
  79:planner.c     ****       c. The last (or newest appended) block is planned from a complete stop (an exit speed of zero
  80:planner.c     ****     2. Go over every block in chronological (forward) order and dial down junction speed values if
  81:planner.c     ****       a. The exit speed exceeds the one forward-computed from its entry speed with the maximum allo
  82:planner.c     ****          acceleration over the block travel distance.
  83:planner.c     **** 
  84:planner.c     ****   When these stages are complete, the planner will have maximized the velocity profiles throughout 
  85:planner.c     ****   of the planner blocks, where every block is operating at its maximum allowable acceleration limit
  86:planner.c     ****   other words, for all of the blocks in the planner, the plan is optimal and no further speed impro
  87:planner.c     ****   are possible. If a new block is added to the buffer, the plan is recomputed according to the said
  88:planner.c     ****   guidelines for a new optimal plan.
  89:planner.c     **** 
  90:planner.c     ****   To increase computational efficiency of these guidelines, a set of planner block pointers have be
  91:planner.c     ****   created to indicate stop-compute points for when the planner guidelines cannot logically make any
  92:planner.c     ****   changes or improvements to the plan when in normal operation and new blocks are streamed and adde
  93:planner.c     ****   planner buffer. For example, if a subset of sequential blocks in the planner have been planned an
  94:planner.c     ****   bracketed by junction velocities at their maximums (or by the first planner block as well), no ne
  95:planner.c     ****   added to the planner buffer will alter the velocity profiles within them. So we no longer have to
  96:planner.c     ****   them. Or, if a set of sequential blocks from the first block in the planner (or a optimal stop-co
  97:planner.c     ****   point) are all accelerating, they are all optimal and can not be altered by a new block added to 
  98:planner.c     ****   planner buffer, as this will only further increase the plan speed to chronological blocks until a
  99:planner.c     ****   junction velocity is reached. However, if the operational conditions of the plan changes from inf
 100:planner.c     ****   used feed holds or feedrate overrides, the stop-compute pointers will be reset and the entire pla
 101:planner.c     ****   recomputed as stated in the general guidelines.
 102:planner.c     **** 
 103:planner.c     ****   Planner buffer index mapping:
 104:planner.c     ****   - block_buffer_tail: Points to the beginning of the planner buffer. First to be executed or being
 105:planner.c     ****   - block_buffer_head: Points to the buffer block after the last block in the buffer. Used to indic
 106:planner.c     ****       the buffer is full or empty. As described for standard ring buffers, this block is always emp
 107:planner.c     ****   - next_buffer_head: Points to next planner buffer block after the buffer head block. When equal t
 108:planner.c     ****       buffer tail, this indicates the buffer is full.
 109:planner.c     ****   - block_buffer_planned: Points to the first buffer block after the last optimally planned block f
 110:planner.c     ****       streaming operating conditions. Use for planning optimizations by avoiding recomputing parts 
 111:planner.c     ****       planner buffer that don't change with the addition of a new block, as describe above. In addi
 112:planner.c     ****       this block can never be less than block_buffer_tail and will always be pushed forward and mai
 113:planner.c     ****       this requirement when encountered by the plan_discard_current_block() routine during a cycle.
 114:planner.c     **** 
 115:planner.c     ****   NOTE: Since the planner only computes on what's in the planner buffer, some motions with lots of 
 116:planner.c     ****   line segments, like G2/3 arcs or complex curves, may seem to move slow. This is because there sim
 117:planner.c     ****   enough combined distance traveled in the entire buffer to accelerate up to the nominal speed and 
 118:planner.c     ****   decelerate to a complete stop at the end of the buffer, as stated by the guidelines. If this happ
 119:planner.c     ****   becomes an annoyance, there are a few simple solutions: (1) Maximize the machine acceleration. Th
 120:planner.c     ****   will be able to compute higher velocity profiles within the same combined distance. (2) Maximize 
 121:planner.c     ****   motion(s) distance per block to a desired tolerance. The more combined distance the planner has t
 122:planner.c     ****   the faster it can go. (3) Maximize the planner buffer size. This also will increase the combined 
 123:planner.c     ****   for the planner to compute over. It also increases the number of computations the planner has to 
 124:planner.c     ****   to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, bu
 125:planner.c     ****   ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred 
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 6


 126:planner.c     **** 
 127:planner.c     **** */
 128:planner.c     **** static void planner_recalculate()
 129:planner.c     **** {
 153              		.loc 1 129 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 16
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157 0000 90B5     		push	{r4, r7, lr}
 158              		.cfi_def_cfa_offset 12
 159              		.cfi_offset 4, -12
 160              		.cfi_offset 7, -8
 161              		.cfi_offset 14, -4
 162 0002 85B0     		sub	sp, sp, #20
 163              		.cfi_def_cfa_offset 32
 164 0004 00AF     		add	r7, sp, #0
 165              		.cfi_def_cfa_register 7
 130:planner.c     ****   // Initialize block index to the last block in the planner buffer.
 131:planner.c     ****   uint8_t block_index = plan_prev_block_index(block_buffer_head);
 166              		.loc 1 131 0
 167 0006 854B     		ldr	r3, .L38
 168 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 169 000a 1846     		mov	r0, r3
 170 000c FFF7FEFF 		bl	plan_prev_block_index
 171 0010 0346     		mov	r3, r0
 172 0012 FB73     		strb	r3, [r7, #15]
 132:planner.c     **** 
 133:planner.c     ****   // Bail. Can't do anything with one only one plan-able block.
 134:planner.c     ****   if (block_index == block_buffer_planned) { return; }
 173              		.loc 1 134 0
 174 0014 824B     		ldr	r3, .L38+4
 175 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 176 0018 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 177 001a 9A42     		cmp	r2, r3
 178 001c 00F0FA80 		beq	.L37
 135:planner.c     **** 
 136:planner.c     ****   // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
 137:planner.c     ****   // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
 138:planner.c     ****   // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
 139:planner.c     ****   float entry_speed_sqr;
 140:planner.c     ****   plan_block_t *next;
 141:planner.c     ****   plan_block_t *current = &block_buffer[block_index];
 179              		.loc 1 141 0
 180 0020 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 181 0022 3422     		movs	r2, #52
 182 0024 02FB03F3 		mul	r3, r2, r3
 183 0028 7E4A     		ldr	r2, .L38+8
 184 002a 1344     		add	r3, r3, r2
 185 002c 7B60     		str	r3, [r7, #4]
 142:planner.c     **** 
 143:planner.c     ****   // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
 144:planner.c     ****   current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->mi
 186              		.loc 1 144 0
 187 002e 7B68     		ldr	r3, [r7, #4]
 188 0030 9C69     		ldr	r4, [r3, #24]	@ float
 189 0032 7B68     		ldr	r3, [r7, #4]
 190 0034 DB69     		ldr	r3, [r3, #28]	@ float
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 7


 191 0036 1946     		mov	r1, r3
 192 0038 1846     		mov	r0, r3
 193 003a FFF7FEFF 		bl	__aeabi_fadd
 194 003e 0346     		mov	r3, r0
 195 0040 1A46     		mov	r2, r3
 196 0042 7B68     		ldr	r3, [r7, #4]
 197 0044 1B6A     		ldr	r3, [r3, #32]	@ float
 198 0046 1946     		mov	r1, r3
 199 0048 1046     		mov	r0, r2
 200 004a FFF7FEFF 		bl	__aeabi_fmul
 201 004e 0346     		mov	r3, r0
 202 0050 1946     		mov	r1, r3
 203 0052 2046     		mov	r0, r4
 204 0054 FFF7FEFF 		bl	__aeabi_fcmplt
 205 0058 0346     		mov	r3, r0
 206 005a 002B     		cmp	r3, #0
 207 005c 02D0     		beq	.L35
 208              		.loc 1 144 0 is_stmt 0 discriminator 1
 209 005e 7B68     		ldr	r3, [r7, #4]
 210 0060 9B69     		ldr	r3, [r3, #24]	@ float
 211 0062 0EE0     		b	.L12
 212              	.L35:
 213              		.loc 1 144 0 discriminator 2
 214 0064 7B68     		ldr	r3, [r7, #4]
 215 0066 DB69     		ldr	r3, [r3, #28]	@ float
 216 0068 1946     		mov	r1, r3
 217 006a 1846     		mov	r0, r3
 218 006c FFF7FEFF 		bl	__aeabi_fadd
 219 0070 0346     		mov	r3, r0
 220 0072 1A46     		mov	r2, r3
 221 0074 7B68     		ldr	r3, [r7, #4]
 222 0076 1B6A     		ldr	r3, [r3, #32]	@ float
 223 0078 1946     		mov	r1, r3
 224 007a 1046     		mov	r0, r2
 225 007c FFF7FEFF 		bl	__aeabi_fmul
 226 0080 0346     		mov	r3, r0
 227              	.L12:
 228              		.loc 1 144 0 discriminator 4
 229 0082 7A68     		ldr	r2, [r7, #4]
 230 0084 5361     		str	r3, [r2, #20]	@ float
 145:planner.c     **** 
 146:planner.c     ****   block_index = plan_prev_block_index(block_index);
 231              		.loc 1 146 0 is_stmt 1 discriminator 4
 232 0086 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 233 0088 1846     		mov	r0, r3
 234 008a FFF7FEFF 		bl	plan_prev_block_index
 235 008e 0346     		mov	r3, r0
 236 0090 FB73     		strb	r3, [r7, #15]
 147:planner.c     ****   if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass c
 237              		.loc 1 147 0 discriminator 4
 238 0092 634B     		ldr	r3, .L38+4
 239 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 240 0096 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 241 0098 9A42     		cmp	r2, r3
 242 009a 51D1     		bne	.L16
 148:planner.c     ****     // Check if the first block is the tail. If so, notify stepper to update its current parameters
 149:planner.c     ****     if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 8


 243              		.loc 1 149 0
 244 009c 624B     		ldr	r3, .L38+12
 245 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 246 00a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 247 00a2 9A42     		cmp	r2, r3
 248 00a4 51D1     		bne	.L15
 249              		.loc 1 149 0 is_stmt 0 discriminator 1
 250 00a6 FFF7FEFF 		bl	st_update_plan_block_parameters
 251 00aa 4EE0     		b	.L15
 252              	.L21:
 150:planner.c     ****   } else { // Three or more plan-able blocks
 151:planner.c     ****     while (block_index != block_buffer_planned) {
 152:planner.c     ****       next = current;
 253              		.loc 1 152 0 is_stmt 1
 254 00ac 7B68     		ldr	r3, [r7, #4]
 255 00ae BB60     		str	r3, [r7, #8]
 153:planner.c     ****       current = &block_buffer[block_index];
 256              		.loc 1 153 0
 257 00b0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 258 00b2 3422     		movs	r2, #52
 259 00b4 02FB03F3 		mul	r3, r2, r3
 260 00b8 5A4A     		ldr	r2, .L38+8
 261 00ba 1344     		add	r3, r3, r2
 262 00bc 7B60     		str	r3, [r7, #4]
 154:planner.c     ****       block_index = plan_prev_block_index(block_index);
 263              		.loc 1 154 0
 264 00be FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 265 00c0 1846     		mov	r0, r3
 266 00c2 FFF7FEFF 		bl	plan_prev_block_index
 267 00c6 0346     		mov	r3, r0
 268 00c8 FB73     		strb	r3, [r7, #15]
 155:planner.c     **** 
 156:planner.c     ****       // Check if next block is the tail block(=planned block). If so, update current stepper param
 157:planner.c     ****       if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 269              		.loc 1 157 0
 270 00ca 574B     		ldr	r3, .L38+12
 271 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 272 00ce FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 273 00d0 9A42     		cmp	r2, r3
 274 00d2 01D1     		bne	.L17
 275              		.loc 1 157 0 is_stmt 0 discriminator 1
 276 00d4 FFF7FEFF 		bl	st_update_plan_block_parameters
 277              	.L17:
 158:planner.c     **** 
 159:planner.c     ****       // Compute maximum entry speed decelerating over the current block from its exit speed.
 160:planner.c     ****       if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 278              		.loc 1 160 0 is_stmt 1
 279 00d8 7B68     		ldr	r3, [r7, #4]
 280 00da 5A69     		ldr	r2, [r3, #20]	@ float
 281 00dc 7B68     		ldr	r3, [r7, #4]
 282 00de 9B69     		ldr	r3, [r3, #24]	@ float
 283 00e0 1946     		mov	r1, r3
 284 00e2 1046     		mov	r0, r2
 285 00e4 FFF7FEFF 		bl	__aeabi_fcmpeq
 286 00e8 0346     		mov	r3, r0
 287 00ea 002B     		cmp	r3, #0
 288 00ec 00D0     		beq	.L30
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 9


 289 00ee 27E0     		b	.L16
 290              	.L30:
 161:planner.c     ****         entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 291              		.loc 1 161 0
 292 00f0 BB68     		ldr	r3, [r7, #8]
 293 00f2 5C69     		ldr	r4, [r3, #20]	@ float
 294 00f4 7B68     		ldr	r3, [r7, #4]
 295 00f6 DB69     		ldr	r3, [r3, #28]	@ float
 296 00f8 1946     		mov	r1, r3
 297 00fa 1846     		mov	r0, r3
 298 00fc FFF7FEFF 		bl	__aeabi_fadd
 299 0100 0346     		mov	r3, r0
 300 0102 1A46     		mov	r2, r3
 301 0104 7B68     		ldr	r3, [r7, #4]
 302 0106 1B6A     		ldr	r3, [r3, #32]	@ float
 303 0108 1946     		mov	r1, r3
 304 010a 1046     		mov	r0, r2
 305 010c FFF7FEFF 		bl	__aeabi_fmul
 306 0110 0346     		mov	r3, r0
 307 0112 1946     		mov	r1, r3
 308 0114 2046     		mov	r0, r4
 309 0116 FFF7FEFF 		bl	__aeabi_fadd
 310 011a 0346     		mov	r3, r0
 311 011c 3B60     		str	r3, [r7]	@ float
 162:planner.c     ****         if (entry_speed_sqr < current->max_entry_speed_sqr) {
 312              		.loc 1 162 0
 313 011e 7B68     		ldr	r3, [r7, #4]
 314 0120 9B69     		ldr	r3, [r3, #24]	@ float
 315 0122 3968     		ldr	r1, [r7]	@ float
 316 0124 1846     		mov	r0, r3
 317 0126 FFF7FEFF 		bl	__aeabi_fcmpgt
 318 012a 0346     		mov	r3, r0
 319 012c 002B     		cmp	r3, #0
 320 012e 03D0     		beq	.L36
 163:planner.c     ****           current->entry_speed_sqr = entry_speed_sqr;
 321              		.loc 1 163 0
 322 0130 7B68     		ldr	r3, [r7, #4]
 323 0132 3A68     		ldr	r2, [r7]	@ float
 324 0134 5A61     		str	r2, [r3, #20]	@ float
 325 0136 03E0     		b	.L16
 326              	.L36:
 164:planner.c     ****         } else {
 165:planner.c     ****           current->entry_speed_sqr = current->max_entry_speed_sqr;
 327              		.loc 1 165 0
 328 0138 7B68     		ldr	r3, [r7, #4]
 329 013a 9A69     		ldr	r2, [r3, #24]	@ float
 330 013c 7B68     		ldr	r3, [r7, #4]
 331 013e 5A61     		str	r2, [r3, #20]	@ float
 332              	.L16:
 151:planner.c     ****       next = current;
 333              		.loc 1 151 0
 334 0140 374B     		ldr	r3, .L38+4
 335 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 336 0144 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 337 0146 9A42     		cmp	r2, r3
 338 0148 B0D1     		bne	.L21
 339              	.L15:
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 10


 166:planner.c     ****         }
 167:planner.c     ****       }
 168:planner.c     ****     }
 169:planner.c     ****   }
 170:planner.c     **** 
 171:planner.c     ****   // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
 172:planner.c     ****   // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
 173:planner.c     ****   next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 340              		.loc 1 173 0
 341 014a 354B     		ldr	r3, .L38+4
 342 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 343 014e 1A46     		mov	r2, r3
 344 0150 3423     		movs	r3, #52
 345 0152 03FB02F3 		mul	r3, r3, r2
 346 0156 334A     		ldr	r2, .L38+8
 347 0158 1344     		add	r3, r3, r2
 348 015a BB60     		str	r3, [r7, #8]
 174:planner.c     ****   block_index = plan_next_block_index(block_buffer_planned);
 349              		.loc 1 174 0
 350 015c 304B     		ldr	r3, .L38+4
 351 015e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 352 0160 1846     		mov	r0, r3
 353 0162 FFF7FEFF 		bl	plan_next_block_index
 354 0166 0346     		mov	r3, r0
 355 0168 FB73     		strb	r3, [r7, #15]
 175:planner.c     ****   while (block_index != block_buffer_head) {
 356              		.loc 1 175 0
 357 016a 4DE0     		b	.L22
 358              	.L28:
 176:planner.c     ****     current = next;
 359              		.loc 1 176 0
 360 016c BB68     		ldr	r3, [r7, #8]
 361 016e 7B60     		str	r3, [r7, #4]
 177:planner.c     ****     next = &block_buffer[block_index];
 362              		.loc 1 177 0
 363 0170 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 364 0172 3422     		movs	r2, #52
 365 0174 02FB03F3 		mul	r3, r2, r3
 366 0178 2A4A     		ldr	r2, .L38+8
 367 017a 1344     		add	r3, r3, r2
 368 017c BB60     		str	r3, [r7, #8]
 178:planner.c     **** 
 179:planner.c     ****     // Any acceleration detected in the forward pass automatically moves the optimal planned
 180:planner.c     ****     // pointer forward, since everything before this is all optimal. In other words, nothing
 181:planner.c     ****     // can improve the plan from the buffer tail to the planned pointer by logic.
 182:planner.c     ****     if (current->entry_speed_sqr < next->entry_speed_sqr) {
 369              		.loc 1 182 0
 370 017e 7B68     		ldr	r3, [r7, #4]
 371 0180 5A69     		ldr	r2, [r3, #20]	@ float
 372 0182 BB68     		ldr	r3, [r7, #8]
 373 0184 5B69     		ldr	r3, [r3, #20]	@ float
 374 0186 1946     		mov	r1, r3
 375 0188 1046     		mov	r0, r2
 376 018a FFF7FEFF 		bl	__aeabi_fcmplt
 377 018e 0346     		mov	r3, r0
 378 0190 002B     		cmp	r3, #0
 379 0192 25D0     		beq	.L23
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 11


 183:planner.c     ****       entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 380              		.loc 1 183 0
 381 0194 7B68     		ldr	r3, [r7, #4]
 382 0196 5C69     		ldr	r4, [r3, #20]	@ float
 383 0198 7B68     		ldr	r3, [r7, #4]
 384 019a DB69     		ldr	r3, [r3, #28]	@ float
 385 019c 1946     		mov	r1, r3
 386 019e 1846     		mov	r0, r3
 387 01a0 FFF7FEFF 		bl	__aeabi_fadd
 388 01a4 0346     		mov	r3, r0
 389 01a6 1A46     		mov	r2, r3
 390 01a8 7B68     		ldr	r3, [r7, #4]
 391 01aa 1B6A     		ldr	r3, [r3, #32]	@ float
 392 01ac 1946     		mov	r1, r3
 393 01ae 1046     		mov	r0, r2
 394 01b0 FFF7FEFF 		bl	__aeabi_fmul
 395 01b4 0346     		mov	r3, r0
 396 01b6 1946     		mov	r1, r3
 397 01b8 2046     		mov	r0, r4
 398 01ba FFF7FEFF 		bl	__aeabi_fadd
 399 01be 0346     		mov	r3, r0
 400 01c0 3B60     		str	r3, [r7]	@ float
 184:planner.c     ****       // If true, current block is full-acceleration and we can move the planned pointer forward.
 185:planner.c     ****       if (entry_speed_sqr < next->entry_speed_sqr) {
 401              		.loc 1 185 0
 402 01c2 BB68     		ldr	r3, [r7, #8]
 403 01c4 5B69     		ldr	r3, [r3, #20]	@ float
 404 01c6 3968     		ldr	r1, [r7]	@ float
 405 01c8 1846     		mov	r0, r3
 406 01ca FFF7FEFF 		bl	__aeabi_fcmpgt
 407 01ce 0346     		mov	r3, r0
 408 01d0 002B     		cmp	r3, #0
 409 01d2 05D0     		beq	.L23
 186:planner.c     ****         next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass se
 410              		.loc 1 186 0
 411 01d4 BB68     		ldr	r3, [r7, #8]
 412 01d6 3A68     		ldr	r2, [r7]	@ float
 413 01d8 5A61     		str	r2, [r3, #20]	@ float
 187:planner.c     ****         block_buffer_planned = block_index; // Set optimal plan pointer.
 414              		.loc 1 187 0
 415 01da 114A     		ldr	r2, .L38+4
 416 01dc FB7B     		ldrb	r3, [r7, #15]
 417 01de 1370     		strb	r3, [r2]
 418              	.L23:
 188:planner.c     ****       }
 189:planner.c     ****     }
 190:planner.c     **** 
 191:planner.c     ****     // Any block set at its maximum entry speed also creates an optimal plan up to this
 192:planner.c     ****     // point in the buffer. When the plan is bracketed by either the beginning of the
 193:planner.c     ****     // buffer and a maximum entry speed or two maximum entry speeds, every block in between
 194:planner.c     ****     // cannot logically be further improved. Hence, we don't have to recompute them anymore.
 195:planner.c     ****     if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 419              		.loc 1 195 0
 420 01e0 BB68     		ldr	r3, [r7, #8]
 421 01e2 5A69     		ldr	r2, [r3, #20]	@ float
 422 01e4 BB68     		ldr	r3, [r7, #8]
 423 01e6 9B69     		ldr	r3, [r3, #24]	@ float
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 12


 424 01e8 1946     		mov	r1, r3
 425 01ea 1046     		mov	r0, r2
 426 01ec FFF7FEFF 		bl	__aeabi_fcmpeq
 427 01f0 0346     		mov	r3, r0
 428 01f2 002B     		cmp	r3, #0
 429 01f4 02D0     		beq	.L26
 430              		.loc 1 195 0 is_stmt 0 discriminator 1
 431 01f6 0A4A     		ldr	r2, .L38+4
 432 01f8 FB7B     		ldrb	r3, [r7, #15]
 433 01fa 1370     		strb	r3, [r2]
 434              	.L26:
 196:planner.c     ****     block_index = plan_next_block_index( block_index );
 435              		.loc 1 196 0 is_stmt 1
 436 01fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 437 01fe 1846     		mov	r0, r3
 438 0200 FFF7FEFF 		bl	plan_next_block_index
 439 0204 0346     		mov	r3, r0
 440 0206 FB73     		strb	r3, [r7, #15]
 441              	.L22:
 175:planner.c     ****     current = next;
 442              		.loc 1 175 0
 443 0208 044B     		ldr	r3, .L38
 444 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 445 020c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 446 020e 9A42     		cmp	r2, r3
 447 0210 ACD1     		bne	.L28
 448 0212 00E0     		b	.L7
 449              	.L37:
 134:planner.c     **** 
 450              		.loc 1 134 0
 451 0214 00BF     		nop
 452              	.L7:
 197:planner.c     ****   }
 198:planner.c     **** }
 453              		.loc 1 198 0
 454 0216 1437     		adds	r7, r7, #20
 455              		.cfi_def_cfa_offset 12
 456 0218 BD46     		mov	sp, r7
 457              		.cfi_def_cfa_register 13
 458              		@ sp needed
 459 021a 90BD     		pop	{r4, r7, pc}
 460              	.L39:
 461              		.align	2
 462              	.L38:
 463 021c 21080000 		.word	block_buffer_head
 464 0220 23080000 		.word	block_buffer_planned
 465 0224 00000000 		.word	block_buffer
 466 0228 20080000 		.word	block_buffer_tail
 467              		.cfi_endproc
 468              	.LFE66:
 469              		.size	planner_recalculate, .-planner_recalculate
 470              		.section	.text.plan_reset,"ax",%progbits
 471              		.align	2
 472              		.global	plan_reset
 473              		.thumb
 474              		.thumb_func
 475              		.type	plan_reset, %function
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 13


 476              	plan_reset:
 477              	.LFB67:
 199:planner.c     **** 
 200:planner.c     **** 
 201:planner.c     **** void plan_reset()
 202:planner.c     **** {
 478              		.loc 1 202 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482 0000 80B5     		push	{r7, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 203:planner.c     ****   memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 488              		.loc 1 203 0
 489 0004 1C22     		movs	r2, #28
 490 0006 0021     		movs	r1, #0
 491 0008 0348     		ldr	r0, .L41
 492 000a FFF7FEFF 		bl	memset
 204:planner.c     ****   plan_reset_buffer();
 493              		.loc 1 204 0
 494 000e FFF7FEFF 		bl	plan_reset_buffer
 205:planner.c     **** }
 495              		.loc 1 205 0
 496 0012 00BF     		nop
 497 0014 80BD     		pop	{r7, pc}
 498              	.L42:
 499 0016 00BF     		.align	2
 500              	.L41:
 501 0018 24080000 		.word	pl
 502              		.cfi_endproc
 503              	.LFE67:
 504              		.size	plan_reset, .-plan_reset
 505              		.section	.text.plan_reset_buffer,"ax",%progbits
 506              		.align	2
 507              		.global	plan_reset_buffer
 508              		.thumb
 509              		.thumb_func
 510              		.type	plan_reset_buffer, %function
 511              	plan_reset_buffer:
 512              	.LFB68:
 206:planner.c     **** 
 207:planner.c     **** 
 208:planner.c     **** void plan_reset_buffer()
 209:planner.c     **** {
 513              		.loc 1 209 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 1, uses_anonymous_args = 0
 517              		@ link register save eliminated.
 518 0000 80B4     		push	{r7}
 519              		.cfi_def_cfa_offset 4
 520              		.cfi_offset 7, -4
 521 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 14


 522              		.cfi_def_cfa_register 7
 210:planner.c     ****   block_buffer_tail = 0;
 523              		.loc 1 210 0
 524 0004 074B     		ldr	r3, .L44
 525 0006 0022     		movs	r2, #0
 526 0008 1A70     		strb	r2, [r3]
 211:planner.c     ****   block_buffer_head = 0; // Empty = tail
 527              		.loc 1 211 0
 528 000a 074B     		ldr	r3, .L44+4
 529 000c 0022     		movs	r2, #0
 530 000e 1A70     		strb	r2, [r3]
 212:planner.c     ****   next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 531              		.loc 1 212 0
 532 0010 064B     		ldr	r3, .L44+8
 533 0012 0122     		movs	r2, #1
 534 0014 1A70     		strb	r2, [r3]
 213:planner.c     ****   block_buffer_planned = 0; // = block_buffer_tail;
 535              		.loc 1 213 0
 536 0016 064B     		ldr	r3, .L44+12
 537 0018 0022     		movs	r2, #0
 538 001a 1A70     		strb	r2, [r3]
 214:planner.c     **** }
 539              		.loc 1 214 0
 540 001c 00BF     		nop
 541 001e BD46     		mov	sp, r7
 542              		.cfi_def_cfa_register 13
 543              		@ sp needed
 544 0020 80BC     		pop	{r7}
 545              		.cfi_restore 7
 546              		.cfi_def_cfa_offset 0
 547 0022 7047     		bx	lr
 548              	.L45:
 549              		.align	2
 550              	.L44:
 551 0024 20080000 		.word	block_buffer_tail
 552 0028 21080000 		.word	block_buffer_head
 553 002c 22080000 		.word	next_buffer_head
 554 0030 23080000 		.word	block_buffer_planned
 555              		.cfi_endproc
 556              	.LFE68:
 557              		.size	plan_reset_buffer, .-plan_reset_buffer
 558              		.section	.text.plan_discard_current_block,"ax",%progbits
 559              		.align	2
 560              		.global	plan_discard_current_block
 561              		.thumb
 562              		.thumb_func
 563              		.type	plan_discard_current_block, %function
 564              	plan_discard_current_block:
 565              	.LFB69:
 215:planner.c     **** 
 216:planner.c     **** 
 217:planner.c     **** void plan_discard_current_block()
 218:planner.c     **** {
 566              		.loc 1 218 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 8
 569              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 15


 570 0000 80B5     		push	{r7, lr}
 571              		.cfi_def_cfa_offset 8
 572              		.cfi_offset 7, -8
 573              		.cfi_offset 14, -4
 574 0002 82B0     		sub	sp, sp, #8
 575              		.cfi_def_cfa_offset 16
 576 0004 00AF     		add	r7, sp, #0
 577              		.cfi_def_cfa_register 7
 219:planner.c     ****   if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 578              		.loc 1 219 0
 579 0006 0E4B     		ldr	r3, .L50
 580 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 581 000a 0E4B     		ldr	r3, .L50+4
 582 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 583 000e 9A42     		cmp	r2, r3
 584 0010 12D0     		beq	.L49
 585              	.LBB2:
 220:planner.c     ****     uint8_t block_index = plan_next_block_index( block_buffer_tail );
 586              		.loc 1 220 0
 587 0012 0C4B     		ldr	r3, .L50+4
 588 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 589 0016 1846     		mov	r0, r3
 590 0018 FFF7FEFF 		bl	plan_next_block_index
 591 001c 0346     		mov	r3, r0
 592 001e FB71     		strb	r3, [r7, #7]
 221:planner.c     ****     // Push block_buffer_planned pointer, if encountered.
 222:planner.c     ****     if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 593              		.loc 1 222 0
 594 0020 084B     		ldr	r3, .L50+4
 595 0022 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 596 0024 084B     		ldr	r3, .L50+8
 597 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 598 0028 9A42     		cmp	r2, r3
 599 002a 02D1     		bne	.L48
 600              		.loc 1 222 0 is_stmt 0 discriminator 1
 601 002c 064A     		ldr	r2, .L50+8
 602 002e FB79     		ldrb	r3, [r7, #7]
 603 0030 1370     		strb	r3, [r2]
 604              	.L48:
 223:planner.c     ****     block_buffer_tail = block_index;
 605              		.loc 1 223 0 is_stmt 1
 606 0032 044A     		ldr	r2, .L50+4
 607 0034 FB79     		ldrb	r3, [r7, #7]
 608 0036 1370     		strb	r3, [r2]
 609              	.L49:
 610              	.LBE2:
 224:planner.c     ****   }
 225:planner.c     **** }
 611              		.loc 1 225 0
 612 0038 00BF     		nop
 613 003a 0837     		adds	r7, r7, #8
 614              		.cfi_def_cfa_offset 8
 615 003c BD46     		mov	sp, r7
 616              		.cfi_def_cfa_register 13
 617              		@ sp needed
 618 003e 80BD     		pop	{r7, pc}
 619              	.L51:
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 16


 620              		.align	2
 621              	.L50:
 622 0040 21080000 		.word	block_buffer_head
 623 0044 20080000 		.word	block_buffer_tail
 624 0048 23080000 		.word	block_buffer_planned
 625              		.cfi_endproc
 626              	.LFE69:
 627              		.size	plan_discard_current_block, .-plan_discard_current_block
 628              		.section	.text.plan_get_system_motion_block,"ax",%progbits
 629              		.align	2
 630              		.global	plan_get_system_motion_block
 631              		.thumb
 632              		.thumb_func
 633              		.type	plan_get_system_motion_block, %function
 634              	plan_get_system_motion_block:
 635              	.LFB70:
 226:planner.c     **** 
 227:planner.c     **** 
 228:planner.c     **** // Returns address of planner buffer block used by system motions. Called by segment generator.
 229:planner.c     **** plan_block_t *plan_get_system_motion_block()
 230:planner.c     **** {
 636              		.loc 1 230 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640              		@ link register save eliminated.
 641 0000 80B4     		push	{r7}
 642              		.cfi_def_cfa_offset 4
 643              		.cfi_offset 7, -4
 644 0002 00AF     		add	r7, sp, #0
 645              		.cfi_def_cfa_register 7
 231:planner.c     ****   return(&block_buffer[block_buffer_head]);
 646              		.loc 1 231 0
 647 0004 054B     		ldr	r3, .L54
 648 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 649 0008 1A46     		mov	r2, r3
 650 000a 3423     		movs	r3, #52
 651 000c 03FB02F3 		mul	r3, r3, r2
 652 0010 034A     		ldr	r2, .L54+4
 653 0012 1344     		add	r3, r3, r2
 232:planner.c     **** }
 654              		.loc 1 232 0
 655 0014 1846     		mov	r0, r3
 656 0016 BD46     		mov	sp, r7
 657              		.cfi_def_cfa_register 13
 658              		@ sp needed
 659 0018 80BC     		pop	{r7}
 660              		.cfi_restore 7
 661              		.cfi_def_cfa_offset 0
 662 001a 7047     		bx	lr
 663              	.L55:
 664              		.align	2
 665              	.L54:
 666 001c 21080000 		.word	block_buffer_head
 667 0020 00000000 		.word	block_buffer
 668              		.cfi_endproc
 669              	.LFE70:
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 17


 670              		.size	plan_get_system_motion_block, .-plan_get_system_motion_block
 671              		.section	.text.plan_get_current_block,"ax",%progbits
 672              		.align	2
 673              		.global	plan_get_current_block
 674              		.thumb
 675              		.thumb_func
 676              		.type	plan_get_current_block, %function
 677              	plan_get_current_block:
 678              	.LFB71:
 233:planner.c     **** 
 234:planner.c     **** 
 235:planner.c     **** // Returns address of first planner block, if available. Called by various main program functions.
 236:planner.c     **** plan_block_t *plan_get_current_block()
 237:planner.c     **** {
 679              		.loc 1 237 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 1, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 684 0000 80B4     		push	{r7}
 685              		.cfi_def_cfa_offset 4
 686              		.cfi_offset 7, -4
 687 0002 00AF     		add	r7, sp, #0
 688              		.cfi_def_cfa_register 7
 238:planner.c     ****   if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 689              		.loc 1 238 0
 690 0004 094B     		ldr	r3, .L59
 691 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 692 0008 094B     		ldr	r3, .L59+4
 693 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 694 000c 9A42     		cmp	r2, r3
 695 000e 01D1     		bne	.L57
 696              		.loc 1 238 0 is_stmt 0 discriminator 1
 697 0010 0023     		movs	r3, #0
 698 0012 07E0     		b	.L58
 699              	.L57:
 239:planner.c     ****   return(&block_buffer[block_buffer_tail]);
 700              		.loc 1 239 0 is_stmt 1
 701 0014 064B     		ldr	r3, .L59+4
 702 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 703 0018 1A46     		mov	r2, r3
 704 001a 3423     		movs	r3, #52
 705 001c 03FB02F3 		mul	r3, r3, r2
 706 0020 044A     		ldr	r2, .L59+8
 707 0022 1344     		add	r3, r3, r2
 708              	.L58:
 240:planner.c     **** }
 709              		.loc 1 240 0
 710 0024 1846     		mov	r0, r3
 711 0026 BD46     		mov	sp, r7
 712              		.cfi_def_cfa_register 13
 713              		@ sp needed
 714 0028 80BC     		pop	{r7}
 715              		.cfi_restore 7
 716              		.cfi_def_cfa_offset 0
 717 002a 7047     		bx	lr
 718              	.L60:
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 18


 719              		.align	2
 720              	.L59:
 721 002c 21080000 		.word	block_buffer_head
 722 0030 20080000 		.word	block_buffer_tail
 723 0034 00000000 		.word	block_buffer
 724              		.cfi_endproc
 725              	.LFE71:
 726              		.size	plan_get_current_block, .-plan_get_current_block
 727              		.section	.text.plan_get_exec_block_exit_speed_sqr,"ax",%progbits
 728              		.align	2
 729              		.global	plan_get_exec_block_exit_speed_sqr
 730              		.thumb
 731              		.thumb_func
 732              		.type	plan_get_exec_block_exit_speed_sqr, %function
 733              	plan_get_exec_block_exit_speed_sqr:
 734              	.LFB72:
 241:planner.c     **** 
 242:planner.c     **** 
 243:planner.c     **** float plan_get_exec_block_exit_speed_sqr()
 244:planner.c     **** {
 735              		.loc 1 244 0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 8
 738              		@ frame_needed = 1, uses_anonymous_args = 0
 739 0000 80B5     		push	{r7, lr}
 740              		.cfi_def_cfa_offset 8
 741              		.cfi_offset 7, -8
 742              		.cfi_offset 14, -4
 743 0002 82B0     		sub	sp, sp, #8
 744              		.cfi_def_cfa_offset 16
 745 0004 00AF     		add	r7, sp, #0
 746              		.cfi_def_cfa_register 7
 245:planner.c     ****   uint8_t block_index = plan_next_block_index(block_buffer_tail);
 747              		.loc 1 245 0
 748 0006 0D4B     		ldr	r3, .L64
 749 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 750 000a 1846     		mov	r0, r3
 751 000c FFF7FEFF 		bl	plan_next_block_index
 752 0010 0346     		mov	r3, r0
 753 0012 FB71     		strb	r3, [r7, #7]
 246:planner.c     ****   if (block_index == block_buffer_head) { return( 0.0 ); }
 754              		.loc 1 246 0
 755 0014 0A4B     		ldr	r3, .L64+4
 756 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 757 0018 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 758 001a 9A42     		cmp	r2, r3
 759 001c 02D1     		bne	.L62
 760              		.loc 1 246 0 is_stmt 0 discriminator 1
 761 001e 4FF00003 		mov	r3, #0
 762 0022 07E0     		b	.L63
 763              	.L62:
 247:planner.c     ****   return( block_buffer[block_index].entry_speed_sqr );
 764              		.loc 1 247 0 is_stmt 1
 765 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 766 0026 074A     		ldr	r2, .L64+8
 767 0028 3421     		movs	r1, #52
 768 002a 01FB03F3 		mul	r3, r1, r3
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 19


 769 002e 1344     		add	r3, r3, r2
 770 0030 1433     		adds	r3, r3, #20
 771 0032 1B68     		ldr	r3, [r3]	@ float
 772              	.L63:
 248:planner.c     **** }
 773              		.loc 1 248 0
 774 0034 1846     		mov	r0, r3
 775 0036 0837     		adds	r7, r7, #8
 776              		.cfi_def_cfa_offset 8
 777 0038 BD46     		mov	sp, r7
 778              		.cfi_def_cfa_register 13
 779              		@ sp needed
 780 003a 80BD     		pop	{r7, pc}
 781              	.L65:
 782              		.align	2
 783              	.L64:
 784 003c 20080000 		.word	block_buffer_tail
 785 0040 21080000 		.word	block_buffer_head
 786 0044 00000000 		.word	block_buffer
 787              		.cfi_endproc
 788              	.LFE72:
 789              		.size	plan_get_exec_block_exit_speed_sqr, .-plan_get_exec_block_exit_speed_sqr
 790              		.section	.text.plan_check_full_buffer,"ax",%progbits
 791              		.align	2
 792              		.global	plan_check_full_buffer
 793              		.thumb
 794              		.thumb_func
 795              		.type	plan_check_full_buffer, %function
 796              	plan_check_full_buffer:
 797              	.LFB73:
 249:planner.c     **** 
 250:planner.c     **** 
 251:planner.c     **** // Returns the availability status of the block ring buffer. True, if full.
 252:planner.c     **** uint8_t plan_check_full_buffer()
 253:planner.c     **** {
 798              		.loc 1 253 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 1, uses_anonymous_args = 0
 802              		@ link register save eliminated.
 803 0000 80B4     		push	{r7}
 804              		.cfi_def_cfa_offset 4
 805              		.cfi_offset 7, -4
 806 0002 00AF     		add	r7, sp, #0
 807              		.cfi_def_cfa_register 7
 254:planner.c     ****   if (block_buffer_tail == next_buffer_head) { return(true); }
 808              		.loc 1 254 0
 809 0004 064B     		ldr	r3, .L69
 810 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 811 0008 064B     		ldr	r3, .L69+4
 812 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 813 000c 9A42     		cmp	r2, r3
 814 000e 01D1     		bne	.L67
 815              		.loc 1 254 0 is_stmt 0 discriminator 1
 816 0010 0123     		movs	r3, #1
 817 0012 00E0     		b	.L68
 818              	.L67:
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 20


 255:planner.c     ****   return(false);
 819              		.loc 1 255 0 is_stmt 1
 820 0014 0023     		movs	r3, #0
 821              	.L68:
 256:planner.c     **** }
 822              		.loc 1 256 0
 823 0016 1846     		mov	r0, r3
 824 0018 BD46     		mov	sp, r7
 825              		.cfi_def_cfa_register 13
 826              		@ sp needed
 827 001a 80BC     		pop	{r7}
 828              		.cfi_restore 7
 829              		.cfi_def_cfa_offset 0
 830 001c 7047     		bx	lr
 831              	.L70:
 832 001e 00BF     		.align	2
 833              	.L69:
 834 0020 20080000 		.word	block_buffer_tail
 835 0024 22080000 		.word	next_buffer_head
 836              		.cfi_endproc
 837              	.LFE73:
 838              		.size	plan_check_full_buffer, .-plan_check_full_buffer
 839              		.global	__aeabi_f2d
 840              		.global	__aeabi_i2d
 841              		.global	__aeabi_dmul
 842              		.global	__aeabi_d2f
 843              		.section	.text.plan_compute_profile_nominal_speed,"ax",%progbits
 844              		.align	2
 845              		.global	plan_compute_profile_nominal_speed
 846              		.thumb
 847              		.thumb_func
 848              		.type	plan_compute_profile_nominal_speed, %function
 849              	plan_compute_profile_nominal_speed:
 850              	.LFB74:
 257:planner.c     **** 
 258:planner.c     **** 
 259:planner.c     **** // Computes and returns block nominal speed based on running condition and override values.
 260:planner.c     **** // NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
 261:planner.c     **** float plan_compute_profile_nominal_speed(plan_block_t *block)
 262:planner.c     **** {
 851              		.loc 1 262 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 16
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855 0000 B0B5     		push	{r4, r5, r7, lr}
 856              		.cfi_def_cfa_offset 16
 857              		.cfi_offset 4, -16
 858              		.cfi_offset 5, -12
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 0002 84B0     		sub	sp, sp, #16
 862              		.cfi_def_cfa_offset 32
 863 0004 00AF     		add	r7, sp, #0
 864              		.cfi_def_cfa_register 7
 865 0006 7860     		str	r0, [r7, #4]
 263:planner.c     ****   float nominal_speed = block->programmed_rate;
 866              		.loc 1 263 0
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 21


 867 0008 7B68     		ldr	r3, [r7, #4]
 868 000a DB6A     		ldr	r3, [r3, #44]	@ float
 869 000c FB60     		str	r3, [r7, #12]	@ float
 264:planner.c     ****   if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 870              		.loc 1 264 0
 871 000e 7B68     		ldr	r3, [r7, #4]
 872 0010 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 873 0012 03F00103 		and	r3, r3, #1
 874 0016 002B     		cmp	r3, #0
 875 0018 1DD0     		beq	.L72
 876              		.loc 1 264 0 is_stmt 0 discriminator 1
 877 001a F868     		ldr	r0, [r7, #12]	@ float
 878 001c FFF7FEFF 		bl	__aeabi_f2d
 879 0020 0446     		mov	r4, r0
 880 0022 0D46     		mov	r5, r1
 881 0024 2E4B     		ldr	r3, .L82+8
 882 0026 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 883 0028 1846     		mov	r0, r3
 884 002a FFF7FEFF 		bl	__aeabi_i2d
 885 002e 2AA3     		adr	r3, .L82
 886 0030 D3E90023 		ldrd	r2, [r3]
 887 0034 FFF7FEFF 		bl	__aeabi_dmul
 888 0038 0246     		mov	r2, r0
 889 003a 0B46     		mov	r3, r1
 890 003c 2046     		mov	r0, r4
 891 003e 2946     		mov	r1, r5
 892 0040 FFF7FEFF 		bl	__aeabi_dmul
 893 0044 0346     		mov	r3, r0
 894 0046 0C46     		mov	r4, r1
 895 0048 1846     		mov	r0, r3
 896 004a 2146     		mov	r1, r4
 897 004c FFF7FEFF 		bl	__aeabi_d2f
 898 0050 0346     		mov	r3, r0
 899 0052 FB60     		str	r3, [r7, #12]	@ float
 900 0054 2EE0     		b	.L73
 901              	.L72:
 265:planner.c     ****   else {
 266:planner.c     ****     if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01*sys.f_overrid
 902              		.loc 1 266 0 is_stmt 1
 903 0056 7B68     		ldr	r3, [r7, #4]
 904 0058 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 905 005a 03F00403 		and	r3, r3, #4
 906 005e 002B     		cmp	r3, #0
 907 0060 1CD1     		bne	.L74
 908              		.loc 1 266 0 is_stmt 0 discriminator 1
 909 0062 F868     		ldr	r0, [r7, #12]	@ float
 910 0064 FFF7FEFF 		bl	__aeabi_f2d
 911 0068 0446     		mov	r4, r0
 912 006a 0D46     		mov	r5, r1
 913 006c 1C4B     		ldr	r3, .L82+8
 914 006e DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 915 0070 1846     		mov	r0, r3
 916 0072 FFF7FEFF 		bl	__aeabi_i2d
 917 0076 18A3     		adr	r3, .L82
 918 0078 D3E90023 		ldrd	r2, [r3]
 919 007c FFF7FEFF 		bl	__aeabi_dmul
 920 0080 0246     		mov	r2, r0
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 22


 921 0082 0B46     		mov	r3, r1
 922 0084 2046     		mov	r0, r4
 923 0086 2946     		mov	r1, r5
 924 0088 FFF7FEFF 		bl	__aeabi_dmul
 925 008c 0346     		mov	r3, r0
 926 008e 0C46     		mov	r4, r1
 927 0090 1846     		mov	r0, r3
 928 0092 2146     		mov	r1, r4
 929 0094 FFF7FEFF 		bl	__aeabi_d2f
 930 0098 0346     		mov	r3, r0
 931 009a FB60     		str	r3, [r7, #12]	@ float
 932              	.L74:
 267:planner.c     ****     if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 933              		.loc 1 267 0 is_stmt 1
 934 009c 7B68     		ldr	r3, [r7, #4]
 935 009e 9B6A     		ldr	r3, [r3, #40]	@ float
 936 00a0 F968     		ldr	r1, [r7, #12]	@ float
 937 00a2 1846     		mov	r0, r3
 938 00a4 FFF7FEFF 		bl	__aeabi_fcmplt
 939 00a8 0346     		mov	r3, r0
 940 00aa 002B     		cmp	r3, #0
 941 00ac 02D0     		beq	.L73
 942              		.loc 1 267 0 is_stmt 0 discriminator 1
 943 00ae 7B68     		ldr	r3, [r7, #4]
 944 00b0 9B6A     		ldr	r3, [r3, #40]	@ float
 945 00b2 FB60     		str	r3, [r7, #12]	@ float
 946              	.L73:
 268:planner.c     ****   }
 269:planner.c     ****   if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 947              		.loc 1 269 0 is_stmt 1
 948 00b4 4FF07E51 		mov	r1, #1065353216
 949 00b8 F868     		ldr	r0, [r7, #12]	@ float
 950 00ba FFF7FEFF 		bl	__aeabi_fcmpgt
 951 00be 0346     		mov	r3, r0
 952 00c0 002B     		cmp	r3, #0
 953 00c2 01D0     		beq	.L81
 954              		.loc 1 269 0 is_stmt 0 discriminator 1
 955 00c4 FB68     		ldr	r3, [r7, #12]	@ float
 956 00c6 01E0     		b	.L78
 957              	.L81:
 270:planner.c     ****   return(MINIMUM_FEED_RATE);
 958              		.loc 1 270 0 is_stmt 1
 959 00c8 4FF07E53 		mov	r3, #1065353216
 960              	.L78:
 271:planner.c     **** }
 961              		.loc 1 271 0
 962 00cc 1846     		mov	r0, r3
 963 00ce 1037     		adds	r7, r7, #16
 964              		.cfi_def_cfa_offset 16
 965 00d0 BD46     		mov	sp, r7
 966              		.cfi_def_cfa_register 13
 967              		@ sp needed
 968 00d2 B0BD     		pop	{r4, r5, r7, pc}
 969              	.L83:
 970 00d4 AFF30080 		.align	3
 971              	.L82:
 972 00d8 7B14AE47 		.word	1202590843
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 23


 973 00dc E17A843F 		.word	1065646817
 974 00e0 00000000 		.word	sys
 975              		.cfi_endproc
 976              	.LFE74:
 977              		.size	plan_compute_profile_nominal_speed, .-plan_compute_profile_nominal_speed
 978              		.section	.text.plan_compute_profile_parameters,"ax",%progbits
 979              		.align	2
 980              		.thumb
 981              		.thumb_func
 982              		.type	plan_compute_profile_parameters, %function
 983              	plan_compute_profile_parameters:
 984              	.LFB75:
 272:planner.c     **** 
 273:planner.c     **** 
 274:planner.c     **** // Computes and updates the max entry speed (sqr) of the block, based on the minimum of the junctio
 275:planner.c     **** // previous and current nominal speeds and max junction speed.
 276:planner.c     **** static void plan_compute_profile_parameters(plan_block_t *block, float nominal_speed, float prev_no
 277:planner.c     **** {
 985              		.loc 1 277 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 16
 988              		@ frame_needed = 1, uses_anonymous_args = 0
 989 0000 80B5     		push	{r7, lr}
 990              		.cfi_def_cfa_offset 8
 991              		.cfi_offset 7, -8
 992              		.cfi_offset 14, -4
 993 0002 84B0     		sub	sp, sp, #16
 994              		.cfi_def_cfa_offset 24
 995 0004 00AF     		add	r7, sp, #0
 996              		.cfi_def_cfa_register 7
 997 0006 F860     		str	r0, [r7, #12]
 998 0008 B960     		str	r1, [r7, #8]	@ float
 999 000a 7A60     		str	r2, [r7, #4]	@ float
 278:planner.c     ****   // Compute the junction maximum entry based on the minimum of the junction speed and neighboring 
 279:planner.c     ****   if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_no
 1000              		.loc 1 279 0
 1001 000c 7968     		ldr	r1, [r7, #4]	@ float
 1002 000e B868     		ldr	r0, [r7, #8]	@ float
 1003 0010 FFF7FEFF 		bl	__aeabi_fcmpgt
 1004 0014 0346     		mov	r3, r0
 1005 0016 002B     		cmp	r3, #0
 1006 0018 08D0     		beq	.L92
 1007              		.loc 1 279 0 is_stmt 0 discriminator 1
 1008 001a 7968     		ldr	r1, [r7, #4]	@ float
 1009 001c 7868     		ldr	r0, [r7, #4]	@ float
 1010 001e FFF7FEFF 		bl	__aeabi_fmul
 1011 0022 0346     		mov	r3, r0
 1012 0024 1A46     		mov	r2, r3
 1013 0026 FB68     		ldr	r3, [r7, #12]
 1014 0028 9A61     		str	r2, [r3, #24]	@ float
 1015 002a 07E0     		b	.L87
 1016              	.L92:
 280:planner.c     ****   else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 1017              		.loc 1 280 0 is_stmt 1
 1018 002c B968     		ldr	r1, [r7, #8]	@ float
 1019 002e B868     		ldr	r0, [r7, #8]	@ float
 1020 0030 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 24


 1021 0034 0346     		mov	r3, r0
 1022 0036 1A46     		mov	r2, r3
 1023 0038 FB68     		ldr	r3, [r7, #12]
 1024 003a 9A61     		str	r2, [r3, #24]	@ float
 1025              	.L87:
 281:planner.c     ****   if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = bl
 1026              		.loc 1 281 0
 1027 003c FB68     		ldr	r3, [r7, #12]
 1028 003e 9A69     		ldr	r2, [r3, #24]	@ float
 1029 0040 FB68     		ldr	r3, [r7, #12]
 1030 0042 5B6A     		ldr	r3, [r3, #36]	@ float
 1031 0044 1946     		mov	r1, r3
 1032 0046 1046     		mov	r0, r2
 1033 0048 FFF7FEFF 		bl	__aeabi_fcmpgt
 1034 004c 0346     		mov	r3, r0
 1035 004e 002B     		cmp	r3, #0
 1036 0050 00D1     		bne	.L91
 282:planner.c     **** }
 1037              		.loc 1 282 0
 1038 0052 03E0     		b	.L93
 1039              	.L91:
 281:planner.c     ****   if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = bl
 1040              		.loc 1 281 0 discriminator 1
 1041 0054 FB68     		ldr	r3, [r7, #12]
 1042 0056 5A6A     		ldr	r2, [r3, #36]	@ float
 1043 0058 FB68     		ldr	r3, [r7, #12]
 1044 005a 9A61     		str	r2, [r3, #24]	@ float
 1045              	.L93:
 1046              		.loc 1 282 0
 1047 005c 00BF     		nop
 1048 005e 1037     		adds	r7, r7, #16
 1049              		.cfi_def_cfa_offset 8
 1050 0060 BD46     		mov	sp, r7
 1051              		.cfi_def_cfa_register 13
 1052              		@ sp needed
 1053 0062 80BD     		pop	{r7, pc}
 1054              		.cfi_endproc
 1055              	.LFE75:
 1056              		.size	plan_compute_profile_parameters, .-plan_compute_profile_parameters
 1057              		.section	.text.plan_update_velocity_profile_parameters,"ax",%progbits
 1058              		.align	2
 1059              		.global	plan_update_velocity_profile_parameters
 1060              		.thumb
 1061              		.thumb_func
 1062              		.type	plan_update_velocity_profile_parameters, %function
 1063              	plan_update_velocity_profile_parameters:
 1064              	.LFB76:
 283:planner.c     **** 
 284:planner.c     **** 
 285:planner.c     **** // Re-calculates buffered motions profile parameters upon a motion-based override change.
 286:planner.c     **** void plan_update_velocity_profile_parameters()
 287:planner.c     **** {
 1065              		.loc 1 287 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 16
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 25


 1070              		.cfi_def_cfa_offset 8
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 1073 0002 84B0     		sub	sp, sp, #16
 1074              		.cfi_def_cfa_offset 24
 1075 0004 00AF     		add	r7, sp, #0
 1076              		.cfi_def_cfa_register 7
 288:planner.c     ****   uint8_t block_index = block_buffer_tail;
 1077              		.loc 1 288 0
 1078 0006 154B     		ldr	r3, .L97
 1079 0008 1B78     		ldrb	r3, [r3]
 1080 000a FB73     		strb	r3, [r7, #15]
 289:planner.c     ****   plan_block_t *block;
 290:planner.c     ****   float nominal_speed;
 291:planner.c     ****   float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculatio
 1081              		.loc 1 291 0
 1082 000c 144B     		ldr	r3, .L97+4
 1083 000e BB60     		str	r3, [r7, #8]	@ float
 292:planner.c     ****   while (block_index != block_buffer_head) {
 1084              		.loc 1 292 0
 1085 0010 17E0     		b	.L95
 1086              	.L96:
 293:planner.c     ****     block = &block_buffer[block_index];
 1087              		.loc 1 293 0
 1088 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1089 0014 3422     		movs	r2, #52
 1090 0016 02FB03F3 		mul	r3, r2, r3
 1091 001a 124A     		ldr	r2, .L97+8
 1092 001c 1344     		add	r3, r3, r2
 1093 001e 7B60     		str	r3, [r7, #4]
 294:planner.c     ****     nominal_speed = plan_compute_profile_nominal_speed(block);
 1094              		.loc 1 294 0
 1095 0020 7868     		ldr	r0, [r7, #4]
 1096 0022 FFF7FEFF 		bl	plan_compute_profile_nominal_speed
 1097 0026 3860     		str	r0, [r7]	@ float
 295:planner.c     ****     plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
 1098              		.loc 1 295 0
 1099 0028 BA68     		ldr	r2, [r7, #8]	@ float
 1100 002a 3968     		ldr	r1, [r7]	@ float
 1101 002c 7868     		ldr	r0, [r7, #4]
 1102 002e FFF7FEFF 		bl	plan_compute_profile_parameters
 296:planner.c     ****     prev_nominal_speed = nominal_speed;
 1103              		.loc 1 296 0
 1104 0032 3B68     		ldr	r3, [r7]	@ float
 1105 0034 BB60     		str	r3, [r7, #8]	@ float
 297:planner.c     ****     block_index = plan_next_block_index(block_index);
 1106              		.loc 1 297 0
 1107 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1108 0038 1846     		mov	r0, r3
 1109 003a FFF7FEFF 		bl	plan_next_block_index
 1110 003e 0346     		mov	r3, r0
 1111 0040 FB73     		strb	r3, [r7, #15]
 1112              	.L95:
 292:planner.c     ****     block = &block_buffer[block_index];
 1113              		.loc 1 292 0
 1114 0042 094B     		ldr	r3, .L97+12
 1115 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 26


 1116 0046 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1117 0048 9A42     		cmp	r2, r3
 1118 004a E2D1     		bne	.L96
 298:planner.c     ****   }
 299:planner.c     ****   pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming bl
 1119              		.loc 1 299 0
 1120 004c 074A     		ldr	r2, .L97+16
 1121 004e BB68     		ldr	r3, [r7, #8]	@ float
 1122 0050 9361     		str	r3, [r2, #24]	@ float
 300:planner.c     **** }
 1123              		.loc 1 300 0
 1124 0052 00BF     		nop
 1125 0054 1037     		adds	r7, r7, #16
 1126              		.cfi_def_cfa_offset 8
 1127 0056 BD46     		mov	sp, r7
 1128              		.cfi_def_cfa_register 13
 1129              		@ sp needed
 1130 0058 80BD     		pop	{r7, pc}
 1131              	.L98:
 1132 005a 00BF     		.align	2
 1133              	.L97:
 1134 005c 20080000 		.word	block_buffer_tail
 1135 0060 9976967E 		.word	2123789977
 1136 0064 00000000 		.word	block_buffer
 1137 0068 21080000 		.word	block_buffer_head
 1138 006c 24080000 		.word	pl
 1139              		.cfi_endproc
 1140              	.LFE76:
 1141              		.size	plan_update_velocity_profile_parameters, .-plan_update_velocity_profile_parameters
 1142              		.global	__aeabi_i2f
 1143              		.global	__aeabi_fdiv
 1144              		.global	__aeabi_fsub
 1145              		.global	__aeabi_dcmpgt
 1146              		.global	__aeabi_dcmplt
 1147              		.global	__aeabi_dsub
 1148              		.global	__aeabi_ddiv
 1149              		.section	.text.plan_buffer_line,"ax",%progbits
 1150              		.align	2
 1151              		.global	plan_buffer_line
 1152              		.thumb
 1153              		.thumb_func
 1154              		.type	plan_buffer_line, %function
 1155              	plan_buffer_line:
 1156              	.LFB77:
 301:planner.c     **** 
 302:planner.c     **** 
 303:planner.c     **** /* Add a new linear movement to the buffer. target[N_AXIS] is the signed, absolute target position
 304:planner.c     ****    in millimeters. Feed rate specifies the speed of the motion. If feed rate is inverted, the feed
 305:planner.c     ****    rate is taken to mean "frequency" and would complete the operation in 1/feed_rate minutes.
 306:planner.c     ****    All position data passed to the planner must be in terms of machine position to keep the planner
 307:planner.c     ****    independent of any coordinate system changes and offsets, which are handled by the g-code parser
 308:planner.c     ****    NOTE: Assumes buffer is available. Buffer checks are handled at a higher level by motion_control
 309:planner.c     ****    In other words, the buffer head is never equal to the buffer tail.  Also the feed rate input val
 310:planner.c     ****    is used in three ways: as a normal feed rate if invert_feed_rate is false, as inverse time if
 311:planner.c     ****    invert_feed_rate is true, or as seek/rapids rate if the feed_rate value is negative (and
 312:planner.c     ****    invert_feed_rate always false).
 313:planner.c     ****    The system motion condition tells the planner to plan a motion in the always unused block buffer
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 27


 314:planner.c     ****    head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
 315:planner.c     ****    motions are still planned correctly, while the stepper module only points to the block buffer he
 316:planner.c     ****    to execute the special system motion. */
 317:planner.c     **** uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
 318:planner.c     **** {
 1157              		.loc 1 318 0
 1158              		.cfi_startproc
 1159              		@ args = 0, pretend = 0, frame = 88
 1160              		@ frame_needed = 1, uses_anonymous_args = 0
 1161 0000 B0B5     		push	{r4, r5, r7, lr}
 1162              		.cfi_def_cfa_offset 16
 1163              		.cfi_offset 4, -16
 1164              		.cfi_offset 5, -12
 1165              		.cfi_offset 7, -8
 1166              		.cfi_offset 14, -4
 1167 0002 96B0     		sub	sp, sp, #88
 1168              		.cfi_def_cfa_offset 104
 1169 0004 00AF     		add	r7, sp, #0
 1170              		.cfi_def_cfa_register 7
 1171 0006 7860     		str	r0, [r7, #4]
 1172 0008 3960     		str	r1, [r7]
 319:planner.c     ****   // Prepare and initialize new block. Copy relevant pl_data for block execution.
 320:planner.c     ****   plan_block_t *block = &block_buffer[block_buffer_head];
 1173              		.loc 1 320 0
 1174 000a B44B     		ldr	r3, .L136
 1175 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1176 000e 1A46     		mov	r2, r3
 1177 0010 3423     		movs	r3, #52
 1178 0012 03FB02F3 		mul	r3, r3, r2
 1179 0016 B24A     		ldr	r2, .L136+4
 1180 0018 1344     		add	r3, r3, r2
 1181 001a BB64     		str	r3, [r7, #72]
 321:planner.c     ****   memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 1182              		.loc 1 321 0
 1183 001c 3422     		movs	r2, #52
 1184 001e 0021     		movs	r1, #0
 1185 0020 B86C     		ldr	r0, [r7, #72]
 1186 0022 FFF7FEFF 		bl	memset
 322:planner.c     ****   block->condition = pl_data->condition;
 1187              		.loc 1 322 0
 1188 0026 3B68     		ldr	r3, [r7]
 1189 0028 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 1190 002a BB6C     		ldr	r3, [r7, #72]
 1191 002c 5A74     		strb	r2, [r3, #17]
 323:planner.c     ****   #ifdef VARIABLE_SPINDLE
 324:planner.c     ****     block->spindle_speed = pl_data->spindle_speed;
 1192              		.loc 1 324 0
 1193 002e 3B68     		ldr	r3, [r7]
 1194 0030 5A68     		ldr	r2, [r3, #4]	@ float
 1195 0032 BB6C     		ldr	r3, [r7, #72]
 1196 0034 1A63     		str	r2, [r3, #48]	@ float
 325:planner.c     ****   #endif
 326:planner.c     ****   #ifdef USE_LINE_NUMBERS
 327:planner.c     ****     block->line_number = pl_data->line_number;
 328:planner.c     ****   #endif
 329:planner.c     **** 
 330:planner.c     ****   // Compute and store initial move distance data.
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 28


 331:planner.c     ****   int32_t target_steps[N_AXIS], position_steps[N_AXIS];
 332:planner.c     ****   float unit_vec[N_AXIS], delta_mm;
 333:planner.c     ****   uint8_t idx;
 334:planner.c     **** 
 335:planner.c     ****   // Copy position data based on type of motion being planned.
 336:planner.c     ****   if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) { 
 1197              		.loc 1 336 0
 1198 0036 BB6C     		ldr	r3, [r7, #72]
 1199 0038 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1200 003a 03F00203 		and	r3, r3, #2
 1201 003e 002B     		cmp	r3, #0
 1202 0040 0DD0     		beq	.L100
 337:planner.c     ****     #ifdef COREXY
 338:planner.c     ****       position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
 1203              		.loc 1 338 0
 1204 0042 A848     		ldr	r0, .L136+8
 1205 0044 FFF7FEFF 		bl	system_convert_corexy_to_x_axis_steps
 1206 0048 0346     		mov	r3, r0
 1207 004a 7B62     		str	r3, [r7, #36]
 339:planner.c     ****       position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
 1208              		.loc 1 339 0
 1209 004c A548     		ldr	r0, .L136+8
 1210 004e FFF7FEFF 		bl	system_convert_corexy_to_y_axis_steps
 1211 0052 0346     		mov	r3, r0
 1212 0054 BB62     		str	r3, [r7, #40]
 340:planner.c     ****       position_steps[Z_AXIS] = sys_position[Z_AXIS];
 1213              		.loc 1 340 0
 1214 0056 A34B     		ldr	r3, .L136+8
 1215 0058 9B68     		ldr	r3, [r3, #8]
 1216 005a FB62     		str	r3, [r7, #44]
 1217 005c 05E0     		b	.L101
 1218              	.L100:
 341:planner.c     ****     #else
 342:planner.c     ****       memcpy(position_steps, sys_position, sizeof(sys_position)); 
 343:planner.c     ****     #endif
 344:planner.c     ****   } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 1219              		.loc 1 344 0
 1220 005e A24A     		ldr	r2, .L136+12
 1221 0060 07F12403 		add	r3, r7, #36
 1222 0064 07CA     		ldmia	r2, {r0, r1, r2}
 1223 0066 83E80700 		stmia	r3, {r0, r1, r2}
 1224              	.L101:
 345:planner.c     **** 
 346:planner.c     ****   #ifdef COREXY
 347:planner.c     ****     target_steps[A_MOTOR] = lround(target[A_MOTOR]*settings.steps_per_mm[A_MOTOR]);
 1225              		.loc 1 347 0
 1226 006a 7B68     		ldr	r3, [r7, #4]
 1227 006c 1A68     		ldr	r2, [r3]	@ float
 1228 006e 9F4B     		ldr	r3, .L136+16
 1229 0070 1B68     		ldr	r3, [r3]	@ float
 1230 0072 1946     		mov	r1, r3
 1231 0074 1046     		mov	r0, r2
 1232 0076 FFF7FEFF 		bl	__aeabi_fmul
 1233 007a 0346     		mov	r3, r0
 1234 007c 1846     		mov	r0, r3
 1235 007e FFF7FEFF 		bl	__aeabi_f2d
 1236 0082 0346     		mov	r3, r0
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 29


 1237 0084 0C46     		mov	r4, r1
 1238 0086 1846     		mov	r0, r3
 1239 0088 2146     		mov	r1, r4
 1240 008a FFF7FEFF 		bl	lround
 1241 008e 0346     		mov	r3, r0
 1242 0090 3B63     		str	r3, [r7, #48]
 348:planner.c     ****     target_steps[B_MOTOR] = lround(target[B_MOTOR]*settings.steps_per_mm[B_MOTOR]);
 1243              		.loc 1 348 0
 1244 0092 7B68     		ldr	r3, [r7, #4]
 1245 0094 0433     		adds	r3, r3, #4
 1246 0096 1A68     		ldr	r2, [r3]	@ float
 1247 0098 944B     		ldr	r3, .L136+16
 1248 009a 5B68     		ldr	r3, [r3, #4]	@ float
 1249 009c 1946     		mov	r1, r3
 1250 009e 1046     		mov	r0, r2
 1251 00a0 FFF7FEFF 		bl	__aeabi_fmul
 1252 00a4 0346     		mov	r3, r0
 1253 00a6 1846     		mov	r0, r3
 1254 00a8 FFF7FEFF 		bl	__aeabi_f2d
 1255 00ac 0346     		mov	r3, r0
 1256 00ae 0C46     		mov	r4, r1
 1257 00b0 1846     		mov	r0, r3
 1258 00b2 2146     		mov	r1, r4
 1259 00b4 FFF7FEFF 		bl	lround
 1260 00b8 0346     		mov	r3, r0
 1261 00ba 7B63     		str	r3, [r7, #52]
 349:planner.c     ****     block->steps[A_MOTOR] = labs((target_steps[X_AXIS]-position_steps[X_AXIS]) + (target_steps[Y_AX
 1262              		.loc 1 349 0
 1263 00bc 3A6B     		ldr	r2, [r7, #48]
 1264 00be 7B6A     		ldr	r3, [r7, #36]
 1265 00c0 D21A     		subs	r2, r2, r3
 1266 00c2 796B     		ldr	r1, [r7, #52]
 1267 00c4 BB6A     		ldr	r3, [r7, #40]
 1268 00c6 CB1A     		subs	r3, r1, r3
 1269 00c8 1344     		add	r3, r3, r2
 1270 00ca 002B     		cmp	r3, #0
 1271 00cc B8BF     		it	lt
 1272 00ce 5B42     		rsblt	r3, r3, #0
 1273 00d0 1A46     		mov	r2, r3
 1274 00d2 BB6C     		ldr	r3, [r7, #72]
 1275 00d4 1A60     		str	r2, [r3]
 350:planner.c     ****     block->steps[B_MOTOR] = labs((target_steps[X_AXIS]-position_steps[X_AXIS]) - (target_steps[Y_AX
 1276              		.loc 1 350 0
 1277 00d6 3A6B     		ldr	r2, [r7, #48]
 1278 00d8 7B6A     		ldr	r3, [r7, #36]
 1279 00da D21A     		subs	r2, r2, r3
 1280 00dc 796B     		ldr	r1, [r7, #52]
 1281 00de BB6A     		ldr	r3, [r7, #40]
 1282 00e0 CB1A     		subs	r3, r1, r3
 1283 00e2 D31A     		subs	r3, r2, r3
 1284 00e4 002B     		cmp	r3, #0
 1285 00e6 B8BF     		it	lt
 1286 00e8 5B42     		rsblt	r3, r3, #0
 1287 00ea 1A46     		mov	r2, r3
 1288 00ec BB6C     		ldr	r3, [r7, #72]
 1289 00ee 5A60     		str	r2, [r3, #4]
 351:planner.c     ****   #endif
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 30


 352:planner.c     **** 
 353:planner.c     ****   for (idx=0; idx<N_AXIS; idx++) {
 1290              		.loc 1 353 0
 1291 00f0 0023     		movs	r3, #0
 1292 00f2 87F85330 		strb	r3, [r7, #83]
 1293 00f6 C1E0     		b	.L102
 1294              	.L109:
 354:planner.c     ****     // Calculate target position in absolute steps, number of steps for each axis, and determine ma
 355:planner.c     ****     // Also, compute individual axes distance for move and prep unit vector calculations.
 356:planner.c     ****     // NOTE: Computes true distance from converted step values.
 357:planner.c     ****     #ifdef COREXY
 358:planner.c     ****       if ( !(idx == A_MOTOR) && !(idx == B_MOTOR) ) {
 1295              		.loc 1 358 0
 1296 00f8 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1297 00fc 002B     		cmp	r3, #0
 1298 00fe 3ED0     		beq	.L103
 1299              		.loc 1 358 0 is_stmt 0 discriminator 1
 1300 0100 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1301 0104 012B     		cmp	r3, #1
 1302 0106 3AD0     		beq	.L103
 359:planner.c     ****         target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
 1303              		.loc 1 359 0 is_stmt 1
 1304 0108 97F85340 		ldrb	r4, [r7, #83]	@ zero_extendqisi2
 1305 010c 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1306 0110 9B00     		lsls	r3, r3, #2
 1307 0112 7A68     		ldr	r2, [r7, #4]
 1308 0114 1344     		add	r3, r3, r2
 1309 0116 1868     		ldr	r0, [r3]	@ float
 1310 0118 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1311 011c 734A     		ldr	r2, .L136+16
 1312 011e 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1313 0122 1946     		mov	r1, r3
 1314 0124 FFF7FEFF 		bl	__aeabi_fmul
 1315 0128 0346     		mov	r3, r0
 1316 012a 1846     		mov	r0, r3
 1317 012c FFF7FEFF 		bl	__aeabi_f2d
 1318 0130 0246     		mov	r2, r0
 1319 0132 0B46     		mov	r3, r1
 1320 0134 1046     		mov	r0, r2
 1321 0136 1946     		mov	r1, r3
 1322 0138 FFF7FEFF 		bl	lround
 1323 013c 0246     		mov	r2, r0
 1324 013e A300     		lsls	r3, r4, #2
 1325 0140 07F15801 		add	r1, r7, #88
 1326 0144 0B44     		add	r3, r3, r1
 1327 0146 43F8282C 		str	r2, [r3, #-40]
 360:planner.c     ****         block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 1328              		.loc 1 360 0
 1329 014a 97F85320 		ldrb	r2, [r7, #83]	@ zero_extendqisi2
 1330 014e 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1331 0152 9B00     		lsls	r3, r3, #2
 1332 0154 07F15801 		add	r1, r7, #88
 1333 0158 0B44     		add	r3, r3, r1
 1334 015a 53F8281C 		ldr	r1, [r3, #-40]
 1335 015e 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1336 0162 9B00     		lsls	r3, r3, #2
 1337 0164 07F15800 		add	r0, r7, #88
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 31


 1338 0168 0344     		add	r3, r3, r0
 1339 016a 53F8343C 		ldr	r3, [r3, #-52]
 1340 016e CB1A     		subs	r3, r1, r3
 1341 0170 002B     		cmp	r3, #0
 1342 0172 B8BF     		it	lt
 1343 0174 5B42     		rsblt	r3, r3, #0
 1344 0176 1946     		mov	r1, r3
 1345 0178 BB6C     		ldr	r3, [r7, #72]
 1346 017a 43F82210 		str	r1, [r3, r2, lsl #2]
 1347              	.L103:
 361:planner.c     ****       }
 362:planner.c     ****       block->step_event_count = max(block->step_event_count, block->steps[idx]);
 1348              		.loc 1 362 0
 1349 017e 97F85320 		ldrb	r2, [r7, #83]	@ zero_extendqisi2
 1350 0182 BB6C     		ldr	r3, [r7, #72]
 1351 0184 53F82220 		ldr	r2, [r3, r2, lsl #2]
 1352 0188 BB6C     		ldr	r3, [r7, #72]
 1353 018a DB68     		ldr	r3, [r3, #12]
 1354 018c 9A42     		cmp	r2, r3
 1355 018e 38BF     		it	cc
 1356 0190 1A46     		movcc	r2, r3
 1357 0192 BB6C     		ldr	r3, [r7, #72]
 1358 0194 DA60     		str	r2, [r3, #12]
 363:planner.c     ****       if (idx == A_MOTOR) {
 1359              		.loc 1 363 0
 1360 0196 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1361 019a 002B     		cmp	r3, #0
 1362 019c 14D1     		bne	.L104
 364:planner.c     ****         delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] + target_steps[Y_AXIS]-position_ste
 1363              		.loc 1 364 0
 1364 019e 3A6B     		ldr	r2, [r7, #48]
 1365 01a0 7B6A     		ldr	r3, [r7, #36]
 1366 01a2 D21A     		subs	r2, r2, r3
 1367 01a4 7B6B     		ldr	r3, [r7, #52]
 1368 01a6 1A44     		add	r2, r2, r3
 1369 01a8 BB6A     		ldr	r3, [r7, #40]
 1370 01aa D31A     		subs	r3, r2, r3
 1371 01ac 1846     		mov	r0, r3
 1372 01ae FFF7FEFF 		bl	__aeabi_i2f
 1373 01b2 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1374 01b6 4D4A     		ldr	r2, .L136+16
 1375 01b8 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1376 01bc 1946     		mov	r1, r3
 1377 01be FFF7FEFF 		bl	__aeabi_fdiv
 1378 01c2 0346     		mov	r3, r0
 1379 01c4 7B65     		str	r3, [r7, #84]	@ float
 1380 01c6 36E0     		b	.L105
 1381              	.L104:
 365:planner.c     ****       } else if (idx == B_MOTOR) {
 1382              		.loc 1 365 0
 1383 01c8 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1384 01cc 012B     		cmp	r3, #1
 1385 01ce 14D1     		bne	.L106
 366:planner.c     ****         delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_ste
 1386              		.loc 1 366 0
 1387 01d0 3A6B     		ldr	r2, [r7, #48]
 1388 01d2 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 32


 1389 01d4 D21A     		subs	r2, r2, r3
 1390 01d6 7B6B     		ldr	r3, [r7, #52]
 1391 01d8 D21A     		subs	r2, r2, r3
 1392 01da BB6A     		ldr	r3, [r7, #40]
 1393 01dc 1344     		add	r3, r3, r2
 1394 01de 1846     		mov	r0, r3
 1395 01e0 FFF7FEFF 		bl	__aeabi_i2f
 1396 01e4 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1397 01e8 404A     		ldr	r2, .L136+16
 1398 01ea 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1399 01ee 1946     		mov	r1, r3
 1400 01f0 FFF7FEFF 		bl	__aeabi_fdiv
 1401 01f4 0346     		mov	r3, r0
 1402 01f6 7B65     		str	r3, [r7, #84]	@ float
 1403 01f8 1DE0     		b	.L105
 1404              	.L106:
 367:planner.c     ****       } else {
 368:planner.c     ****         delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 1405              		.loc 1 368 0
 1406 01fa 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1407 01fe 9B00     		lsls	r3, r3, #2
 1408 0200 07F15802 		add	r2, r7, #88
 1409 0204 1344     		add	r3, r3, r2
 1410 0206 53F8282C 		ldr	r2, [r3, #-40]
 1411 020a 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1412 020e 9B00     		lsls	r3, r3, #2
 1413 0210 07F15801 		add	r1, r7, #88
 1414 0214 0B44     		add	r3, r3, r1
 1415 0216 53F8343C 		ldr	r3, [r3, #-52]
 1416 021a D31A     		subs	r3, r2, r3
 1417 021c 1846     		mov	r0, r3
 1418 021e FFF7FEFF 		bl	__aeabi_i2f
 1419 0222 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1420 0226 314A     		ldr	r2, .L136+16
 1421 0228 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1422 022c 1946     		mov	r1, r3
 1423 022e FFF7FEFF 		bl	__aeabi_fdiv
 1424 0232 0346     		mov	r3, r0
 1425 0234 7B65     		str	r3, [r7, #84]	@ float
 1426              	.L105:
 369:planner.c     ****       }
 370:planner.c     ****     #else
 371:planner.c     ****       target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
 372:planner.c     ****       block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 373:planner.c     ****       block->step_event_count = max(block->step_event_count, block->steps[idx]);
 374:planner.c     ****       delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 375:planner.c     **** 	  #endif
 376:planner.c     ****     unit_vec[idx] = delta_mm; // Store unit vector numerator
 1427              		.loc 1 376 0
 1428 0236 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1429 023a 9B00     		lsls	r3, r3, #2
 1430 023c 07F15802 		add	r2, r7, #88
 1431 0240 1344     		add	r3, r3, r2
 1432 0242 7A6D     		ldr	r2, [r7, #84]	@ float
 1433 0244 43F8402C 		str	r2, [r3, #-64]	@ float
 377:planner.c     **** 
 378:planner.c     ****     // Set direction bits. Bit enabled always means direction is negative.
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 33


 379:planner.c     ****     if (delta_mm < 0.0 ) { block->direction_bits |= get_direction_pin_mask(idx); }
 1434              		.loc 1 379 0
 1435 0248 4FF00001 		mov	r1, #0
 1436 024c 786D     		ldr	r0, [r7, #84]	@ float
 1437 024e FFF7FEFF 		bl	__aeabi_fcmplt
 1438 0252 0346     		mov	r3, r0
 1439 0254 002B     		cmp	r3, #0
 1440 0256 0CD0     		beq	.L107
 1441              		.loc 1 379 0 is_stmt 0 discriminator 1
 1442 0258 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1443 025c 1846     		mov	r0, r3
 1444 025e FFF7FEFF 		bl	get_direction_pin_mask
 1445 0262 0346     		mov	r3, r0
 1446 0264 1A46     		mov	r2, r3
 1447 0266 BB6C     		ldr	r3, [r7, #72]
 1448 0268 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1449 026a 1343     		orrs	r3, r3, r2
 1450 026c DAB2     		uxtb	r2, r3
 1451 026e BB6C     		ldr	r3, [r7, #72]
 1452 0270 1A74     		strb	r2, [r3, #16]
 1453              	.L107:
 353:planner.c     ****     // Calculate target position in absolute steps, number of steps for each axis, and determine ma
 1454              		.loc 1 353 0 is_stmt 1 discriminator 2
 1455 0272 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1456 0276 0133     		adds	r3, r3, #1
 1457 0278 87F85330 		strb	r3, [r7, #83]
 1458              	.L102:
 353:planner.c     ****     // Calculate target position in absolute steps, number of steps for each axis, and determine ma
 1459              		.loc 1 353 0 is_stmt 0 discriminator 1
 1460 027c 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1461 0280 022B     		cmp	r3, #2
 1462 0282 7FF639AF 		bls	.L109
 380:planner.c     ****   }
 381:planner.c     **** 
 382:planner.c     ****   // Bail if this is a zero-length block. Highly unlikely to occur.
 383:planner.c     ****   if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 1463              		.loc 1 383 0 is_stmt 1
 1464 0286 BB6C     		ldr	r3, [r7, #72]
 1465 0288 DB68     		ldr	r3, [r3, #12]
 1466 028a 002B     		cmp	r3, #0
 1467 028c 01D1     		bne	.L110
 1468              		.loc 1 383 0 is_stmt 0 discriminator 1
 1469 028e 0023     		movs	r3, #0
 1470 0290 7FE1     		b	.L128
 1471              	.L110:
 384:planner.c     **** 
 385:planner.c     ****   // Calculate the unit vector of the line move and the block maximum feed rate and acceleration sc
 386:planner.c     ****   // down such that no individual axes maximum values are exceeded with respect to the line directi
 387:planner.c     ****   // NOTE: This calculation assumes all axes are orthogonal (Cartesian) and works with ABC-axes,
 388:planner.c     ****   // if they are also orthogonal/independent. Operates on the absolute value of the unit vector.
 389:planner.c     ****   block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 1472              		.loc 1 389 0 is_stmt 1
 1473 0292 07F11803 		add	r3, r7, #24
 1474 0296 1846     		mov	r0, r3
 1475 0298 FFF7FEFF 		bl	convert_delta_vector_to_unit_vector
 1476 029c 0246     		mov	r2, r0
 1477 029e BB6C     		ldr	r3, [r7, #72]
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 34


 1478 02a0 1A62     		str	r2, [r3, #32]	@ float
 390:planner.c     ****   block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 1479              		.loc 1 390 0
 1480 02a2 07F11803 		add	r3, r7, #24
 1481 02a6 1946     		mov	r1, r3
 1482 02a8 1148     		ldr	r0, .L136+20
 1483 02aa FFF7FEFF 		bl	limit_value_by_axis_maximum
 1484 02ae 0246     		mov	r2, r0
 1485 02b0 BB6C     		ldr	r3, [r7, #72]
 1486 02b2 DA61     		str	r2, [r3, #28]	@ float
 391:planner.c     ****   block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 1487              		.loc 1 391 0
 1488 02b4 07F11803 		add	r3, r7, #24
 1489 02b8 1946     		mov	r1, r3
 1490 02ba 0E48     		ldr	r0, .L136+24
 1491 02bc FFF7FEFF 		bl	limit_value_by_axis_maximum
 1492 02c0 0246     		mov	r2, r0
 1493 02c2 BB6C     		ldr	r3, [r7, #72]
 1494 02c4 9A62     		str	r2, [r3, #40]	@ float
 392:planner.c     **** 
 393:planner.c     ****   // Store programmed rate.
 394:planner.c     ****   if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 1495              		.loc 1 394 0
 1496 02c6 BB6C     		ldr	r3, [r7, #72]
 1497 02c8 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1498 02ca 03F00103 		and	r3, r3, #1
 1499 02ce 002B     		cmp	r3, #0
 1500 02d0 12D0     		beq	.L112
 1501              		.loc 1 394 0 is_stmt 0 discriminator 1
 1502 02d2 BB6C     		ldr	r3, [r7, #72]
 1503 02d4 9A6A     		ldr	r2, [r3, #40]	@ float
 1504 02d6 BB6C     		ldr	r3, [r7, #72]
 1505 02d8 DA62     		str	r2, [r3, #44]	@ float
 1506 02da 23E0     		b	.L113
 1507              	.L137:
 1508              		.align	2
 1509              	.L136:
 1510 02dc 21080000 		.word	block_buffer_head
 1511 02e0 00000000 		.word	block_buffer
 1512 02e4 00000000 		.word	sys_position
 1513 02e8 24080000 		.word	pl
 1514 02ec 00000000 		.word	settings
 1515 02f0 18000000 		.word	settings+24
 1516 02f4 0C000000 		.word	settings+12
 1517              	.L112:
 395:planner.c     ****   else { 
 396:planner.c     ****     block->programmed_rate = pl_data->feed_rate;
 1518              		.loc 1 396 0 is_stmt 1
 1519 02f8 3B68     		ldr	r3, [r7]
 1520 02fa 1A68     		ldr	r2, [r3]	@ float
 1521 02fc BB6C     		ldr	r3, [r7, #72]
 1522 02fe DA62     		str	r2, [r3, #44]	@ float
 397:planner.c     ****     if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeter
 1523              		.loc 1 397 0
 1524 0300 BB6C     		ldr	r3, [r7, #72]
 1525 0302 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1526 0304 03F00803 		and	r3, r3, #8
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 35


 1527 0308 002B     		cmp	r3, #0
 1528 030a 0BD0     		beq	.L113
 1529              		.loc 1 397 0 is_stmt 0 discriminator 1
 1530 030c BB6C     		ldr	r3, [r7, #72]
 1531 030e DA6A     		ldr	r2, [r3, #44]	@ float
 1532 0310 BB6C     		ldr	r3, [r7, #72]
 1533 0312 1B6A     		ldr	r3, [r3, #32]	@ float
 1534 0314 1946     		mov	r1, r3
 1535 0316 1046     		mov	r0, r2
 1536 0318 FFF7FEFF 		bl	__aeabi_fmul
 1537 031c 0346     		mov	r3, r0
 1538 031e 1A46     		mov	r2, r3
 1539 0320 BB6C     		ldr	r3, [r7, #72]
 1540 0322 DA62     		str	r2, [r3, #44]	@ float
 1541              	.L113:
 398:planner.c     ****   }
 399:planner.c     **** 
 400:planner.c     ****   // TODO: Need to check this method handling zero junction speeds when starting from rest.
 401:planner.c     ****   if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) 
 1542              		.loc 1 401 0 is_stmt 1
 1543 0324 A24B     		ldr	r3, .L138+16
 1544 0326 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1545 0328 A24B     		ldr	r3, .L138+20
 1546 032a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1547 032c 9A42     		cmp	r2, r3
 1548 032e 05D0     		beq	.L114
 1549              		.loc 1 401 0 is_stmt 0 discriminator 1
 1550 0330 BB6C     		ldr	r3, [r7, #72]
 1551 0332 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1552 0334 03F00203 		and	r3, r3, #2
 1553 0338 002B     		cmp	r3, #0
 1554 033a 08D0     		beq	.L115
 1555              	.L114:
 402:planner.c     **** 
 403:planner.c     ****     // Initialize block entry speed as zero. Assume it will be starting from rest. Planner will cor
 404:planner.c     ****     // If system motion, the system motion block always is assumed to start from rest and end at a 
 405:planner.c     ****     block->entry_speed_sqr = 0.0;
 1556              		.loc 1 405 0 is_stmt 1
 1557 033c BB6C     		ldr	r3, [r7, #72]
 1558 033e 4FF00002 		mov	r2, #0
 1559 0342 5A61     		str	r2, [r3, #20]	@ float
 406:planner.c     ****     block->max_junction_speed_sqr = 0.0; // Starting from rest. Enforce start from zero velocity.
 1560              		.loc 1 406 0
 1561 0344 BB6C     		ldr	r3, [r7, #72]
 1562 0346 4FF00002 		mov	r2, #0
 1563 034a 5A62     		str	r2, [r3, #36]	@ float
 1564 034c EEE0     		b	.L116
 1565              	.L115:
 1566              	.LBB3:
 407:planner.c     **** 
 408:planner.c     ****   } else {
 409:planner.c     ****     // Compute maximum allowable entry speed at junction by centripetal acceleration approximation.
 410:planner.c     ****     // Let a circle be tangent to both previous and current path line segments, where the junction
 411:planner.c     ****     // deviation is defined as the distance from the junction to the closest edge of the circle,
 412:planner.c     ****     // colinear with the circle center. The circular segment joining the two paths represents the
 413:planner.c     ****     // path of centripetal acceleration. Solve for max velocity based on max acceleration about the
 414:planner.c     ****     // radius of the circle, defined indirectly by junction deviation. This may be also viewed as
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 36


 415:planner.c     ****     // path width or max_jerk in the previous Grbl version. This approach does not actually deviate
 416:planner.c     ****     // from path, but used as a robust way to compute cornering speeds, as it takes into account th
 417:planner.c     ****     // nonlinearities of both the junction angle and junction velocity.
 418:planner.c     ****     //
 419:planner.c     ****     // NOTE: If the junction deviation value is finite, Grbl executes the motions in an exact path
 420:planner.c     ****     // mode (G61). If the junction deviation value is zero, Grbl will execute the motion in an exac
 421:planner.c     ****     // stop mode (G61.1) manner. In the future, if continuous mode (G64) is desired, the math here
 422:planner.c     ****     // is exactly the same. Instead of motioning all the way to junction point, the machine will
 423:planner.c     ****     // just follow the arc circle defined here. The Arduino doesn't have the CPU cycles to perform
 424:planner.c     ****     // a continuous mode path, but ARM-based microcontrollers most certainly do.
 425:planner.c     ****     //
 426:planner.c     ****     // NOTE: The max junction speed is a fixed value, since machine acceleration limits cannot be
 427:planner.c     ****     // changed dynamically during operation nor can the line move geometry. This must be kept in
 428:planner.c     ****     // memory in the event of a feedrate override changing the nominal speeds of blocks, which can
 429:planner.c     ****     // change the overall maximum entry speed conditions of all blocks.
 430:planner.c     **** 
 431:planner.c     ****     float junction_unit_vec[N_AXIS];
 432:planner.c     ****     float junction_cos_theta = 0.0;
 1567              		.loc 1 432 0
 1568 034e 4FF00003 		mov	r3, #0
 1569 0352 FB64     		str	r3, [r7, #76]	@ float
 433:planner.c     ****     for (idx=0; idx<N_AXIS; idx++) {
 1570              		.loc 1 433 0
 1571 0354 0023     		movs	r3, #0
 1572 0356 87F85330 		strb	r3, [r7, #83]
 1573 035a 3AE0     		b	.L117
 1574              	.L118:
 434:planner.c     ****       junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 1575              		.loc 1 434 0 discriminator 3
 1576 035c 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1577 0360 954A     		ldr	r2, .L138+24
 1578 0362 0233     		adds	r3, r3, #2
 1579 0364 9B00     		lsls	r3, r3, #2
 1580 0366 1344     		add	r3, r3, r2
 1581 0368 5A68     		ldr	r2, [r3, #4]	@ float
 1582 036a 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1583 036e 9B00     		lsls	r3, r3, #2
 1584 0370 07F15801 		add	r1, r7, #88
 1585 0374 0B44     		add	r3, r3, r1
 1586 0376 53F8403C 		ldr	r3, [r3, #-64]	@ float
 1587 037a 1946     		mov	r1, r3
 1588 037c 1046     		mov	r0, r2
 1589 037e FFF7FEFF 		bl	__aeabi_fmul
 1590 0382 0346     		mov	r3, r0
 1591 0384 1946     		mov	r1, r3
 1592 0386 F86C     		ldr	r0, [r7, #76]	@ float
 1593 0388 FFF7FEFF 		bl	__aeabi_fsub
 1594 038c 0346     		mov	r3, r0
 1595 038e FB64     		str	r3, [r7, #76]	@ float
 435:planner.c     ****       junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 1596              		.loc 1 435 0 discriminator 3
 1597 0390 97F85340 		ldrb	r4, [r7, #83]	@ zero_extendqisi2
 1598 0394 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1599 0398 9B00     		lsls	r3, r3, #2
 1600 039a 07F15802 		add	r2, r7, #88
 1601 039e 1344     		add	r3, r3, r2
 1602 03a0 53F8400C 		ldr	r0, [r3, #-64]	@ float
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 37


 1603 03a4 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1604 03a8 834A     		ldr	r2, .L138+24
 1605 03aa 0233     		adds	r3, r3, #2
 1606 03ac 9B00     		lsls	r3, r3, #2
 1607 03ae 1344     		add	r3, r3, r2
 1608 03b0 5B68     		ldr	r3, [r3, #4]	@ float
 1609 03b2 1946     		mov	r1, r3
 1610 03b4 FFF7FEFF 		bl	__aeabi_fsub
 1611 03b8 0346     		mov	r3, r0
 1612 03ba 1A46     		mov	r2, r3
 1613 03bc A300     		lsls	r3, r4, #2
 1614 03be 07F15801 		add	r1, r7, #88
 1615 03c2 0B44     		add	r3, r3, r1
 1616 03c4 43F84C2C 		str	r2, [r3, #-76]	@ float
 433:planner.c     ****     for (idx=0; idx<N_AXIS; idx++) {
 1617              		.loc 1 433 0 discriminator 3
 1618 03c8 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1619 03cc 0133     		adds	r3, r3, #1
 1620 03ce 87F85330 		strb	r3, [r7, #83]
 1621              	.L117:
 433:planner.c     ****     for (idx=0; idx<N_AXIS; idx++) {
 1622              		.loc 1 433 0 is_stmt 0 discriminator 1
 1623 03d2 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1624 03d6 022B     		cmp	r3, #2
 1625 03d8 C0D9     		bls	.L118
 436:planner.c     ****     }
 437:planner.c     **** 
 438:planner.c     ****     // NOTE: Computed without any expensive trig, sin() or acos(), by trig half angle identity of c
 439:planner.c     ****     if (junction_cos_theta > 0.999999) {
 1626              		.loc 1 439 0 is_stmt 1
 1627 03da F86C     		ldr	r0, [r7, #76]	@ float
 1628 03dc FFF7FEFF 		bl	__aeabi_f2d
 1629 03e0 6FA3     		adr	r3, .L138
 1630 03e2 D3E90023 		ldrd	r2, [r3]
 1631 03e6 FFF7FEFF 		bl	__aeabi_dcmpgt
 1632 03ea 0346     		mov	r3, r0
 1633 03ec 002B     		cmp	r3, #0
 1634 03ee 04D0     		beq	.L133
 440:planner.c     ****       //  For a 0 degree acute junction, just set minimum junction speed.
 441:planner.c     ****       block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 1635              		.loc 1 441 0
 1636 03f0 BB6C     		ldr	r3, [r7, #72]
 1637 03f2 4FF00002 		mov	r2, #0
 1638 03f6 5A62     		str	r2, [r3, #36]	@ float
 1639 03f8 98E0     		b	.L116
 1640              	.L133:
 442:planner.c     ****     } else {
 443:planner.c     ****       if (junction_cos_theta < -0.999999) {
 1641              		.loc 1 443 0
 1642 03fa F86C     		ldr	r0, [r7, #76]	@ float
 1643 03fc FFF7FEFF 		bl	__aeabi_f2d
 1644 0400 69A3     		adr	r3, .L138+8
 1645 0402 D3E90023 		ldrd	r2, [r3]
 1646 0406 FFF7FEFF 		bl	__aeabi_dcmplt
 1647 040a 0346     		mov	r3, r0
 1648 040c 002B     		cmp	r3, #0
 1649 040e 03D0     		beq	.L134
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 38


 444:planner.c     ****         // Junction is a straight line or 180 degrees. Junction speed is infinite.
 445:planner.c     ****         block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 1650              		.loc 1 445 0
 1651 0410 BB6C     		ldr	r3, [r7, #72]
 1652 0412 6A4A     		ldr	r2, .L138+28
 1653 0414 5A62     		str	r2, [r3, #36]	@ float
 1654 0416 89E0     		b	.L116
 1655              	.L134:
 1656              	.LBB4:
 446:planner.c     ****       } else {
 447:planner.c     ****         convert_delta_vector_to_unit_vector(junction_unit_vec);
 1657              		.loc 1 447 0
 1658 0418 07F10C03 		add	r3, r7, #12
 1659 041c 1846     		mov	r0, r3
 1660 041e FFF7FEFF 		bl	convert_delta_vector_to_unit_vector
 448:planner.c     ****         float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_u
 1661              		.loc 1 448 0
 1662 0422 07F10C03 		add	r3, r7, #12
 1663 0426 1946     		mov	r1, r3
 1664 0428 6548     		ldr	r0, .L138+32
 1665 042a FFF7FEFF 		bl	limit_value_by_axis_maximum
 1666 042e 7864     		str	r0, [r7, #68]	@ float
 449:planner.c     ****         float sin_theta_d2 = sqrt(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Alway
 1667              		.loc 1 449 0
 1668 0430 F86C     		ldr	r0, [r7, #76]	@ float
 1669 0432 FFF7FEFF 		bl	__aeabi_f2d
 1670 0436 0346     		mov	r3, r0
 1671 0438 0C46     		mov	r4, r1
 1672 043a 1A46     		mov	r2, r3
 1673 043c 2346     		mov	r3, r4
 1674 043e 4FF00000 		mov	r0, #0
 1675 0442 6049     		ldr	r1, .L138+36
 1676 0444 FFF7FEFF 		bl	__aeabi_dsub
 1677 0448 0346     		mov	r3, r0
 1678 044a 0C46     		mov	r4, r1
 1679 044c 1846     		mov	r0, r3
 1680 044e 2146     		mov	r1, r4
 1681 0450 4FF00002 		mov	r2, #0
 1682 0454 5C4B     		ldr	r3, .L138+40
 1683 0456 FFF7FEFF 		bl	__aeabi_dmul
 1684 045a 0346     		mov	r3, r0
 1685 045c 0C46     		mov	r4, r1
 1686 045e 1846     		mov	r0, r3
 1687 0460 2146     		mov	r1, r4
 1688 0462 FFF7FEFF 		bl	sqrt
 1689 0466 0346     		mov	r3, r0
 1690 0468 0C46     		mov	r4, r1
 1691 046a 1846     		mov	r0, r3
 1692 046c 2146     		mov	r1, r4
 1693 046e FFF7FEFF 		bl	__aeabi_d2f
 1694 0472 0346     		mov	r3, r0
 1695 0474 3B64     		str	r3, [r7, #64]	@ float
 450:planner.c     ****         block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 1696              		.loc 1 450 0
 1697 0476 554B     		ldr	r3, .L138+44
 1698 0478 9B6B     		ldr	r3, [r3, #56]	@ float
 1699 047a 796C     		ldr	r1, [r7, #68]	@ float
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 39


 1700 047c 1846     		mov	r0, r3
 1701 047e FFF7FEFF 		bl	__aeabi_fmul
 1702 0482 0346     		mov	r3, r0
 1703 0484 396C     		ldr	r1, [r7, #64]	@ float
 1704 0486 1846     		mov	r0, r3
 1705 0488 FFF7FEFF 		bl	__aeabi_fmul
 1706 048c 0346     		mov	r3, r0
 1707 048e 1846     		mov	r0, r3
 1708 0490 FFF7FEFF 		bl	__aeabi_f2d
 1709 0494 0446     		mov	r4, r0
 1710 0496 0D46     		mov	r5, r1
 1711 0498 386C     		ldr	r0, [r7, #64]	@ float
 1712 049a FFF7FEFF 		bl	__aeabi_f2d
 1713 049e 0246     		mov	r2, r0
 1714 04a0 0B46     		mov	r3, r1
 1715 04a2 4FF00000 		mov	r0, #0
 1716 04a6 4749     		ldr	r1, .L138+36
 1717 04a8 FFF7FEFF 		bl	__aeabi_dsub
 1718 04ac 0246     		mov	r2, r0
 1719 04ae 0B46     		mov	r3, r1
 1720 04b0 2046     		mov	r0, r4
 1721 04b2 2946     		mov	r1, r5
 1722 04b4 FFF7FEFF 		bl	__aeabi_ddiv
 1723 04b8 0346     		mov	r3, r0
 1724 04ba 0C46     		mov	r4, r1
 1725 04bc 1846     		mov	r0, r3
 1726 04be 2146     		mov	r1, r4
 1727 04c0 4FF00002 		mov	r2, #0
 1728 04c4 4FF00003 		mov	r3, #0
 1729 04c8 FFF7FEFF 		bl	__aeabi_dcmplt
 1730 04cc 0346     		mov	r3, r0
 1731 04ce 002B     		cmp	r3, #0
 1732 04d0 02D0     		beq	.L135
 1733              		.loc 1 450 0 is_stmt 0 discriminator 1
 1734 04d2 4FF00002 		mov	r2, #0
 1735 04d6 27E0     		b	.L126
 1736              	.L135:
 1737              		.loc 1 450 0 discriminator 2
 1738 04d8 3C4B     		ldr	r3, .L138+44
 1739 04da 9B6B     		ldr	r3, [r3, #56]	@ float
 1740 04dc 796C     		ldr	r1, [r7, #68]	@ float
 1741 04de 1846     		mov	r0, r3
 1742 04e0 FFF7FEFF 		bl	__aeabi_fmul
 1743 04e4 0346     		mov	r3, r0
 1744 04e6 396C     		ldr	r1, [r7, #64]	@ float
 1745 04e8 1846     		mov	r0, r3
 1746 04ea FFF7FEFF 		bl	__aeabi_fmul
 1747 04ee 0346     		mov	r3, r0
 1748 04f0 1846     		mov	r0, r3
 1749 04f2 FFF7FEFF 		bl	__aeabi_f2d
 1750 04f6 0446     		mov	r4, r0
 1751 04f8 0D46     		mov	r5, r1
 1752 04fa 386C     		ldr	r0, [r7, #64]	@ float
 1753 04fc FFF7FEFF 		bl	__aeabi_f2d
 1754 0500 0246     		mov	r2, r0
 1755 0502 0B46     		mov	r3, r1
 1756 0504 4FF00000 		mov	r0, #0
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 40


 1757 0508 2E49     		ldr	r1, .L138+36
 1758 050a FFF7FEFF 		bl	__aeabi_dsub
 1759 050e 0246     		mov	r2, r0
 1760 0510 0B46     		mov	r3, r1
 1761 0512 2046     		mov	r0, r4
 1762 0514 2946     		mov	r1, r5
 1763 0516 FFF7FEFF 		bl	__aeabi_ddiv
 1764 051a 0346     		mov	r3, r0
 1765 051c 0C46     		mov	r4, r1
 1766 051e 1846     		mov	r0, r3
 1767 0520 2146     		mov	r1, r4
 1768 0522 FFF7FEFF 		bl	__aeabi_d2f
 1769 0526 0246     		mov	r2, r0
 1770              	.L126:
 1771              		.loc 1 450 0 discriminator 4
 1772 0528 BB6C     		ldr	r3, [r7, #72]
 1773 052a 5A62     		str	r2, [r3, #36]	@ float
 1774              	.L116:
 1775              	.LBE4:
 1776              	.LBE3:
 451:planner.c     ****                        (junction_acceleration * settings.junction_deviation * sin_theta_d2)/(1.0-si
 452:planner.c     ****       }
 453:planner.c     ****     }
 454:planner.c     ****   }
 455:planner.c     **** 
 456:planner.c     ****   // Block system motion from updating this data to ensure next g-code motion is computed correctly
 457:planner.c     ****   if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 1777              		.loc 1 457 0 is_stmt 1
 1778 052c BB6C     		ldr	r3, [r7, #72]
 1779 052e 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1780 0530 03F00203 		and	r3, r3, #2
 1781 0534 002B     		cmp	r3, #0
 1782 0536 2BD1     		bne	.L127
 1783              	.LBB5:
 458:planner.c     ****     float nominal_speed = plan_compute_profile_nominal_speed(block);
 1784              		.loc 1 458 0
 1785 0538 B86C     		ldr	r0, [r7, #72]
 1786 053a FFF7FEFF 		bl	plan_compute_profile_nominal_speed
 1787 053e F863     		str	r0, [r7, #60]	@ float
 459:planner.c     ****     plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 1788              		.loc 1 459 0
 1789 0540 1D4B     		ldr	r3, .L138+24
 1790 0542 9B69     		ldr	r3, [r3, #24]	@ float
 1791 0544 1A46     		mov	r2, r3
 1792 0546 F96B     		ldr	r1, [r7, #60]	@ float
 1793 0548 B86C     		ldr	r0, [r7, #72]
 1794 054a FFF7FEFF 		bl	plan_compute_profile_parameters
 460:planner.c     ****     pl.previous_nominal_speed = nominal_speed;
 1795              		.loc 1 460 0
 1796 054e 1A4A     		ldr	r2, .L138+24
 1797 0550 FB6B     		ldr	r3, [r7, #60]	@ float
 1798 0552 9361     		str	r3, [r2, #24]	@ float
 461:planner.c     **** 
 462:planner.c     ****     // Update previous path unit_vector and planner position.
 463:planner.c     ****     memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[
 1799              		.loc 1 463 0
 1800 0554 184B     		ldr	r3, .L138+24
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 41


 1801 0556 0C33     		adds	r3, r3, #12
 1802 0558 07F11802 		add	r2, r7, #24
 1803 055c 07CA     		ldmia	r2, {r0, r1, r2}
 1804 055e 83E80700 		stmia	r3, {r0, r1, r2}
 464:planner.c     ****     memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 1805              		.loc 1 464 0
 1806 0562 154B     		ldr	r3, .L138+24
 1807 0564 1C46     		mov	r4, r3
 1808 0566 07F13003 		add	r3, r7, #48
 1809 056a 93E80700 		ldmia	r3, {r0, r1, r2}
 1810 056e 84E80700 		stmia	r4, {r0, r1, r2}
 465:planner.c     **** 
 466:planner.c     ****     // New block is all set. Update buffer head and next buffer head indices.
 467:planner.c     ****     block_buffer_head = next_buffer_head;
 1811              		.loc 1 467 0
 1812 0572 174B     		ldr	r3, .L138+48
 1813 0574 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1814 0576 0E4B     		ldr	r3, .L138+16
 1815 0578 1A70     		strb	r2, [r3]
 468:planner.c     ****     next_buffer_head = plan_next_block_index(block_buffer_head);
 1816              		.loc 1 468 0
 1817 057a 0D4B     		ldr	r3, .L138+16
 1818 057c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1819 057e 1846     		mov	r0, r3
 1820 0580 FFF7FEFF 		bl	plan_next_block_index
 1821 0584 0346     		mov	r3, r0
 1822 0586 1A46     		mov	r2, r3
 1823 0588 114B     		ldr	r3, .L138+48
 1824 058a 1A70     		strb	r2, [r3]
 469:planner.c     **** 
 470:planner.c     ****     // Finish up by recalculating the plan with the new block.
 471:planner.c     ****     planner_recalculate();
 1825              		.loc 1 471 0
 1826 058c FFF7FEFF 		bl	planner_recalculate
 1827              	.L127:
 1828              	.LBE5:
 472:planner.c     ****   }
 473:planner.c     ****   return(PLAN_OK);
 1829              		.loc 1 473 0
 1830 0590 0123     		movs	r3, #1
 1831              	.L128:
 474:planner.c     **** }
 1832              		.loc 1 474 0 discriminator 1
 1833 0592 1846     		mov	r0, r3
 1834 0594 5837     		adds	r7, r7, #88
 1835              		.cfi_def_cfa_offset 16
 1836 0596 BD46     		mov	sp, r7
 1837              		.cfi_def_cfa_register 13
 1838              		@ sp needed
 1839 0598 B0BD     		pop	{r4, r5, r7, pc}
 1840              	.L139:
 1841 059a 00BFAFF3 		.align	3
 1841      0080
 1842              	.L138:
 1843 05a0 E90B21E7 		.word	-417264663
 1844 05a4 FDFFEF3F 		.word	1072693245
 1845 05a8 E90B21E7 		.word	-417264663
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 42


 1846 05ac FDFFEFBF 		.word	-1074790403
 1847 05b0 21080000 		.word	block_buffer_head
 1848 05b4 20080000 		.word	block_buffer_tail
 1849 05b8 24080000 		.word	pl
 1850 05bc 9976967E 		.word	2123789977
 1851 05c0 18000000 		.word	settings+24
 1852 05c4 0000F03F 		.word	1072693248
 1853 05c8 0000E03F 		.word	1071644672
 1854 05cc 00000000 		.word	settings
 1855 05d0 22080000 		.word	next_buffer_head
 1856              		.cfi_endproc
 1857              	.LFE77:
 1858              		.size	plan_buffer_line, .-plan_buffer_line
 1859              		.section	.text.plan_sync_position,"ax",%progbits
 1860              		.align	2
 1861              		.global	plan_sync_position
 1862              		.thumb
 1863              		.thumb_func
 1864              		.type	plan_sync_position, %function
 1865              	plan_sync_position:
 1866              	.LFB78:
 475:planner.c     **** 
 476:planner.c     **** 
 477:planner.c     **** // Reset the planner position vectors. Called by the system abort/initialization routine.
 478:planner.c     **** void plan_sync_position()
 479:planner.c     **** {
 1867              		.loc 1 479 0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 8
 1870              		@ frame_needed = 1, uses_anonymous_args = 0
 1871 0000 80B5     		push	{r7, lr}
 1872              		.cfi_def_cfa_offset 8
 1873              		.cfi_offset 7, -8
 1874              		.cfi_offset 14, -4
 1875 0002 82B0     		sub	sp, sp, #8
 1876              		.cfi_def_cfa_offset 16
 1877 0004 00AF     		add	r7, sp, #0
 1878              		.cfi_def_cfa_register 7
 480:planner.c     ****   // TODO: For motor configurations not in the same coordinate frame as the machine position,
 481:planner.c     ****   // this function needs to be updated to accomodate the difference.
 482:planner.c     ****   uint8_t idx;
 483:planner.c     ****   for (idx=0; idx<N_AXIS; idx++) {
 1879              		.loc 1 483 0
 1880 0006 0023     		movs	r3, #0
 1881 0008 FB71     		strb	r3, [r7, #7]
 1882 000a 1EE0     		b	.L141
 1883              	.L145:
 484:planner.c     ****     #ifdef COREXY
 485:planner.c     ****       if (idx==X_AXIS) {
 1884              		.loc 1 485 0
 1885 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1886 000e 002B     		cmp	r3, #0
 1887 0010 06D1     		bne	.L142
 486:planner.c     ****         pl.position[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
 1888              		.loc 1 486 0
 1889 0012 1148     		ldr	r0, .L146
 1890 0014 FFF7FEFF 		bl	system_convert_corexy_to_x_axis_steps
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 43


 1891 0018 0246     		mov	r2, r0
 1892 001a 104B     		ldr	r3, .L146+4
 1893 001c 1A60     		str	r2, [r3]
 1894 001e 11E0     		b	.L143
 1895              	.L142:
 487:planner.c     ****       } else if (idx==Y_AXIS) {
 1896              		.loc 1 487 0
 1897 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1898 0022 012B     		cmp	r3, #1
 1899 0024 06D1     		bne	.L144
 488:planner.c     ****         pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
 1900              		.loc 1 488 0
 1901 0026 0C48     		ldr	r0, .L146
 1902 0028 FFF7FEFF 		bl	system_convert_corexy_to_y_axis_steps
 1903 002c 0246     		mov	r2, r0
 1904 002e 0B4B     		ldr	r3, .L146+4
 1905 0030 5A60     		str	r2, [r3, #4]
 1906 0032 07E0     		b	.L143
 1907              	.L144:
 489:planner.c     ****       } else {
 490:planner.c     ****         pl.position[idx] = sys_position[idx];
 1908              		.loc 1 490 0
 1909 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1910 0036 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1911 0038 0749     		ldr	r1, .L146
 1912 003a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1913 003e 0749     		ldr	r1, .L146+4
 1914 0040 41F82320 		str	r2, [r1, r3, lsl #2]
 1915              	.L143:
 483:planner.c     ****     #ifdef COREXY
 1916              		.loc 1 483 0 discriminator 2
 1917 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1918 0046 0133     		adds	r3, r3, #1
 1919 0048 FB71     		strb	r3, [r7, #7]
 1920              	.L141:
 483:planner.c     ****     #ifdef COREXY
 1921              		.loc 1 483 0 is_stmt 0 discriminator 1
 1922 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1923 004c 022B     		cmp	r3, #2
 1924 004e DDD9     		bls	.L145
 491:planner.c     ****       }
 492:planner.c     ****     #else
 493:planner.c     ****       pl.position[idx] = sys_position[idx];
 494:planner.c     ****     #endif
 495:planner.c     ****   }
 496:planner.c     **** }
 1925              		.loc 1 496 0 is_stmt 1
 1926 0050 00BF     		nop
 1927 0052 0837     		adds	r7, r7, #8
 1928              		.cfi_def_cfa_offset 8
 1929 0054 BD46     		mov	sp, r7
 1930              		.cfi_def_cfa_register 13
 1931              		@ sp needed
 1932 0056 80BD     		pop	{r7, pc}
 1933              	.L147:
 1934              		.align	2
 1935              	.L146:
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 44


 1936 0058 00000000 		.word	sys_position
 1937 005c 24080000 		.word	pl
 1938              		.cfi_endproc
 1939              	.LFE78:
 1940              		.size	plan_sync_position, .-plan_sync_position
 1941              		.section	.text.plan_get_block_buffer_available,"ax",%progbits
 1942              		.align	2
 1943              		.global	plan_get_block_buffer_available
 1944              		.thumb
 1945              		.thumb_func
 1946              		.type	plan_get_block_buffer_available, %function
 1947              	plan_get_block_buffer_available:
 1948              	.LFB79:
 497:planner.c     **** 
 498:planner.c     **** 
 499:planner.c     **** // Returns the number of available blocks are in the planner buffer.
 500:planner.c     **** uint8_t plan_get_block_buffer_available()
 501:planner.c     **** {
 1949              		.loc 1 501 0
 1950              		.cfi_startproc
 1951              		@ args = 0, pretend = 0, frame = 0
 1952              		@ frame_needed = 1, uses_anonymous_args = 0
 1953              		@ link register save eliminated.
 1954 0000 80B4     		push	{r7}
 1955              		.cfi_def_cfa_offset 4
 1956              		.cfi_offset 7, -4
 1957 0002 00AF     		add	r7, sp, #0
 1958              		.cfi_def_cfa_register 7
 502:planner.c     ****   if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-blo
 1959              		.loc 1 502 0
 1960 0004 0D4B     		ldr	r3, .L151
 1961 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1962 0008 0D4B     		ldr	r3, .L151+4
 1963 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1964 000c 9A42     		cmp	r2, r3
 1965 000e 08D3     		bcc	.L149
 1966              		.loc 1 502 0 is_stmt 0 discriminator 1
 1967 0010 0B4B     		ldr	r3, .L151+4
 1968 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1969 0014 094B     		ldr	r3, .L151
 1970 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1971 0018 D31A     		subs	r3, r2, r3
 1972 001a DBB2     		uxtb	r3, r3
 1973 001c 2733     		adds	r3, r3, #39
 1974 001e DBB2     		uxtb	r3, r3
 1975 0020 07E0     		b	.L150
 1976              	.L149:
 503:planner.c     ****   return((block_buffer_tail-block_buffer_head-1));
 1977              		.loc 1 503 0 is_stmt 1
 1978 0022 074B     		ldr	r3, .L151+4
 1979 0024 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1980 0026 054B     		ldr	r3, .L151
 1981 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1982 002a D31A     		subs	r3, r2, r3
 1983 002c DBB2     		uxtb	r3, r3
 1984 002e 013B     		subs	r3, r3, #1
 1985 0030 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 45


 1986              	.L150:
 504:planner.c     **** }
 1987              		.loc 1 504 0
 1988 0032 1846     		mov	r0, r3
 1989 0034 BD46     		mov	sp, r7
 1990              		.cfi_def_cfa_register 13
 1991              		@ sp needed
 1992 0036 80BC     		pop	{r7}
 1993              		.cfi_restore 7
 1994              		.cfi_def_cfa_offset 0
 1995 0038 7047     		bx	lr
 1996              	.L152:
 1997 003a 00BF     		.align	2
 1998              	.L151:
 1999 003c 21080000 		.word	block_buffer_head
 2000 0040 20080000 		.word	block_buffer_tail
 2001              		.cfi_endproc
 2002              	.LFE79:
 2003              		.size	plan_get_block_buffer_available, .-plan_get_block_buffer_available
 2004              		.section	.text.plan_get_block_buffer_count,"ax",%progbits
 2005              		.align	2
 2006              		.global	plan_get_block_buffer_count
 2007              		.thumb
 2008              		.thumb_func
 2009              		.type	plan_get_block_buffer_count, %function
 2010              	plan_get_block_buffer_count:
 2011              	.LFB80:
 505:planner.c     **** 
 506:planner.c     **** 
 507:planner.c     **** // Returns the number of active blocks are in the planner buffer.
 508:planner.c     **** // NOTE: Deprecated. Not used unless classic status reports are enabled in config.h
 509:planner.c     **** uint8_t plan_get_block_buffer_count()
 510:planner.c     **** {
 2012              		.loc 1 510 0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 0
 2015              		@ frame_needed = 1, uses_anonymous_args = 0
 2016              		@ link register save eliminated.
 2017 0000 80B4     		push	{r7}
 2018              		.cfi_def_cfa_offset 4
 2019              		.cfi_offset 7, -4
 2020 0002 00AF     		add	r7, sp, #0
 2021              		.cfi_def_cfa_register 7
 511:planner.c     ****   if (block_buffer_head >= block_buffer_tail) { return(block_buffer_head-block_buffer_tail); }
 2022              		.loc 1 511 0
 2023 0004 0C4B     		ldr	r3, .L156
 2024 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2025 0008 0C4B     		ldr	r3, .L156+4
 2026 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2027 000c 9A42     		cmp	r2, r3
 2028 000e 06D3     		bcc	.L154
 2029              		.loc 1 511 0 is_stmt 0 discriminator 1
 2030 0010 094B     		ldr	r3, .L156
 2031 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2032 0014 094B     		ldr	r3, .L156+4
 2033 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2034 0018 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 46


 2035 001a DBB2     		uxtb	r3, r3
 2036 001c 07E0     		b	.L155
 2037              	.L154:
 512:planner.c     ****   return(BLOCK_BUFFER_SIZE - (block_buffer_tail-block_buffer_head));
 2038              		.loc 1 512 0 is_stmt 1
 2039 001e 064B     		ldr	r3, .L156
 2040 0020 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2041 0022 064B     		ldr	r3, .L156+4
 2042 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2043 0026 D31A     		subs	r3, r2, r3
 2044 0028 DBB2     		uxtb	r3, r3
 2045 002a 2833     		adds	r3, r3, #40
 2046 002c DBB2     		uxtb	r3, r3
 2047              	.L155:
 513:planner.c     **** }
 2048              		.loc 1 513 0
 2049 002e 1846     		mov	r0, r3
 2050 0030 BD46     		mov	sp, r7
 2051              		.cfi_def_cfa_register 13
 2052              		@ sp needed
 2053 0032 80BC     		pop	{r7}
 2054              		.cfi_restore 7
 2055              		.cfi_def_cfa_offset 0
 2056 0034 7047     		bx	lr
 2057              	.L157:
 2058 0036 00BF     		.align	2
 2059              	.L156:
 2060 0038 21080000 		.word	block_buffer_head
 2061 003c 20080000 		.word	block_buffer_tail
 2062              		.cfi_endproc
 2063              	.LFE80:
 2064              		.size	plan_get_block_buffer_count, .-plan_get_block_buffer_count
 2065              		.section	.text.plan_cycle_reinitialize,"ax",%progbits
 2066              		.align	2
 2067              		.global	plan_cycle_reinitialize
 2068              		.thumb
 2069              		.thumb_func
 2070              		.type	plan_cycle_reinitialize, %function
 2071              	plan_cycle_reinitialize:
 2072              	.LFB81:
 514:planner.c     **** 
 515:planner.c     **** 
 516:planner.c     **** // Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
 517:planner.c     **** // Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
 518:planner.c     **** void plan_cycle_reinitialize()
 519:planner.c     **** {
 2073              		.loc 1 519 0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 1, uses_anonymous_args = 0
 2077 0000 80B5     		push	{r7, lr}
 2078              		.cfi_def_cfa_offset 8
 2079              		.cfi_offset 7, -8
 2080              		.cfi_offset 14, -4
 2081 0002 00AF     		add	r7, sp, #0
 2082              		.cfi_def_cfa_register 7
 520:planner.c     ****   // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 47


 521:planner.c     ****   st_update_plan_block_parameters();
 2083              		.loc 1 521 0
 2084 0004 FFF7FEFF 		bl	st_update_plan_block_parameters
 522:planner.c     ****   block_buffer_planned = block_buffer_tail;
 2085              		.loc 1 522 0
 2086 0008 034B     		ldr	r3, .L159
 2087 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2088 000c 034B     		ldr	r3, .L159+4
 2089 000e 1A70     		strb	r2, [r3]
 523:planner.c     ****   planner_recalculate();
 2090              		.loc 1 523 0
 2091 0010 FFF7FEFF 		bl	planner_recalculate
 524:planner.c     **** }
 2092              		.loc 1 524 0
 2093 0014 00BF     		nop
 2094 0016 80BD     		pop	{r7, pc}
 2095              	.L160:
 2096              		.align	2
 2097              	.L159:
 2098 0018 20080000 		.word	block_buffer_tail
 2099 001c 23080000 		.word	block_buffer_planned
 2100              		.cfi_endproc
 2101              	.LFE81:
 2102              		.size	plan_cycle_reinitialize, .-plan_cycle_reinitialize
 2103              		.text
 2104              	.Letext0:
 2105              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2106              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2107              		.file 4 "settings.h"
 2108              		.file 5 "system.h"
 2109              		.file 6 "planner.h"
 2110              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2111              		.section	.debug_info,"",%progbits
 2112              	.Ldebug_info0:
 2113 0000 93080000 		.4byte	0x893
 2114 0004 0400     		.2byte	0x4
 2115 0006 00000000 		.4byte	.Ldebug_abbrev0
 2116 000a 04       		.byte	0x4
 2117 000b 01       		.uleb128 0x1
 2118 000c A4000000 		.4byte	.LASF118
 2119 0010 0C       		.byte	0xc
 2120 0011 08030000 		.4byte	.LASF119
 2121 0015 15020000 		.4byte	.LASF120
 2122 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2123 001d 00000000 		.4byte	0
 2124 0021 00000000 		.4byte	.Ldebug_line0
 2125 0025 02       		.uleb128 0x2
 2126 0026 01       		.byte	0x1
 2127 0027 06       		.byte	0x6
 2128 0028 57070000 		.4byte	.LASF0
 2129 002c 03       		.uleb128 0x3
 2130 002d 25060000 		.4byte	.LASF3
 2131 0031 02       		.byte	0x2
 2132 0032 1D       		.byte	0x1d
 2133 0033 37000000 		.4byte	0x37
 2134 0037 02       		.uleb128 0x2
 2135 0038 01       		.byte	0x1
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 48


 2136 0039 08       		.byte	0x8
 2137 003a A1060000 		.4byte	.LASF1
 2138 003e 02       		.uleb128 0x2
 2139 003f 02       		.byte	0x2
 2140 0040 05       		.byte	0x5
 2141 0041 77050000 		.4byte	.LASF2
 2142 0045 03       		.uleb128 0x3
 2143 0046 AA020000 		.4byte	.LASF4
 2144 004a 02       		.byte	0x2
 2145 004b 2B       		.byte	0x2b
 2146 004c 50000000 		.4byte	0x50
 2147 0050 02       		.uleb128 0x2
 2148 0051 02       		.byte	0x2
 2149 0052 07       		.byte	0x7
 2150 0053 79070000 		.4byte	.LASF5
 2151 0057 03       		.uleb128 0x3
 2152 0058 9A000000 		.4byte	.LASF6
 2153 005c 02       		.byte	0x2
 2154 005d 3F       		.byte	0x3f
 2155 005e 62000000 		.4byte	0x62
 2156 0062 02       		.uleb128 0x2
 2157 0063 04       		.byte	0x4
 2158 0064 05       		.byte	0x5
 2159 0065 A4050000 		.4byte	.LASF7
 2160 0069 03       		.uleb128 0x3
 2161 006a AF060000 		.4byte	.LASF8
 2162 006e 02       		.byte	0x2
 2163 006f 41       		.byte	0x41
 2164 0070 74000000 		.4byte	0x74
 2165 0074 02       		.uleb128 0x2
 2166 0075 04       		.byte	0x4
 2167 0076 07       		.byte	0x7
 2168 0077 70060000 		.4byte	.LASF9
 2169 007b 02       		.uleb128 0x2
 2170 007c 08       		.byte	0x8
 2171 007d 05       		.byte	0x5
 2172 007e 18040000 		.4byte	.LASF10
 2173 0082 02       		.uleb128 0x2
 2174 0083 08       		.byte	0x8
 2175 0084 07       		.byte	0x7
 2176 0085 68020000 		.4byte	.LASF11
 2177 0089 04       		.uleb128 0x4
 2178 008a 04       		.byte	0x4
 2179 008b 05       		.byte	0x5
 2180 008c 696E7400 		.ascii	"int\000"
 2181 0090 02       		.uleb128 0x2
 2182 0091 04       		.byte	0x4
 2183 0092 07       		.byte	0x7
 2184 0093 7D000000 		.4byte	.LASF12
 2185 0097 03       		.uleb128 0x3
 2186 0098 BA030000 		.4byte	.LASF13
 2187 009c 03       		.byte	0x3
 2188 009d 18       		.byte	0x18
 2189 009e 2C000000 		.4byte	0x2c
 2190 00a2 03       		.uleb128 0x3
 2191 00a3 25050000 		.4byte	.LASF14
 2192 00a7 03       		.byte	0x3
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 49


 2193 00a8 24       		.byte	0x24
 2194 00a9 45000000 		.4byte	0x45
 2195 00ad 03       		.uleb128 0x3
 2196 00ae 82060000 		.4byte	.LASF15
 2197 00b2 03       		.byte	0x3
 2198 00b3 2C       		.byte	0x2c
 2199 00b4 57000000 		.4byte	0x57
 2200 00b8 03       		.uleb128 0x3
 2201 00b9 DF010000 		.4byte	.LASF16
 2202 00bd 03       		.byte	0x3
 2203 00be 30       		.byte	0x30
 2204 00bf 69000000 		.4byte	0x69
 2205 00c3 02       		.uleb128 0x2
 2206 00c4 04       		.byte	0x4
 2207 00c5 04       		.byte	0x4
 2208 00c6 0F020000 		.4byte	.LASF17
 2209 00ca 02       		.uleb128 0x2
 2210 00cb 08       		.byte	0x8
 2211 00cc 04       		.byte	0x4
 2212 00cd A7070000 		.4byte	.LASF18
 2213 00d1 02       		.uleb128 0x2
 2214 00d2 01       		.byte	0x1
 2215 00d3 08       		.byte	0x8
 2216 00d4 69030000 		.4byte	.LASF19
 2217 00d8 02       		.uleb128 0x2
 2218 00d9 08       		.byte	0x8
 2219 00da 04       		.byte	0x4
 2220 00db FE040000 		.4byte	.LASF20
 2221 00df 02       		.uleb128 0x2
 2222 00e0 04       		.byte	0x4
 2223 00e1 07       		.byte	0x7
 2224 00e2 67060000 		.4byte	.LASF21
 2225 00e6 05       		.uleb128 0x5
 2226 00e7 97000000 		.4byte	0x97
 2227 00eb 06       		.uleb128 0x6
 2228 00ec 5C       		.byte	0x5c
 2229 00ed 04       		.byte	0x4
 2230 00ee 4F       		.byte	0x4f
 2231 00ef D8010000 		.4byte	0x1d8
 2232 00f3 07       		.uleb128 0x7
 2233 00f4 46040000 		.4byte	.LASF22
 2234 00f8 04       		.byte	0x4
 2235 00f9 51       		.byte	0x51
 2236 00fa D8010000 		.4byte	0x1d8
 2237 00fe 00       		.byte	0
 2238 00ff 07       		.uleb128 0x7
 2239 0100 2E050000 		.4byte	.LASF23
 2240 0104 04       		.byte	0x4
 2241 0105 52       		.byte	0x52
 2242 0106 D8010000 		.4byte	0x1d8
 2243 010a 0C       		.byte	0xc
 2244 010b 07       		.uleb128 0x7
 2245 010c AE010000 		.4byte	.LASF24
 2246 0110 04       		.byte	0x4
 2247 0111 53       		.byte	0x53
 2248 0112 D8010000 		.4byte	0x1d8
 2249 0116 18       		.byte	0x18
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 50


 2250 0117 07       		.uleb128 0x7
 2251 0118 4A030000 		.4byte	.LASF25
 2252 011c 04       		.byte	0x4
 2253 011d 54       		.byte	0x54
 2254 011e D8010000 		.4byte	0x1d8
 2255 0122 24       		.byte	0x24
 2256 0123 07       		.uleb128 0x7
 2257 0124 00000000 		.4byte	.LASF26
 2258 0128 04       		.byte	0x4
 2259 0129 57       		.byte	0x57
 2260 012a 97000000 		.4byte	0x97
 2261 012e 30       		.byte	0x30
 2262 012f 07       		.uleb128 0x7
 2263 0130 ED040000 		.4byte	.LASF27
 2264 0134 04       		.byte	0x4
 2265 0135 58       		.byte	0x58
 2266 0136 97000000 		.4byte	0x97
 2267 013a 31       		.byte	0x31
 2268 013b 07       		.uleb128 0x7
 2269 013c 29080000 		.4byte	.LASF28
 2270 0140 04       		.byte	0x4
 2271 0141 59       		.byte	0x59
 2272 0142 97000000 		.4byte	0x97
 2273 0146 32       		.byte	0x32
 2274 0147 07       		.uleb128 0x7
 2275 0148 42010000 		.4byte	.LASF29
 2276 014c 04       		.byte	0x4
 2277 014d 5A       		.byte	0x5a
 2278 014e 97000000 		.4byte	0x97
 2279 0152 33       		.byte	0x33
 2280 0153 07       		.uleb128 0x7
 2281 0154 6A000000 		.4byte	.LASF30
 2282 0158 04       		.byte	0x4
 2283 0159 5B       		.byte	0x5b
 2284 015a 97000000 		.4byte	0x97
 2285 015e 34       		.byte	0x34
 2286 015f 07       		.uleb128 0x7
 2287 0160 BE070000 		.4byte	.LASF31
 2288 0164 04       		.byte	0x4
 2289 0165 5C       		.byte	0x5c
 2290 0166 C3000000 		.4byte	0xc3
 2291 016a 38       		.byte	0x38
 2292 016b 07       		.uleb128 0x7
 2293 016c 69010000 		.4byte	.LASF32
 2294 0170 04       		.byte	0x4
 2295 0171 5D       		.byte	0x5d
 2296 0172 C3000000 		.4byte	0xc3
 2297 0176 3C       		.byte	0x3c
 2298 0177 07       		.uleb128 0x7
 2299 0178 6E030000 		.4byte	.LASF33
 2300 017c 04       		.byte	0x4
 2301 017d 5F       		.byte	0x5f
 2302 017e C3000000 		.4byte	0xc3
 2303 0182 40       		.byte	0x40
 2304 0183 07       		.uleb128 0x7
 2305 0184 8C070000 		.4byte	.LASF34
 2306 0188 04       		.byte	0x4
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 51


 2307 0189 60       		.byte	0x60
 2308 018a C3000000 		.4byte	0xc3
 2309 018e 44       		.byte	0x44
 2310 018f 07       		.uleb128 0x7
 2311 0190 4F000000 		.4byte	.LASF35
 2312 0194 04       		.byte	0x4
 2313 0195 62       		.byte	0x62
 2314 0196 97000000 		.4byte	0x97
 2315 019a 48       		.byte	0x48
 2316 019b 07       		.uleb128 0x7
 2317 019c AE070000 		.4byte	.LASF36
 2318 01a0 04       		.byte	0x4
 2319 01a1 64       		.byte	0x64
 2320 01a2 97000000 		.4byte	0x97
 2321 01a6 49       		.byte	0x49
 2322 01a7 07       		.uleb128 0x7
 2323 01a8 E8010000 		.4byte	.LASF37
 2324 01ac 04       		.byte	0x4
 2325 01ad 65       		.byte	0x65
 2326 01ae C3000000 		.4byte	0xc3
 2327 01b2 4C       		.byte	0x4c
 2328 01b3 07       		.uleb128 0x7
 2329 01b4 BB010000 		.4byte	.LASF38
 2330 01b8 04       		.byte	0x4
 2331 01b9 66       		.byte	0x66
 2332 01ba C3000000 		.4byte	0xc3
 2333 01be 50       		.byte	0x50
 2334 01bf 07       		.uleb128 0x7
 2335 01c0 63070000 		.4byte	.LASF39
 2336 01c4 04       		.byte	0x4
 2337 01c5 67       		.byte	0x67
 2338 01c6 A2000000 		.4byte	0xa2
 2339 01ca 54       		.byte	0x54
 2340 01cb 07       		.uleb128 0x7
 2341 01cc F2020000 		.4byte	.LASF40
 2342 01d0 04       		.byte	0x4
 2343 01d1 68       		.byte	0x68
 2344 01d2 C3000000 		.4byte	0xc3
 2345 01d6 58       		.byte	0x58
 2346 01d7 00       		.byte	0
 2347 01d8 08       		.uleb128 0x8
 2348 01d9 C3000000 		.4byte	0xc3
 2349 01dd E8010000 		.4byte	0x1e8
 2350 01e1 09       		.uleb128 0x9
 2351 01e2 DF000000 		.4byte	0xdf
 2352 01e6 02       		.byte	0x2
 2353 01e7 00       		.byte	0
 2354 01e8 03       		.uleb128 0x3
 2355 01e9 94070000 		.4byte	.LASF41
 2356 01ed 04       		.byte	0x4
 2357 01ee 69       		.byte	0x69
 2358 01ef EB000000 		.4byte	0xeb
 2359 01f3 06       		.uleb128 0x6
 2360 01f4 14       		.byte	0x14
 2361 01f5 05       		.byte	0x5
 2362 01f6 81       		.byte	0x81
 2363 01f7 A4020000 		.4byte	0x2a4
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 52


 2364 01fb 07       		.uleb128 0x7
 2365 01fc BA060000 		.4byte	.LASF42
 2366 0200 05       		.byte	0x5
 2367 0201 82       		.byte	0x82
 2368 0202 97000000 		.4byte	0x97
 2369 0206 00       		.byte	0
 2370 0207 07       		.uleb128 0x7
 2371 0208 D8020000 		.4byte	.LASF43
 2372 020c 05       		.byte	0x5
 2373 020d 83       		.byte	0x83
 2374 020e 97000000 		.4byte	0x97
 2375 0212 01       		.byte	0x1
 2376 0213 07       		.uleb128 0x7
 2377 0214 12030000 		.4byte	.LASF44
 2378 0218 05       		.byte	0x5
 2379 0219 84       		.byte	0x84
 2380 021a 97000000 		.4byte	0x97
 2381 021e 02       		.byte	0x2
 2382 021f 07       		.uleb128 0x7
 2383 0220 F6050000 		.4byte	.LASF45
 2384 0224 05       		.byte	0x5
 2385 0225 85       		.byte	0x85
 2386 0226 97000000 		.4byte	0x97
 2387 022a 03       		.byte	0x3
 2388 022b 07       		.uleb128 0x7
 2389 022c 53050000 		.4byte	.LASF46
 2390 0230 05       		.byte	0x5
 2391 0231 86       		.byte	0x86
 2392 0232 97000000 		.4byte	0x97
 2393 0236 04       		.byte	0x4
 2394 0237 07       		.uleb128 0x7
 2395 0238 2F060000 		.4byte	.LASF47
 2396 023c 05       		.byte	0x5
 2397 023d 87       		.byte	0x87
 2398 023e 97000000 		.4byte	0x97
 2399 0242 05       		.byte	0x5
 2400 0243 07       		.uleb128 0x7
 2401 0244 E8070000 		.4byte	.LASF48
 2402 0248 05       		.byte	0x5
 2403 0249 88       		.byte	0x88
 2404 024a 97000000 		.4byte	0x97
 2405 024e 06       		.byte	0x6
 2406 024f 07       		.uleb128 0x7
 2407 0250 7F020000 		.4byte	.LASF49
 2408 0254 05       		.byte	0x5
 2409 0255 89       		.byte	0x89
 2410 0256 97000000 		.4byte	0x97
 2411 025a 07       		.byte	0x7
 2412 025b 07       		.uleb128 0x7
 2413 025c 8F000000 		.4byte	.LASF50
 2414 0260 05       		.byte	0x5
 2415 0261 8A       		.byte	0x8a
 2416 0262 97000000 		.4byte	0x97
 2417 0266 08       		.byte	0x8
 2418 0267 07       		.uleb128 0x7
 2419 0268 A8030000 		.4byte	.LASF51
 2420 026c 05       		.byte	0x5
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 53


 2421 026d 8B       		.byte	0x8b
 2422 026e 97000000 		.4byte	0x97
 2423 0272 09       		.byte	0x9
 2424 0273 07       		.uleb128 0x7
 2425 0274 C7020000 		.4byte	.LASF52
 2426 0278 05       		.byte	0x5
 2427 0279 8C       		.byte	0x8c
 2428 027a 97000000 		.4byte	0x97
 2429 027e 0A       		.byte	0xa
 2430 027f 07       		.uleb128 0x7
 2431 0280 95030000 		.4byte	.LASF53
 2432 0284 05       		.byte	0x5
 2433 0285 8D       		.byte	0x8d
 2434 0286 97000000 		.4byte	0x97
 2435 028a 0B       		.byte	0xb
 2436 028b 07       		.uleb128 0x7
 2437 028c E3050000 		.4byte	.LASF54
 2438 0290 05       		.byte	0x5
 2439 0291 8E       		.byte	0x8e
 2440 0292 97000000 		.4byte	0x97
 2441 0296 0C       		.byte	0xc
 2442 0297 07       		.uleb128 0x7
 2443 0298 76030000 		.4byte	.LASF55
 2444 029c 05       		.byte	0x5
 2445 029d 90       		.byte	0x90
 2446 029e C3000000 		.4byte	0xc3
 2447 02a2 10       		.byte	0x10
 2448 02a3 00       		.byte	0
 2449 02a4 03       		.uleb128 0x3
 2450 02a5 D0050000 		.4byte	.LASF56
 2451 02a9 05       		.byte	0x5
 2452 02aa 92       		.byte	0x92
 2453 02ab F3010000 		.4byte	0x1f3
 2454 02af 06       		.uleb128 0x6
 2455 02b0 34       		.byte	0x34
 2456 02b1 06       		.byte	0x6
 2457 02b2 39       		.byte	0x39
 2458 02b3 48030000 		.4byte	0x348
 2459 02b7 07       		.uleb128 0x7
 2460 02b8 09020000 		.4byte	.LASF57
 2461 02bc 06       		.byte	0x6
 2462 02bd 3C       		.byte	0x3c
 2463 02be 48030000 		.4byte	0x348
 2464 02c2 00       		.byte	0
 2465 02c3 07       		.uleb128 0x7
 2466 02c4 84030000 		.4byte	.LASF58
 2467 02c8 06       		.byte	0x6
 2468 02c9 3D       		.byte	0x3d
 2469 02ca B8000000 		.4byte	0xb8
 2470 02ce 0C       		.byte	0xc
 2471 02cf 07       		.uleb128 0x7
 2472 02d0 9F010000 		.4byte	.LASF59
 2473 02d4 06       		.byte	0x6
 2474 02d5 3E       		.byte	0x3e
 2475 02d6 97000000 		.4byte	0x97
 2476 02da 10       		.byte	0x10
 2477 02db 07       		.uleb128 0x7
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 54


 2478 02dc F9070000 		.4byte	.LASF60
 2479 02e0 06       		.byte	0x6
 2480 02e1 41       		.byte	0x41
 2481 02e2 97000000 		.4byte	0x97
 2482 02e6 11       		.byte	0x11
 2483 02e7 07       		.uleb128 0x7
 2484 02e8 F9010000 		.4byte	.LASF61
 2485 02ec 06       		.byte	0x6
 2486 02ed 48       		.byte	0x48
 2487 02ee C3000000 		.4byte	0xc3
 2488 02f2 14       		.byte	0x14
 2489 02f3 07       		.uleb128 0x7
 2490 02f4 DE020000 		.4byte	.LASF62
 2491 02f8 06       		.byte	0x6
 2492 02f9 49       		.byte	0x49
 2493 02fa C3000000 		.4byte	0xc3
 2494 02fe 18       		.byte	0x18
 2495 02ff 07       		.uleb128 0x7
 2496 0300 AE010000 		.4byte	.LASF24
 2497 0304 06       		.byte	0x6
 2498 0305 4B       		.byte	0x4b
 2499 0306 C3000000 		.4byte	0xc3
 2500 030a 1C       		.byte	0x1c
 2501 030b 07       		.uleb128 0x7
 2502 030c 4B070000 		.4byte	.LASF63
 2503 0310 06       		.byte	0x6
 2504 0311 4C       		.byte	0x4c
 2505 0312 C3000000 		.4byte	0xc3
 2506 0316 20       		.byte	0x20
 2507 0317 07       		.uleb128 0x7
 2508 0318 38000000 		.4byte	.LASF64
 2509 031c 06       		.byte	0x6
 2510 031d 50       		.byte	0x50
 2511 031e C3000000 		.4byte	0xc3
 2512 0322 24       		.byte	0x24
 2513 0323 07       		.uleb128 0x7
 2514 0324 6C050000 		.4byte	.LASF65
 2515 0328 06       		.byte	0x6
 2516 0329 51       		.byte	0x51
 2517 032a C3000000 		.4byte	0xc3
 2518 032e 28       		.byte	0x28
 2519 032f 07       		.uleb128 0x7
 2520 0330 59010000 		.4byte	.LASF66
 2521 0334 06       		.byte	0x6
 2522 0335 52       		.byte	0x52
 2523 0336 C3000000 		.4byte	0xc3
 2524 033a 2C       		.byte	0x2c
 2525 033b 07       		.uleb128 0x7
 2526 033c 76030000 		.4byte	.LASF55
 2527 0340 06       		.byte	0x6
 2528 0341 56       		.byte	0x56
 2529 0342 C3000000 		.4byte	0xc3
 2530 0346 30       		.byte	0x30
 2531 0347 00       		.byte	0
 2532 0348 08       		.uleb128 0x8
 2533 0349 B8000000 		.4byte	0xb8
 2534 034d 58030000 		.4byte	0x358
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 55


 2535 0351 09       		.uleb128 0x9
 2536 0352 DF000000 		.4byte	0xdf
 2537 0356 02       		.byte	0x2
 2538 0357 00       		.byte	0
 2539 0358 03       		.uleb128 0x3
 2540 0359 55000000 		.4byte	.LASF67
 2541 035d 06       		.byte	0x6
 2542 035e 58       		.byte	0x58
 2543 035f AF020000 		.4byte	0x2af
 2544 0363 06       		.uleb128 0x6
 2545 0364 0C       		.byte	0xc
 2546 0365 06       		.byte	0x6
 2547 0366 5C       		.byte	0x5c
 2548 0367 90030000 		.4byte	0x390
 2549 036b 07       		.uleb128 0x7
 2550 036c D9050000 		.4byte	.LASF68
 2551 0370 06       		.byte	0x6
 2552 0371 5D       		.byte	0x5d
 2553 0372 C3000000 		.4byte	0xc3
 2554 0376 00       		.byte	0
 2555 0377 07       		.uleb128 0x7
 2556 0378 76030000 		.4byte	.LASF55
 2557 037c 06       		.byte	0x6
 2558 037d 5E       		.byte	0x5e
 2559 037e C3000000 		.4byte	0xc3
 2560 0382 04       		.byte	0x4
 2561 0383 07       		.uleb128 0x7
 2562 0384 F9070000 		.4byte	.LASF60
 2563 0388 06       		.byte	0x6
 2564 0389 5F       		.byte	0x5f
 2565 038a 97000000 		.4byte	0x97
 2566 038e 08       		.byte	0x8
 2567 038f 00       		.byte	0
 2568 0390 03       		.uleb128 0x3
 2569 0391 57020000 		.4byte	.LASF69
 2570 0395 06       		.byte	0x6
 2571 0396 63       		.byte	0x63
 2572 0397 63030000 		.4byte	0x363
 2573 039b 06       		.uleb128 0x6
 2574 039c 1C       		.byte	0x1c
 2575 039d 01       		.byte	0x1
 2576 039e 23       		.byte	0x23
 2577 039f C8030000 		.4byte	0x3c8
 2578 03a3 07       		.uleb128 0x7
 2579 03a4 03080000 		.4byte	.LASF70
 2580 03a8 01       		.byte	0x1
 2581 03a9 24       		.byte	0x24
 2582 03aa C8030000 		.4byte	0x3c8
 2583 03ae 00       		.byte	0
 2584 03af 07       		.uleb128 0x7
 2585 03b0 B5020000 		.4byte	.LASF71
 2586 03b4 01       		.byte	0x1
 2587 03b5 27       		.byte	0x27
 2588 03b6 D8010000 		.4byte	0x1d8
 2589 03ba 0C       		.byte	0xc
 2590 03bb 07       		.uleb128 0x7
 2591 03bc D1070000 		.4byte	.LASF72
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 56


 2592 03c0 01       		.byte	0x1
 2593 03c1 28       		.byte	0x28
 2594 03c2 C3000000 		.4byte	0xc3
 2595 03c6 18       		.byte	0x18
 2596 03c7 00       		.byte	0
 2597 03c8 08       		.uleb128 0x8
 2598 03c9 AD000000 		.4byte	0xad
 2599 03cd D8030000 		.4byte	0x3d8
 2600 03d1 09       		.uleb128 0x9
 2601 03d2 DF000000 		.4byte	0xdf
 2602 03d6 02       		.byte	0x2
 2603 03d7 00       		.byte	0
 2604 03d8 03       		.uleb128 0x3
 2605 03d9 61040000 		.4byte	.LASF73
 2606 03dd 01       		.byte	0x1
 2607 03de 29       		.byte	0x29
 2608 03df 9B030000 		.4byte	0x39b
 2609 03e3 0A       		.uleb128 0xa
 2610 03e4 95040000 		.4byte	.LASF82
 2611 03e8 01       		.byte	0x1
 2612 03e9 2E       		.byte	0x2e
 2613 03ea 97000000 		.4byte	0x97
 2614 03ee 00000000 		.4byte	.LFB64
 2615 03f2 26000000 		.4byte	.LFE64-.LFB64
 2616 03f6 01       		.uleb128 0x1
 2617 03f7 9C       		.byte	0x9c
 2618 03f8 0B040000 		.4byte	0x40b
 2619 03fc 0B       		.uleb128 0xb
 2620 03fd 60050000 		.4byte	.LASF74
 2621 0401 01       		.byte	0x1
 2622 0402 2E       		.byte	0x2e
 2623 0403 97000000 		.4byte	0x97
 2624 0407 02       		.uleb128 0x2
 2625 0408 91       		.byte	0x91
 2626 0409 77       		.sleb128 -9
 2627 040a 00       		.byte	0
 2628 040b 0C       		.uleb128 0xc
 2629 040c BA050000 		.4byte	.LASF121
 2630 0410 01       		.byte	0x1
 2631 0411 37       		.byte	0x37
 2632 0412 97000000 		.4byte	0x97
 2633 0416 00000000 		.4byte	.LFB65
 2634 041a 26000000 		.4byte	.LFE65-.LFB65
 2635 041e 01       		.uleb128 0x1
 2636 041f 9C       		.byte	0x9c
 2637 0420 33040000 		.4byte	0x433
 2638 0424 0B       		.uleb128 0xb
 2639 0425 60050000 		.4byte	.LASF74
 2640 0429 01       		.byte	0x1
 2641 042a 37       		.byte	0x37
 2642 042b 97000000 		.4byte	0x97
 2643 042f 02       		.uleb128 0x2
 2644 0430 91       		.byte	0x91
 2645 0431 77       		.sleb128 -9
 2646 0432 00       		.byte	0
 2647 0433 0D       		.uleb128 0xd
 2648 0434 55030000 		.4byte	.LASF122
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 57


 2649 0438 01       		.byte	0x1
 2650 0439 80       		.byte	0x80
 2651 043a 00000000 		.4byte	.LFB66
 2652 043e 2C020000 		.4byte	.LFE66-.LFB66
 2653 0442 01       		.uleb128 0x1
 2654 0443 9C       		.byte	0x9c
 2655 0444 81040000 		.4byte	0x481
 2656 0448 0E       		.uleb128 0xe
 2657 0449 60050000 		.4byte	.LASF74
 2658 044d 01       		.byte	0x1
 2659 044e 83       		.byte	0x83
 2660 044f 97000000 		.4byte	0x97
 2661 0453 02       		.uleb128 0x2
 2662 0454 91       		.byte	0x91
 2663 0455 6F       		.sleb128 -17
 2664 0456 0E       		.uleb128 0xe
 2665 0457 F9010000 		.4byte	.LASF61
 2666 045b 01       		.byte	0x1
 2667 045c 8B       		.byte	0x8b
 2668 045d C3000000 		.4byte	0xc3
 2669 0461 02       		.uleb128 0x2
 2670 0462 91       		.byte	0x91
 2671 0463 60       		.sleb128 -32
 2672 0464 0E       		.uleb128 0xe
 2673 0465 8A000000 		.4byte	.LASF75
 2674 0469 01       		.byte	0x1
 2675 046a 8C       		.byte	0x8c
 2676 046b 81040000 		.4byte	0x481
 2677 046f 02       		.uleb128 0x2
 2678 0470 91       		.byte	0x91
 2679 0471 68       		.sleb128 -24
 2680 0472 0E       		.uleb128 0xe
 2681 0473 9F070000 		.4byte	.LASF76
 2682 0477 01       		.byte	0x1
 2683 0478 8D       		.byte	0x8d
 2684 0479 81040000 		.4byte	0x481
 2685 047d 02       		.uleb128 0x2
 2686 047e 91       		.byte	0x91
 2687 047f 64       		.sleb128 -28
 2688 0480 00       		.byte	0
 2689 0481 0F       		.uleb128 0xf
 2690 0482 04       		.byte	0x4
 2691 0483 58030000 		.4byte	0x358
 2692 0487 10       		.uleb128 0x10
 2693 0488 14060000 		.4byte	.LASF77
 2694 048c 01       		.byte	0x1
 2695 048d C9       		.byte	0xc9
 2696 048e 00000000 		.4byte	.LFB67
 2697 0492 1C000000 		.4byte	.LFE67-.LFB67
 2698 0496 01       		.uleb128 0x1
 2699 0497 9C       		.byte	0x9c
 2700 0498 11       		.uleb128 0x11
 2701 0499 26000000 		.4byte	.LASF78
 2702 049d 01       		.byte	0x1
 2703 049e D0       		.byte	0xd0
 2704 049f 00000000 		.4byte	.LFB68
 2705 04a3 34000000 		.4byte	.LFE68-.LFB68
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 58


 2706 04a7 01       		.uleb128 0x1
 2707 04a8 9C       		.byte	0x9c
 2708 04a9 12       		.uleb128 0x12
 2709 04aa 0A050000 		.4byte	.LASF87
 2710 04ae 01       		.byte	0x1
 2711 04af D9       		.byte	0xd9
 2712 04b0 00000000 		.4byte	.LFB69
 2713 04b4 4C000000 		.4byte	.LFE69-.LFB69
 2714 04b8 01       		.uleb128 0x1
 2715 04b9 9C       		.byte	0x9c
 2716 04ba D7040000 		.4byte	0x4d7
 2717 04be 13       		.uleb128 0x13
 2718 04bf 12000000 		.4byte	.LBB2
 2719 04c3 26000000 		.4byte	.LBE2-.LBB2
 2720 04c7 0E       		.uleb128 0xe
 2721 04c8 60050000 		.4byte	.LASF74
 2722 04cc 01       		.byte	0x1
 2723 04cd DC       		.byte	0xdc
 2724 04ce 97000000 		.4byte	0x97
 2725 04d2 02       		.uleb128 0x2
 2726 04d3 91       		.byte	0x91
 2727 04d4 77       		.sleb128 -9
 2728 04d5 00       		.byte	0
 2729 04d6 00       		.byte	0
 2730 04d7 14       		.uleb128 0x14
 2731 04d8 0C080000 		.4byte	.LASF79
 2732 04dc 01       		.byte	0x1
 2733 04dd E5       		.byte	0xe5
 2734 04de 81040000 		.4byte	0x481
 2735 04e2 00000000 		.4byte	.LFB70
 2736 04e6 24000000 		.4byte	.LFE70-.LFB70
 2737 04ea 01       		.uleb128 0x1
 2738 04eb 9C       		.byte	0x9c
 2739 04ec 14       		.uleb128 0x14
 2740 04ed 8A060000 		.4byte	.LASF80
 2741 04f1 01       		.byte	0x1
 2742 04f2 EC       		.byte	0xec
 2743 04f3 81040000 		.4byte	0x481
 2744 04f7 00000000 		.4byte	.LFB71
 2745 04fb 38000000 		.4byte	.LFE71-.LFB71
 2746 04ff 01       		.uleb128 0x1
 2747 0500 9C       		.byte	0x9c
 2748 0501 15       		.uleb128 0x15
 2749 0502 81050000 		.4byte	.LASF123
 2750 0506 01       		.byte	0x1
 2751 0507 F3       		.byte	0xf3
 2752 0508 C3000000 		.4byte	0xc3
 2753 050c 00000000 		.4byte	.LFB72
 2754 0510 48000000 		.4byte	.LFE72-.LFB72
 2755 0514 01       		.uleb128 0x1
 2756 0515 9C       		.byte	0x9c
 2757 0516 29050000 		.4byte	0x529
 2758 051a 0E       		.uleb128 0xe
 2759 051b 60050000 		.4byte	.LASF74
 2760 051f 01       		.byte	0x1
 2761 0520 F5       		.byte	0xf5
 2762 0521 97000000 		.4byte	0x97
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 59


 2763 0525 02       		.uleb128 0x2
 2764 0526 91       		.byte	0x91
 2765 0527 77       		.sleb128 -9
 2766 0528 00       		.byte	0
 2767 0529 14       		.uleb128 0x14
 2768 052a 88010000 		.4byte	.LASF81
 2769 052e 01       		.byte	0x1
 2770 052f FC       		.byte	0xfc
 2771 0530 97000000 		.4byte	0x97
 2772 0534 00000000 		.4byte	.LFB73
 2773 0538 28000000 		.4byte	.LFE73-.LFB73
 2774 053c 01       		.uleb128 0x1
 2775 053d 9C       		.byte	0x9c
 2776 053e 16       		.uleb128 0x16
 2777 053f E3030000 		.4byte	.LASF83
 2778 0543 01       		.byte	0x1
 2779 0544 0501     		.2byte	0x105
 2780 0546 C3000000 		.4byte	0xc3
 2781 054a 00000000 		.4byte	.LFB74
 2782 054e E4000000 		.4byte	.LFE74-.LFB74
 2783 0552 01       		.uleb128 0x1
 2784 0553 9C       		.byte	0x9c
 2785 0554 77050000 		.4byte	0x577
 2786 0558 17       		.uleb128 0x17
 2787 0559 1F060000 		.4byte	.LASF84
 2788 055d 01       		.byte	0x1
 2789 055e 0501     		.2byte	0x105
 2790 0560 81040000 		.4byte	0x481
 2791 0564 02       		.uleb128 0x2
 2792 0565 91       		.byte	0x91
 2793 0566 64       		.sleb128 -28
 2794 0567 18       		.uleb128 0x18
 2795 0568 53040000 		.4byte	.LASF85
 2796 056c 01       		.byte	0x1
 2797 056d 0701     		.2byte	0x107
 2798 056f C3000000 		.4byte	0xc3
 2799 0573 02       		.uleb128 0x2
 2800 0574 91       		.byte	0x91
 2801 0575 6C       		.sleb128 -20
 2802 0576 00       		.byte	0
 2803 0577 19       		.uleb128 0x19
 2804 0578 8A020000 		.4byte	.LASF124
 2805 057c 01       		.byte	0x1
 2806 057d 1401     		.2byte	0x114
 2807 057f 00000000 		.4byte	.LFB75
 2808 0583 64000000 		.4byte	.LFE75-.LFB75
 2809 0587 01       		.uleb128 0x1
 2810 0588 9C       		.byte	0x9c
 2811 0589 BB050000 		.4byte	0x5bb
 2812 058d 17       		.uleb128 0x17
 2813 058e 1F060000 		.4byte	.LASF84
 2814 0592 01       		.byte	0x1
 2815 0593 1401     		.2byte	0x114
 2816 0595 81040000 		.4byte	0x481
 2817 0599 02       		.uleb128 0x2
 2818 059a 91       		.byte	0x91
 2819 059b 74       		.sleb128 -12
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 60


 2820 059c 17       		.uleb128 0x17
 2821 059d 53040000 		.4byte	.LASF85
 2822 05a1 01       		.byte	0x1
 2823 05a2 1401     		.2byte	0x114
 2824 05a4 C3000000 		.4byte	0xc3
 2825 05a8 02       		.uleb128 0x2
 2826 05a9 91       		.byte	0x91
 2827 05aa 70       		.sleb128 -16
 2828 05ab 17       		.uleb128 0x17
 2829 05ac 13000000 		.4byte	.LASF86
 2830 05b0 01       		.byte	0x1
 2831 05b1 1401     		.2byte	0x114
 2832 05b3 C3000000 		.4byte	0xc3
 2833 05b7 02       		.uleb128 0x2
 2834 05b8 91       		.byte	0x91
 2835 05b9 6C       		.sleb128 -20
 2836 05ba 00       		.byte	0
 2837 05bb 1A       		.uleb128 0x1a
 2838 05bc C5040000 		.4byte	.LASF88
 2839 05c0 01       		.byte	0x1
 2840 05c1 1E01     		.2byte	0x11e
 2841 05c3 00000000 		.4byte	.LFB76
 2842 05c7 70000000 		.4byte	.LFE76-.LFB76
 2843 05cb 01       		.uleb128 0x1
 2844 05cc 9C       		.byte	0x9c
 2845 05cd 0E060000 		.4byte	0x60e
 2846 05d1 18       		.uleb128 0x18
 2847 05d2 60050000 		.4byte	.LASF74
 2848 05d6 01       		.byte	0x1
 2849 05d7 2001     		.2byte	0x120
 2850 05d9 97000000 		.4byte	0x97
 2851 05dd 02       		.uleb128 0x2
 2852 05de 91       		.byte	0x91
 2853 05df 77       		.sleb128 -9
 2854 05e0 18       		.uleb128 0x18
 2855 05e1 1F060000 		.4byte	.LASF84
 2856 05e5 01       		.byte	0x1
 2857 05e6 2101     		.2byte	0x121
 2858 05e8 81040000 		.4byte	0x481
 2859 05ec 02       		.uleb128 0x2
 2860 05ed 91       		.byte	0x91
 2861 05ee 6C       		.sleb128 -20
 2862 05ef 18       		.uleb128 0x18
 2863 05f0 53040000 		.4byte	.LASF85
 2864 05f4 01       		.byte	0x1
 2865 05f5 2201     		.2byte	0x122
 2866 05f7 C3000000 		.4byte	0xc3
 2867 05fb 02       		.uleb128 0x2
 2868 05fc 91       		.byte	0x91
 2869 05fd 68       		.sleb128 -24
 2870 05fe 18       		.uleb128 0x18
 2871 05ff 13000000 		.4byte	.LASF86
 2872 0603 01       		.byte	0x1
 2873 0604 2301     		.2byte	0x123
 2874 0606 C3000000 		.4byte	0xc3
 2875 060a 02       		.uleb128 0x2
 2876 060b 91       		.byte	0x91
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 61


 2877 060c 70       		.sleb128 -16
 2878 060d 00       		.byte	0
 2879 060e 16       		.uleb128 0x16
 2880 060f 11070000 		.4byte	.LASF89
 2881 0613 01       		.byte	0x1
 2882 0614 3D01     		.2byte	0x13d
 2883 0616 97000000 		.4byte	0x97
 2884 061a 00000000 		.4byte	.LFB77
 2885 061e D4050000 		.4byte	.LFE77-.LFB77
 2886 0622 01       		.uleb128 0x1
 2887 0623 9C       		.byte	0x9c
 2888 0624 13070000 		.4byte	0x713
 2889 0628 17       		.uleb128 0x17
 2890 0629 01030000 		.4byte	.LASF90
 2891 062d 01       		.byte	0x1
 2892 062e 3D01     		.2byte	0x13d
 2893 0630 13070000 		.4byte	0x713
 2894 0634 03       		.uleb128 0x3
 2895 0635 91       		.byte	0x91
 2896 0636 9C7F     		.sleb128 -100
 2897 0638 17       		.uleb128 0x17
 2898 0639 62000000 		.4byte	.LASF91
 2899 063d 01       		.byte	0x1
 2900 063e 3D01     		.2byte	0x13d
 2901 0640 19070000 		.4byte	0x719
 2902 0644 03       		.uleb128 0x3
 2903 0645 91       		.byte	0x91
 2904 0646 987F     		.sleb128 -104
 2905 0648 18       		.uleb128 0x18
 2906 0649 1F060000 		.4byte	.LASF84
 2907 064d 01       		.byte	0x1
 2908 064e 4001     		.2byte	0x140
 2909 0650 81040000 		.4byte	0x481
 2910 0654 02       		.uleb128 0x2
 2911 0655 91       		.byte	0x91
 2912 0656 60       		.sleb128 -32
 2913 0657 18       		.uleb128 0x18
 2914 0658 E8060000 		.4byte	.LASF92
 2915 065c 01       		.byte	0x1
 2916 065d 4B01     		.2byte	0x14b
 2917 065f C8030000 		.4byte	0x3c8
 2918 0663 02       		.uleb128 0x2
 2919 0664 91       		.byte	0x91
 2920 0665 48       		.sleb128 -56
 2921 0666 18       		.uleb128 0x18
 2922 0667 D4030000 		.4byte	.LASF93
 2923 066b 01       		.byte	0x1
 2924 066c 4B01     		.2byte	0x14b
 2925 066e C8030000 		.4byte	0x3c8
 2926 0672 03       		.uleb128 0x3
 2927 0673 91       		.byte	0x91
 2928 0674 BC7F     		.sleb128 -68
 2929 0676 18       		.uleb128 0x18
 2930 0677 5E060000 		.4byte	.LASF94
 2931 067b 01       		.byte	0x1
 2932 067c 4C01     		.2byte	0x14c
 2933 067e D8010000 		.4byte	0x1d8
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 62


 2934 0682 03       		.uleb128 0x3
 2935 0683 91       		.byte	0x91
 2936 0684 B07F     		.sleb128 -80
 2937 0686 18       		.uleb128 0x18
 2938 0687 22070000 		.4byte	.LASF95
 2939 068b 01       		.byte	0x1
 2940 068c 4C01     		.2byte	0x14c
 2941 068e C3000000 		.4byte	0xc3
 2942 0692 02       		.uleb128 0x2
 2943 0693 91       		.byte	0x91
 2944 0694 6C       		.sleb128 -20
 2945 0695 1B       		.uleb128 0x1b
 2946 0696 69647800 		.ascii	"idx\000"
 2947 069a 01       		.byte	0x1
 2948 069b 4D01     		.2byte	0x14d
 2949 069d 97000000 		.4byte	0x97
 2950 06a1 02       		.uleb128 0x2
 2951 06a2 91       		.byte	0x91
 2952 06a3 6B       		.sleb128 -21
 2953 06a4 1C       		.uleb128 0x1c
 2954 06a5 4E030000 		.4byte	.LBB3
 2955 06a9 DE010000 		.4byte	.LBE3-.LBB3
 2956 06ad F9060000 		.4byte	0x6f9
 2957 06b1 18       		.uleb128 0x18
 2958 06b2 C2030000 		.4byte	.LASF96
 2959 06b6 01       		.byte	0x1
 2960 06b7 AF01     		.2byte	0x1af
 2961 06b9 D8010000 		.4byte	0x1d8
 2962 06bd 03       		.uleb128 0x3
 2963 06be 91       		.byte	0x91
 2964 06bf A47F     		.sleb128 -92
 2965 06c1 18       		.uleb128 0x18
 2966 06c2 01060000 		.4byte	.LASF97
 2967 06c6 01       		.byte	0x1
 2968 06c7 B001     		.2byte	0x1b0
 2969 06c9 C3000000 		.4byte	0xc3
 2970 06cd 02       		.uleb128 0x2
 2971 06ce 91       		.byte	0x91
 2972 06cf 64       		.sleb128 -28
 2973 06d0 13       		.uleb128 0x13
 2974 06d1 18040000 		.4byte	.LBB4
 2975 06d5 14010000 		.4byte	.LBE4-.LBB4
 2976 06d9 18       		.uleb128 0x18
 2977 06da C0060000 		.4byte	.LASF98
 2978 06de 01       		.byte	0x1
 2979 06df C001     		.2byte	0x1c0
 2980 06e1 C3000000 		.4byte	0xc3
 2981 06e5 02       		.uleb128 0x2
 2982 06e6 91       		.byte	0x91
 2983 06e7 5C       		.sleb128 -36
 2984 06e8 18       		.uleb128 0x18
 2985 06e9 B8040000 		.4byte	.LASF99
 2986 06ed 01       		.byte	0x1
 2987 06ee C101     		.2byte	0x1c1
 2988 06f0 C3000000 		.4byte	0xc3
 2989 06f4 02       		.uleb128 0x2
 2990 06f5 91       		.byte	0x91
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 63


 2991 06f6 58       		.sleb128 -40
 2992 06f7 00       		.byte	0
 2993 06f8 00       		.byte	0
 2994 06f9 13       		.uleb128 0x13
 2995 06fa 38050000 		.4byte	.LBB5
 2996 06fe 58000000 		.4byte	.LBE5-.LBB5
 2997 0702 18       		.uleb128 0x18
 2998 0703 53040000 		.4byte	.LASF85
 2999 0707 01       		.byte	0x1
 3000 0708 CA01     		.2byte	0x1ca
 3001 070a C3000000 		.4byte	0xc3
 3002 070e 02       		.uleb128 0x2
 3003 070f 91       		.byte	0x91
 3004 0710 54       		.sleb128 -44
 3005 0711 00       		.byte	0
 3006 0712 00       		.byte	0
 3007 0713 0F       		.uleb128 0xf
 3008 0714 04       		.byte	0x4
 3009 0715 C3000000 		.4byte	0xc3
 3010 0719 0F       		.uleb128 0xf
 3011 071a 04       		.byte	0x4
 3012 071b 90030000 		.4byte	0x390
 3013 071f 1A       		.uleb128 0x1a
 3014 0720 CC010000 		.4byte	.LASF100
 3015 0724 01       		.byte	0x1
 3016 0725 DE01     		.2byte	0x1de
 3017 0727 00000000 		.4byte	.LFB78
 3018 072b 60000000 		.4byte	.LFE78-.LFB78
 3019 072f 01       		.uleb128 0x1
 3020 0730 9C       		.byte	0x9c
 3021 0731 45070000 		.4byte	0x745
 3022 0735 1B       		.uleb128 0x1b
 3023 0736 69647800 		.ascii	"idx\000"
 3024 073a 01       		.byte	0x1
 3025 073b E201     		.2byte	0x1e2
 3026 073d 97000000 		.4byte	0x97
 3027 0741 02       		.uleb128 0x2
 3028 0742 91       		.byte	0x91
 3029 0743 77       		.sleb128 -9
 3030 0744 00       		.byte	0
 3031 0745 1D       		.uleb128 0x1d
 3032 0746 2B070000 		.4byte	.LASF101
 3033 074a 01       		.byte	0x1
 3034 074b F401     		.2byte	0x1f4
 3035 074d 97000000 		.4byte	0x97
 3036 0751 00000000 		.4byte	.LFB79
 3037 0755 44000000 		.4byte	.LFE79-.LFB79
 3038 0759 01       		.uleb128 0x1
 3039 075a 9C       		.byte	0x9c
 3040 075b 1D       		.uleb128 0x1d
 3041 075c F5060000 		.4byte	.LASF102
 3042 0760 01       		.byte	0x1
 3043 0761 FD01     		.2byte	0x1fd
 3044 0763 97000000 		.4byte	0x97
 3045 0767 00000000 		.4byte	.LFB80
 3046 076b 40000000 		.4byte	.LFE80-.LFB80
 3047 076f 01       		.uleb128 0x1
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 64


 3048 0770 9C       		.byte	0x9c
 3049 0771 1E       		.uleb128 0x1e
 3050 0772 7D040000 		.4byte	.LASF103
 3051 0776 01       		.byte	0x1
 3052 0777 0602     		.2byte	0x206
 3053 0779 00000000 		.4byte	.LFB81
 3054 077d 20000000 		.4byte	.LFE81-.LFB81
 3055 0781 01       		.uleb128 0x1
 3056 0782 9C       		.byte	0x9c
 3057 0783 08       		.uleb128 0x8
 3058 0784 58030000 		.4byte	0x358
 3059 0788 93070000 		.4byte	0x793
 3060 078c 09       		.uleb128 0x9
 3061 078d DF000000 		.4byte	0xdf
 3062 0791 27       		.byte	0x27
 3063 0792 00       		.byte	0
 3064 0793 0E       		.uleb128 0xe
 3065 0794 39040000 		.4byte	.LASF104
 3066 0798 01       		.byte	0x1
 3067 0799 1C       		.byte	0x1c
 3068 079a 83070000 		.4byte	0x783
 3069 079e 05       		.uleb128 0x5
 3070 079f 03       		.byte	0x3
 3071 07a0 00000000 		.4byte	block_buffer
 3072 07a4 0E       		.uleb128 0xe
 3073 07a5 6B040000 		.4byte	.LASF105
 3074 07a9 01       		.byte	0x1
 3075 07aa 1D       		.byte	0x1d
 3076 07ab 97000000 		.4byte	0x97
 3077 07af 05       		.uleb128 0x5
 3078 07b0 03       		.byte	0x3
 3079 07b1 20080000 		.4byte	block_buffer_tail
 3080 07b5 0E       		.uleb128 0xe
 3081 07b6 06040000 		.4byte	.LASF106
 3082 07ba 01       		.byte	0x1
 3083 07bb 1E       		.byte	0x1e
 3084 07bc 97000000 		.4byte	0x97
 3085 07c0 05       		.uleb128 0x5
 3086 07c1 03       		.byte	0x3
 3087 07c2 21080000 		.4byte	block_buffer_head
 3088 07c6 0E       		.uleb128 0xe
 3089 07c7 77010000 		.4byte	.LASF107
 3090 07cb 01       		.byte	0x1
 3091 07cc 1F       		.byte	0x1f
 3092 07cd 97000000 		.4byte	0x97
 3093 07d1 05       		.uleb128 0x5
 3094 07d2 03       		.byte	0x3
 3095 07d3 22080000 		.4byte	next_buffer_head
 3096 07d7 0E       		.uleb128 0xe
 3097 07d8 2C030000 		.4byte	.LASF108
 3098 07dc 01       		.byte	0x1
 3099 07dd 20       		.byte	0x20
 3100 07de 97000000 		.4byte	0x97
 3101 07e2 05       		.uleb128 0x5
 3102 07e3 03       		.byte	0x3
 3103 07e4 23080000 		.4byte	block_buffer_planned
 3104 07e8 1F       		.uleb128 0x1f
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 65


 3105 07e9 706C00   		.ascii	"pl\000"
 3106 07ec 01       		.byte	0x1
 3107 07ed 2A       		.byte	0x2a
 3108 07ee D8030000 		.4byte	0x3d8
 3109 07f2 05       		.uleb128 0x5
 3110 07f3 03       		.byte	0x3
 3111 07f4 24080000 		.4byte	pl
 3112 07f8 20       		.uleb128 0x20
 3113 07f9 AD050000 		.4byte	.LASF109
 3114 07fd 07       		.byte	0x7
 3115 07fe 1207     		.2byte	0x712
 3116 0800 04080000 		.4byte	0x804
 3117 0804 05       		.uleb128 0x5
 3118 0805 AD000000 		.4byte	0xad
 3119 0809 21       		.uleb128 0x21
 3120 080a 41030000 		.4byte	.LASF110
 3121 080e 04       		.byte	0x4
 3122 080f 6A       		.byte	0x6a
 3123 0810 E8010000 		.4byte	0x1e8
 3124 0814 22       		.uleb128 0x22
 3125 0815 73797300 		.ascii	"sys\000"
 3126 0819 05       		.byte	0x5
 3127 081a 93       		.byte	0x93
 3128 081b A4020000 		.4byte	0x2a4
 3129 081f 23       		.uleb128 0x23
 3130 0820 AB040000 		.4byte	.LASF111
 3131 0824 05       		.byte	0x5
 3132 0825 96       		.byte	0x96
 3133 0826 C8030000 		.4byte	0x3c8
 3134 082a 05       		.uleb128 0x5
 3135 082b 03       		.byte	0x3
 3136 082c 00000000 		.4byte	sys_position
 3137 0830 23       		.uleb128 0x23
 3138 0831 26040000 		.4byte	.LASF112
 3139 0835 05       		.byte	0x5
 3140 0836 97       		.byte	0x97
 3141 0837 C8030000 		.4byte	0x3c8
 3142 083b 05       		.uleb128 0x5
 3143 083c 03       		.byte	0x3
 3144 083d 00000000 		.4byte	sys_probe_position
 3145 0841 23       		.uleb128 0x23
 3146 0842 32010000 		.4byte	.LASF113
 3147 0846 05       		.byte	0x5
 3148 0847 99       		.byte	0x99
 3149 0848 E6000000 		.4byte	0xe6
 3150 084c 05       		.uleb128 0x5
 3151 084d 03       		.byte	0x3
 3152 084e 00000000 		.4byte	sys_probe_state
 3153 0852 23       		.uleb128 0x23
 3154 0853 1A030000 		.4byte	.LASF114
 3155 0857 05       		.byte	0x5
 3156 0858 9A       		.byte	0x9a
 3157 0859 E6000000 		.4byte	0xe6
 3158 085d 05       		.uleb128 0x5
 3159 085e 03       		.byte	0x3
 3160 085f 00000000 		.4byte	sys_rt_exec_state
 3161 0863 23       		.uleb128 0x23
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 66


 3162 0864 D6060000 		.4byte	.LASF115
 3163 0868 05       		.byte	0x5
 3164 0869 9B       		.byte	0x9b
 3165 086a E6000000 		.4byte	0xe6
 3166 086e 05       		.uleb128 0x5
 3167 086f 03       		.byte	0x3
 3168 0870 00000000 		.4byte	sys_rt_exec_alarm
 3169 0874 23       		.uleb128 0x23
 3170 0875 37050000 		.4byte	.LASF116
 3171 0879 05       		.byte	0x5
 3172 087a 9C       		.byte	0x9c
 3173 087b E6000000 		.4byte	0xe6
 3174 087f 05       		.uleb128 0x5
 3175 0880 03       		.byte	0x3
 3176 0881 00000000 		.4byte	sys_rt_exec_motion_override
 3177 0885 23       		.uleb128 0x23
 3178 0886 3F060000 		.4byte	.LASF117
 3179 088a 05       		.byte	0x5
 3180 088b 9D       		.byte	0x9d
 3181 088c E6000000 		.4byte	0xe6
 3182 0890 05       		.uleb128 0x5
 3183 0891 03       		.byte	0x3
 3184 0892 00000000 		.4byte	sys_rt_exec_accessory_override
 3185 0896 00       		.byte	0
 3186              		.section	.debug_abbrev,"",%progbits
 3187              	.Ldebug_abbrev0:
 3188 0000 01       		.uleb128 0x1
 3189 0001 11       		.uleb128 0x11
 3190 0002 01       		.byte	0x1
 3191 0003 25       		.uleb128 0x25
 3192 0004 0E       		.uleb128 0xe
 3193 0005 13       		.uleb128 0x13
 3194 0006 0B       		.uleb128 0xb
 3195 0007 03       		.uleb128 0x3
 3196 0008 0E       		.uleb128 0xe
 3197 0009 1B       		.uleb128 0x1b
 3198 000a 0E       		.uleb128 0xe
 3199 000b 55       		.uleb128 0x55
 3200 000c 17       		.uleb128 0x17
 3201 000d 11       		.uleb128 0x11
 3202 000e 01       		.uleb128 0x1
 3203 000f 10       		.uleb128 0x10
 3204 0010 17       		.uleb128 0x17
 3205 0011 00       		.byte	0
 3206 0012 00       		.byte	0
 3207 0013 02       		.uleb128 0x2
 3208 0014 24       		.uleb128 0x24
 3209 0015 00       		.byte	0
 3210 0016 0B       		.uleb128 0xb
 3211 0017 0B       		.uleb128 0xb
 3212 0018 3E       		.uleb128 0x3e
 3213 0019 0B       		.uleb128 0xb
 3214 001a 03       		.uleb128 0x3
 3215 001b 0E       		.uleb128 0xe
 3216 001c 00       		.byte	0
 3217 001d 00       		.byte	0
 3218 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 67


 3219 001f 16       		.uleb128 0x16
 3220 0020 00       		.byte	0
 3221 0021 03       		.uleb128 0x3
 3222 0022 0E       		.uleb128 0xe
 3223 0023 3A       		.uleb128 0x3a
 3224 0024 0B       		.uleb128 0xb
 3225 0025 3B       		.uleb128 0x3b
 3226 0026 0B       		.uleb128 0xb
 3227 0027 49       		.uleb128 0x49
 3228 0028 13       		.uleb128 0x13
 3229 0029 00       		.byte	0
 3230 002a 00       		.byte	0
 3231 002b 04       		.uleb128 0x4
 3232 002c 24       		.uleb128 0x24
 3233 002d 00       		.byte	0
 3234 002e 0B       		.uleb128 0xb
 3235 002f 0B       		.uleb128 0xb
 3236 0030 3E       		.uleb128 0x3e
 3237 0031 0B       		.uleb128 0xb
 3238 0032 03       		.uleb128 0x3
 3239 0033 08       		.uleb128 0x8
 3240 0034 00       		.byte	0
 3241 0035 00       		.byte	0
 3242 0036 05       		.uleb128 0x5
 3243 0037 35       		.uleb128 0x35
 3244 0038 00       		.byte	0
 3245 0039 49       		.uleb128 0x49
 3246 003a 13       		.uleb128 0x13
 3247 003b 00       		.byte	0
 3248 003c 00       		.byte	0
 3249 003d 06       		.uleb128 0x6
 3250 003e 13       		.uleb128 0x13
 3251 003f 01       		.byte	0x1
 3252 0040 0B       		.uleb128 0xb
 3253 0041 0B       		.uleb128 0xb
 3254 0042 3A       		.uleb128 0x3a
 3255 0043 0B       		.uleb128 0xb
 3256 0044 3B       		.uleb128 0x3b
 3257 0045 0B       		.uleb128 0xb
 3258 0046 01       		.uleb128 0x1
 3259 0047 13       		.uleb128 0x13
 3260 0048 00       		.byte	0
 3261 0049 00       		.byte	0
 3262 004a 07       		.uleb128 0x7
 3263 004b 0D       		.uleb128 0xd
 3264 004c 00       		.byte	0
 3265 004d 03       		.uleb128 0x3
 3266 004e 0E       		.uleb128 0xe
 3267 004f 3A       		.uleb128 0x3a
 3268 0050 0B       		.uleb128 0xb
 3269 0051 3B       		.uleb128 0x3b
 3270 0052 0B       		.uleb128 0xb
 3271 0053 49       		.uleb128 0x49
 3272 0054 13       		.uleb128 0x13
 3273 0055 38       		.uleb128 0x38
 3274 0056 0B       		.uleb128 0xb
 3275 0057 00       		.byte	0
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 68


 3276 0058 00       		.byte	0
 3277 0059 08       		.uleb128 0x8
 3278 005a 01       		.uleb128 0x1
 3279 005b 01       		.byte	0x1
 3280 005c 49       		.uleb128 0x49
 3281 005d 13       		.uleb128 0x13
 3282 005e 01       		.uleb128 0x1
 3283 005f 13       		.uleb128 0x13
 3284 0060 00       		.byte	0
 3285 0061 00       		.byte	0
 3286 0062 09       		.uleb128 0x9
 3287 0063 21       		.uleb128 0x21
 3288 0064 00       		.byte	0
 3289 0065 49       		.uleb128 0x49
 3290 0066 13       		.uleb128 0x13
 3291 0067 2F       		.uleb128 0x2f
 3292 0068 0B       		.uleb128 0xb
 3293 0069 00       		.byte	0
 3294 006a 00       		.byte	0
 3295 006b 0A       		.uleb128 0xa
 3296 006c 2E       		.uleb128 0x2e
 3297 006d 01       		.byte	0x1
 3298 006e 3F       		.uleb128 0x3f
 3299 006f 19       		.uleb128 0x19
 3300 0070 03       		.uleb128 0x3
 3301 0071 0E       		.uleb128 0xe
 3302 0072 3A       		.uleb128 0x3a
 3303 0073 0B       		.uleb128 0xb
 3304 0074 3B       		.uleb128 0x3b
 3305 0075 0B       		.uleb128 0xb
 3306 0076 27       		.uleb128 0x27
 3307 0077 19       		.uleb128 0x19
 3308 0078 49       		.uleb128 0x49
 3309 0079 13       		.uleb128 0x13
 3310 007a 11       		.uleb128 0x11
 3311 007b 01       		.uleb128 0x1
 3312 007c 12       		.uleb128 0x12
 3313 007d 06       		.uleb128 0x6
 3314 007e 40       		.uleb128 0x40
 3315 007f 18       		.uleb128 0x18
 3316 0080 9742     		.uleb128 0x2117
 3317 0082 19       		.uleb128 0x19
 3318 0083 01       		.uleb128 0x1
 3319 0084 13       		.uleb128 0x13
 3320 0085 00       		.byte	0
 3321 0086 00       		.byte	0
 3322 0087 0B       		.uleb128 0xb
 3323 0088 05       		.uleb128 0x5
 3324 0089 00       		.byte	0
 3325 008a 03       		.uleb128 0x3
 3326 008b 0E       		.uleb128 0xe
 3327 008c 3A       		.uleb128 0x3a
 3328 008d 0B       		.uleb128 0xb
 3329 008e 3B       		.uleb128 0x3b
 3330 008f 0B       		.uleb128 0xb
 3331 0090 49       		.uleb128 0x49
 3332 0091 13       		.uleb128 0x13
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 69


 3333 0092 02       		.uleb128 0x2
 3334 0093 18       		.uleb128 0x18
 3335 0094 00       		.byte	0
 3336 0095 00       		.byte	0
 3337 0096 0C       		.uleb128 0xc
 3338 0097 2E       		.uleb128 0x2e
 3339 0098 01       		.byte	0x1
 3340 0099 03       		.uleb128 0x3
 3341 009a 0E       		.uleb128 0xe
 3342 009b 3A       		.uleb128 0x3a
 3343 009c 0B       		.uleb128 0xb
 3344 009d 3B       		.uleb128 0x3b
 3345 009e 0B       		.uleb128 0xb
 3346 009f 27       		.uleb128 0x27
 3347 00a0 19       		.uleb128 0x19
 3348 00a1 49       		.uleb128 0x49
 3349 00a2 13       		.uleb128 0x13
 3350 00a3 11       		.uleb128 0x11
 3351 00a4 01       		.uleb128 0x1
 3352 00a5 12       		.uleb128 0x12
 3353 00a6 06       		.uleb128 0x6
 3354 00a7 40       		.uleb128 0x40
 3355 00a8 18       		.uleb128 0x18
 3356 00a9 9742     		.uleb128 0x2117
 3357 00ab 19       		.uleb128 0x19
 3358 00ac 01       		.uleb128 0x1
 3359 00ad 13       		.uleb128 0x13
 3360 00ae 00       		.byte	0
 3361 00af 00       		.byte	0
 3362 00b0 0D       		.uleb128 0xd
 3363 00b1 2E       		.uleb128 0x2e
 3364 00b2 01       		.byte	0x1
 3365 00b3 03       		.uleb128 0x3
 3366 00b4 0E       		.uleb128 0xe
 3367 00b5 3A       		.uleb128 0x3a
 3368 00b6 0B       		.uleb128 0xb
 3369 00b7 3B       		.uleb128 0x3b
 3370 00b8 0B       		.uleb128 0xb
 3371 00b9 11       		.uleb128 0x11
 3372 00ba 01       		.uleb128 0x1
 3373 00bb 12       		.uleb128 0x12
 3374 00bc 06       		.uleb128 0x6
 3375 00bd 40       		.uleb128 0x40
 3376 00be 18       		.uleb128 0x18
 3377 00bf 9642     		.uleb128 0x2116
 3378 00c1 19       		.uleb128 0x19
 3379 00c2 01       		.uleb128 0x1
 3380 00c3 13       		.uleb128 0x13
 3381 00c4 00       		.byte	0
 3382 00c5 00       		.byte	0
 3383 00c6 0E       		.uleb128 0xe
 3384 00c7 34       		.uleb128 0x34
 3385 00c8 00       		.byte	0
 3386 00c9 03       		.uleb128 0x3
 3387 00ca 0E       		.uleb128 0xe
 3388 00cb 3A       		.uleb128 0x3a
 3389 00cc 0B       		.uleb128 0xb
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 70


 3390 00cd 3B       		.uleb128 0x3b
 3391 00ce 0B       		.uleb128 0xb
 3392 00cf 49       		.uleb128 0x49
 3393 00d0 13       		.uleb128 0x13
 3394 00d1 02       		.uleb128 0x2
 3395 00d2 18       		.uleb128 0x18
 3396 00d3 00       		.byte	0
 3397 00d4 00       		.byte	0
 3398 00d5 0F       		.uleb128 0xf
 3399 00d6 0F       		.uleb128 0xf
 3400 00d7 00       		.byte	0
 3401 00d8 0B       		.uleb128 0xb
 3402 00d9 0B       		.uleb128 0xb
 3403 00da 49       		.uleb128 0x49
 3404 00db 13       		.uleb128 0x13
 3405 00dc 00       		.byte	0
 3406 00dd 00       		.byte	0
 3407 00de 10       		.uleb128 0x10
 3408 00df 2E       		.uleb128 0x2e
 3409 00e0 00       		.byte	0
 3410 00e1 3F       		.uleb128 0x3f
 3411 00e2 19       		.uleb128 0x19
 3412 00e3 03       		.uleb128 0x3
 3413 00e4 0E       		.uleb128 0xe
 3414 00e5 3A       		.uleb128 0x3a
 3415 00e6 0B       		.uleb128 0xb
 3416 00e7 3B       		.uleb128 0x3b
 3417 00e8 0B       		.uleb128 0xb
 3418 00e9 11       		.uleb128 0x11
 3419 00ea 01       		.uleb128 0x1
 3420 00eb 12       		.uleb128 0x12
 3421 00ec 06       		.uleb128 0x6
 3422 00ed 40       		.uleb128 0x40
 3423 00ee 18       		.uleb128 0x18
 3424 00ef 9642     		.uleb128 0x2116
 3425 00f1 19       		.uleb128 0x19
 3426 00f2 00       		.byte	0
 3427 00f3 00       		.byte	0
 3428 00f4 11       		.uleb128 0x11
 3429 00f5 2E       		.uleb128 0x2e
 3430 00f6 00       		.byte	0
 3431 00f7 3F       		.uleb128 0x3f
 3432 00f8 19       		.uleb128 0x19
 3433 00f9 03       		.uleb128 0x3
 3434 00fa 0E       		.uleb128 0xe
 3435 00fb 3A       		.uleb128 0x3a
 3436 00fc 0B       		.uleb128 0xb
 3437 00fd 3B       		.uleb128 0x3b
 3438 00fe 0B       		.uleb128 0xb
 3439 00ff 11       		.uleb128 0x11
 3440 0100 01       		.uleb128 0x1
 3441 0101 12       		.uleb128 0x12
 3442 0102 06       		.uleb128 0x6
 3443 0103 40       		.uleb128 0x40
 3444 0104 18       		.uleb128 0x18
 3445 0105 9742     		.uleb128 0x2117
 3446 0107 19       		.uleb128 0x19
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 71


 3447 0108 00       		.byte	0
 3448 0109 00       		.byte	0
 3449 010a 12       		.uleb128 0x12
 3450 010b 2E       		.uleb128 0x2e
 3451 010c 01       		.byte	0x1
 3452 010d 3F       		.uleb128 0x3f
 3453 010e 19       		.uleb128 0x19
 3454 010f 03       		.uleb128 0x3
 3455 0110 0E       		.uleb128 0xe
 3456 0111 3A       		.uleb128 0x3a
 3457 0112 0B       		.uleb128 0xb
 3458 0113 3B       		.uleb128 0x3b
 3459 0114 0B       		.uleb128 0xb
 3460 0115 11       		.uleb128 0x11
 3461 0116 01       		.uleb128 0x1
 3462 0117 12       		.uleb128 0x12
 3463 0118 06       		.uleb128 0x6
 3464 0119 40       		.uleb128 0x40
 3465 011a 18       		.uleb128 0x18
 3466 011b 9642     		.uleb128 0x2116
 3467 011d 19       		.uleb128 0x19
 3468 011e 01       		.uleb128 0x1
 3469 011f 13       		.uleb128 0x13
 3470 0120 00       		.byte	0
 3471 0121 00       		.byte	0
 3472 0122 13       		.uleb128 0x13
 3473 0123 0B       		.uleb128 0xb
 3474 0124 01       		.byte	0x1
 3475 0125 11       		.uleb128 0x11
 3476 0126 01       		.uleb128 0x1
 3477 0127 12       		.uleb128 0x12
 3478 0128 06       		.uleb128 0x6
 3479 0129 00       		.byte	0
 3480 012a 00       		.byte	0
 3481 012b 14       		.uleb128 0x14
 3482 012c 2E       		.uleb128 0x2e
 3483 012d 00       		.byte	0
 3484 012e 3F       		.uleb128 0x3f
 3485 012f 19       		.uleb128 0x19
 3486 0130 03       		.uleb128 0x3
 3487 0131 0E       		.uleb128 0xe
 3488 0132 3A       		.uleb128 0x3a
 3489 0133 0B       		.uleb128 0xb
 3490 0134 3B       		.uleb128 0x3b
 3491 0135 0B       		.uleb128 0xb
 3492 0136 49       		.uleb128 0x49
 3493 0137 13       		.uleb128 0x13
 3494 0138 11       		.uleb128 0x11
 3495 0139 01       		.uleb128 0x1
 3496 013a 12       		.uleb128 0x12
 3497 013b 06       		.uleb128 0x6
 3498 013c 40       		.uleb128 0x40
 3499 013d 18       		.uleb128 0x18
 3500 013e 9742     		.uleb128 0x2117
 3501 0140 19       		.uleb128 0x19
 3502 0141 00       		.byte	0
 3503 0142 00       		.byte	0
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 72


 3504 0143 15       		.uleb128 0x15
 3505 0144 2E       		.uleb128 0x2e
 3506 0145 01       		.byte	0x1
 3507 0146 3F       		.uleb128 0x3f
 3508 0147 19       		.uleb128 0x19
 3509 0148 03       		.uleb128 0x3
 3510 0149 0E       		.uleb128 0xe
 3511 014a 3A       		.uleb128 0x3a
 3512 014b 0B       		.uleb128 0xb
 3513 014c 3B       		.uleb128 0x3b
 3514 014d 0B       		.uleb128 0xb
 3515 014e 49       		.uleb128 0x49
 3516 014f 13       		.uleb128 0x13
 3517 0150 11       		.uleb128 0x11
 3518 0151 01       		.uleb128 0x1
 3519 0152 12       		.uleb128 0x12
 3520 0153 06       		.uleb128 0x6
 3521 0154 40       		.uleb128 0x40
 3522 0155 18       		.uleb128 0x18
 3523 0156 9642     		.uleb128 0x2116
 3524 0158 19       		.uleb128 0x19
 3525 0159 01       		.uleb128 0x1
 3526 015a 13       		.uleb128 0x13
 3527 015b 00       		.byte	0
 3528 015c 00       		.byte	0
 3529 015d 16       		.uleb128 0x16
 3530 015e 2E       		.uleb128 0x2e
 3531 015f 01       		.byte	0x1
 3532 0160 3F       		.uleb128 0x3f
 3533 0161 19       		.uleb128 0x19
 3534 0162 03       		.uleb128 0x3
 3535 0163 0E       		.uleb128 0xe
 3536 0164 3A       		.uleb128 0x3a
 3537 0165 0B       		.uleb128 0xb
 3538 0166 3B       		.uleb128 0x3b
 3539 0167 05       		.uleb128 0x5
 3540 0168 27       		.uleb128 0x27
 3541 0169 19       		.uleb128 0x19
 3542 016a 49       		.uleb128 0x49
 3543 016b 13       		.uleb128 0x13
 3544 016c 11       		.uleb128 0x11
 3545 016d 01       		.uleb128 0x1
 3546 016e 12       		.uleb128 0x12
 3547 016f 06       		.uleb128 0x6
 3548 0170 40       		.uleb128 0x40
 3549 0171 18       		.uleb128 0x18
 3550 0172 9642     		.uleb128 0x2116
 3551 0174 19       		.uleb128 0x19
 3552 0175 01       		.uleb128 0x1
 3553 0176 13       		.uleb128 0x13
 3554 0177 00       		.byte	0
 3555 0178 00       		.byte	0
 3556 0179 17       		.uleb128 0x17
 3557 017a 05       		.uleb128 0x5
 3558 017b 00       		.byte	0
 3559 017c 03       		.uleb128 0x3
 3560 017d 0E       		.uleb128 0xe
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 73


 3561 017e 3A       		.uleb128 0x3a
 3562 017f 0B       		.uleb128 0xb
 3563 0180 3B       		.uleb128 0x3b
 3564 0181 05       		.uleb128 0x5
 3565 0182 49       		.uleb128 0x49
 3566 0183 13       		.uleb128 0x13
 3567 0184 02       		.uleb128 0x2
 3568 0185 18       		.uleb128 0x18
 3569 0186 00       		.byte	0
 3570 0187 00       		.byte	0
 3571 0188 18       		.uleb128 0x18
 3572 0189 34       		.uleb128 0x34
 3573 018a 00       		.byte	0
 3574 018b 03       		.uleb128 0x3
 3575 018c 0E       		.uleb128 0xe
 3576 018d 3A       		.uleb128 0x3a
 3577 018e 0B       		.uleb128 0xb
 3578 018f 3B       		.uleb128 0x3b
 3579 0190 05       		.uleb128 0x5
 3580 0191 49       		.uleb128 0x49
 3581 0192 13       		.uleb128 0x13
 3582 0193 02       		.uleb128 0x2
 3583 0194 18       		.uleb128 0x18
 3584 0195 00       		.byte	0
 3585 0196 00       		.byte	0
 3586 0197 19       		.uleb128 0x19
 3587 0198 2E       		.uleb128 0x2e
 3588 0199 01       		.byte	0x1
 3589 019a 03       		.uleb128 0x3
 3590 019b 0E       		.uleb128 0xe
 3591 019c 3A       		.uleb128 0x3a
 3592 019d 0B       		.uleb128 0xb
 3593 019e 3B       		.uleb128 0x3b
 3594 019f 05       		.uleb128 0x5
 3595 01a0 27       		.uleb128 0x27
 3596 01a1 19       		.uleb128 0x19
 3597 01a2 11       		.uleb128 0x11
 3598 01a3 01       		.uleb128 0x1
 3599 01a4 12       		.uleb128 0x12
 3600 01a5 06       		.uleb128 0x6
 3601 01a6 40       		.uleb128 0x40
 3602 01a7 18       		.uleb128 0x18
 3603 01a8 9642     		.uleb128 0x2116
 3604 01aa 19       		.uleb128 0x19
 3605 01ab 01       		.uleb128 0x1
 3606 01ac 13       		.uleb128 0x13
 3607 01ad 00       		.byte	0
 3608 01ae 00       		.byte	0
 3609 01af 1A       		.uleb128 0x1a
 3610 01b0 2E       		.uleb128 0x2e
 3611 01b1 01       		.byte	0x1
 3612 01b2 3F       		.uleb128 0x3f
 3613 01b3 19       		.uleb128 0x19
 3614 01b4 03       		.uleb128 0x3
 3615 01b5 0E       		.uleb128 0xe
 3616 01b6 3A       		.uleb128 0x3a
 3617 01b7 0B       		.uleb128 0xb
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 74


 3618 01b8 3B       		.uleb128 0x3b
 3619 01b9 05       		.uleb128 0x5
 3620 01ba 11       		.uleb128 0x11
 3621 01bb 01       		.uleb128 0x1
 3622 01bc 12       		.uleb128 0x12
 3623 01bd 06       		.uleb128 0x6
 3624 01be 40       		.uleb128 0x40
 3625 01bf 18       		.uleb128 0x18
 3626 01c0 9642     		.uleb128 0x2116
 3627 01c2 19       		.uleb128 0x19
 3628 01c3 01       		.uleb128 0x1
 3629 01c4 13       		.uleb128 0x13
 3630 01c5 00       		.byte	0
 3631 01c6 00       		.byte	0
 3632 01c7 1B       		.uleb128 0x1b
 3633 01c8 34       		.uleb128 0x34
 3634 01c9 00       		.byte	0
 3635 01ca 03       		.uleb128 0x3
 3636 01cb 08       		.uleb128 0x8
 3637 01cc 3A       		.uleb128 0x3a
 3638 01cd 0B       		.uleb128 0xb
 3639 01ce 3B       		.uleb128 0x3b
 3640 01cf 05       		.uleb128 0x5
 3641 01d0 49       		.uleb128 0x49
 3642 01d1 13       		.uleb128 0x13
 3643 01d2 02       		.uleb128 0x2
 3644 01d3 18       		.uleb128 0x18
 3645 01d4 00       		.byte	0
 3646 01d5 00       		.byte	0
 3647 01d6 1C       		.uleb128 0x1c
 3648 01d7 0B       		.uleb128 0xb
 3649 01d8 01       		.byte	0x1
 3650 01d9 11       		.uleb128 0x11
 3651 01da 01       		.uleb128 0x1
 3652 01db 12       		.uleb128 0x12
 3653 01dc 06       		.uleb128 0x6
 3654 01dd 01       		.uleb128 0x1
 3655 01de 13       		.uleb128 0x13
 3656 01df 00       		.byte	0
 3657 01e0 00       		.byte	0
 3658 01e1 1D       		.uleb128 0x1d
 3659 01e2 2E       		.uleb128 0x2e
 3660 01e3 00       		.byte	0
 3661 01e4 3F       		.uleb128 0x3f
 3662 01e5 19       		.uleb128 0x19
 3663 01e6 03       		.uleb128 0x3
 3664 01e7 0E       		.uleb128 0xe
 3665 01e8 3A       		.uleb128 0x3a
 3666 01e9 0B       		.uleb128 0xb
 3667 01ea 3B       		.uleb128 0x3b
 3668 01eb 05       		.uleb128 0x5
 3669 01ec 49       		.uleb128 0x49
 3670 01ed 13       		.uleb128 0x13
 3671 01ee 11       		.uleb128 0x11
 3672 01ef 01       		.uleb128 0x1
 3673 01f0 12       		.uleb128 0x12
 3674 01f1 06       		.uleb128 0x6
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 75


 3675 01f2 40       		.uleb128 0x40
 3676 01f3 18       		.uleb128 0x18
 3677 01f4 9742     		.uleb128 0x2117
 3678 01f6 19       		.uleb128 0x19
 3679 01f7 00       		.byte	0
 3680 01f8 00       		.byte	0
 3681 01f9 1E       		.uleb128 0x1e
 3682 01fa 2E       		.uleb128 0x2e
 3683 01fb 00       		.byte	0
 3684 01fc 3F       		.uleb128 0x3f
 3685 01fd 19       		.uleb128 0x19
 3686 01fe 03       		.uleb128 0x3
 3687 01ff 0E       		.uleb128 0xe
 3688 0200 3A       		.uleb128 0x3a
 3689 0201 0B       		.uleb128 0xb
 3690 0202 3B       		.uleb128 0x3b
 3691 0203 05       		.uleb128 0x5
 3692 0204 11       		.uleb128 0x11
 3693 0205 01       		.uleb128 0x1
 3694 0206 12       		.uleb128 0x12
 3695 0207 06       		.uleb128 0x6
 3696 0208 40       		.uleb128 0x40
 3697 0209 18       		.uleb128 0x18
 3698 020a 9642     		.uleb128 0x2116
 3699 020c 19       		.uleb128 0x19
 3700 020d 00       		.byte	0
 3701 020e 00       		.byte	0
 3702 020f 1F       		.uleb128 0x1f
 3703 0210 34       		.uleb128 0x34
 3704 0211 00       		.byte	0
 3705 0212 03       		.uleb128 0x3
 3706 0213 08       		.uleb128 0x8
 3707 0214 3A       		.uleb128 0x3a
 3708 0215 0B       		.uleb128 0xb
 3709 0216 3B       		.uleb128 0x3b
 3710 0217 0B       		.uleb128 0xb
 3711 0218 49       		.uleb128 0x49
 3712 0219 13       		.uleb128 0x13
 3713 021a 02       		.uleb128 0x2
 3714 021b 18       		.uleb128 0x18
 3715 021c 00       		.byte	0
 3716 021d 00       		.byte	0
 3717 021e 20       		.uleb128 0x20
 3718 021f 34       		.uleb128 0x34
 3719 0220 00       		.byte	0
 3720 0221 03       		.uleb128 0x3
 3721 0222 0E       		.uleb128 0xe
 3722 0223 3A       		.uleb128 0x3a
 3723 0224 0B       		.uleb128 0xb
 3724 0225 3B       		.uleb128 0x3b
 3725 0226 05       		.uleb128 0x5
 3726 0227 49       		.uleb128 0x49
 3727 0228 13       		.uleb128 0x13
 3728 0229 3F       		.uleb128 0x3f
 3729 022a 19       		.uleb128 0x19
 3730 022b 3C       		.uleb128 0x3c
 3731 022c 19       		.uleb128 0x19
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 76


 3732 022d 00       		.byte	0
 3733 022e 00       		.byte	0
 3734 022f 21       		.uleb128 0x21
 3735 0230 34       		.uleb128 0x34
 3736 0231 00       		.byte	0
 3737 0232 03       		.uleb128 0x3
 3738 0233 0E       		.uleb128 0xe
 3739 0234 3A       		.uleb128 0x3a
 3740 0235 0B       		.uleb128 0xb
 3741 0236 3B       		.uleb128 0x3b
 3742 0237 0B       		.uleb128 0xb
 3743 0238 49       		.uleb128 0x49
 3744 0239 13       		.uleb128 0x13
 3745 023a 3F       		.uleb128 0x3f
 3746 023b 19       		.uleb128 0x19
 3747 023c 3C       		.uleb128 0x3c
 3748 023d 19       		.uleb128 0x19
 3749 023e 00       		.byte	0
 3750 023f 00       		.byte	0
 3751 0240 22       		.uleb128 0x22
 3752 0241 34       		.uleb128 0x34
 3753 0242 00       		.byte	0
 3754 0243 03       		.uleb128 0x3
 3755 0244 08       		.uleb128 0x8
 3756 0245 3A       		.uleb128 0x3a
 3757 0246 0B       		.uleb128 0xb
 3758 0247 3B       		.uleb128 0x3b
 3759 0248 0B       		.uleb128 0xb
 3760 0249 49       		.uleb128 0x49
 3761 024a 13       		.uleb128 0x13
 3762 024b 3F       		.uleb128 0x3f
 3763 024c 19       		.uleb128 0x19
 3764 024d 3C       		.uleb128 0x3c
 3765 024e 19       		.uleb128 0x19
 3766 024f 00       		.byte	0
 3767 0250 00       		.byte	0
 3768 0251 23       		.uleb128 0x23
 3769 0252 34       		.uleb128 0x34
 3770 0253 00       		.byte	0
 3771 0254 03       		.uleb128 0x3
 3772 0255 0E       		.uleb128 0xe
 3773 0256 3A       		.uleb128 0x3a
 3774 0257 0B       		.uleb128 0xb
 3775 0258 3B       		.uleb128 0x3b
 3776 0259 0B       		.uleb128 0xb
 3777 025a 49       		.uleb128 0x49
 3778 025b 13       		.uleb128 0x13
 3779 025c 3F       		.uleb128 0x3f
 3780 025d 19       		.uleb128 0x19
 3781 025e 02       		.uleb128 0x2
 3782 025f 18       		.uleb128 0x18
 3783 0260 00       		.byte	0
 3784 0261 00       		.byte	0
 3785 0262 00       		.byte	0
 3786              		.section	.debug_aranges,"",%progbits
 3787 0000 A4000000 		.4byte	0xa4
 3788 0004 0200     		.2byte	0x2
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 77


 3789 0006 00000000 		.4byte	.Ldebug_info0
 3790 000a 04       		.byte	0x4
 3791 000b 00       		.byte	0
 3792 000c 0000     		.2byte	0
 3793 000e 0000     		.2byte	0
 3794 0010 00000000 		.4byte	.LFB64
 3795 0014 26000000 		.4byte	.LFE64-.LFB64
 3796 0018 00000000 		.4byte	.LFB65
 3797 001c 26000000 		.4byte	.LFE65-.LFB65
 3798 0020 00000000 		.4byte	.LFB66
 3799 0024 2C020000 		.4byte	.LFE66-.LFB66
 3800 0028 00000000 		.4byte	.LFB67
 3801 002c 1C000000 		.4byte	.LFE67-.LFB67
 3802 0030 00000000 		.4byte	.LFB68
 3803 0034 34000000 		.4byte	.LFE68-.LFB68
 3804 0038 00000000 		.4byte	.LFB69
 3805 003c 4C000000 		.4byte	.LFE69-.LFB69
 3806 0040 00000000 		.4byte	.LFB70
 3807 0044 24000000 		.4byte	.LFE70-.LFB70
 3808 0048 00000000 		.4byte	.LFB71
 3809 004c 38000000 		.4byte	.LFE71-.LFB71
 3810 0050 00000000 		.4byte	.LFB72
 3811 0054 48000000 		.4byte	.LFE72-.LFB72
 3812 0058 00000000 		.4byte	.LFB73
 3813 005c 28000000 		.4byte	.LFE73-.LFB73
 3814 0060 00000000 		.4byte	.LFB74
 3815 0064 E4000000 		.4byte	.LFE74-.LFB74
 3816 0068 00000000 		.4byte	.LFB75
 3817 006c 64000000 		.4byte	.LFE75-.LFB75
 3818 0070 00000000 		.4byte	.LFB76
 3819 0074 70000000 		.4byte	.LFE76-.LFB76
 3820 0078 00000000 		.4byte	.LFB77
 3821 007c D4050000 		.4byte	.LFE77-.LFB77
 3822 0080 00000000 		.4byte	.LFB78
 3823 0084 60000000 		.4byte	.LFE78-.LFB78
 3824 0088 00000000 		.4byte	.LFB79
 3825 008c 44000000 		.4byte	.LFE79-.LFB79
 3826 0090 00000000 		.4byte	.LFB80
 3827 0094 40000000 		.4byte	.LFE80-.LFB80
 3828 0098 00000000 		.4byte	.LFB81
 3829 009c 20000000 		.4byte	.LFE81-.LFB81
 3830 00a0 00000000 		.4byte	0
 3831 00a4 00000000 		.4byte	0
 3832              		.section	.debug_ranges,"",%progbits
 3833              	.Ldebug_ranges0:
 3834 0000 00000000 		.4byte	.LFB64
 3835 0004 26000000 		.4byte	.LFE64
 3836 0008 00000000 		.4byte	.LFB65
 3837 000c 26000000 		.4byte	.LFE65
 3838 0010 00000000 		.4byte	.LFB66
 3839 0014 2C020000 		.4byte	.LFE66
 3840 0018 00000000 		.4byte	.LFB67
 3841 001c 1C000000 		.4byte	.LFE67
 3842 0020 00000000 		.4byte	.LFB68
 3843 0024 34000000 		.4byte	.LFE68
 3844 0028 00000000 		.4byte	.LFB69
 3845 002c 4C000000 		.4byte	.LFE69
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 78


 3846 0030 00000000 		.4byte	.LFB70
 3847 0034 24000000 		.4byte	.LFE70
 3848 0038 00000000 		.4byte	.LFB71
 3849 003c 38000000 		.4byte	.LFE71
 3850 0040 00000000 		.4byte	.LFB72
 3851 0044 48000000 		.4byte	.LFE72
 3852 0048 00000000 		.4byte	.LFB73
 3853 004c 28000000 		.4byte	.LFE73
 3854 0050 00000000 		.4byte	.LFB74
 3855 0054 E4000000 		.4byte	.LFE74
 3856 0058 00000000 		.4byte	.LFB75
 3857 005c 64000000 		.4byte	.LFE75
 3858 0060 00000000 		.4byte	.LFB76
 3859 0064 70000000 		.4byte	.LFE76
 3860 0068 00000000 		.4byte	.LFB77
 3861 006c D4050000 		.4byte	.LFE77
 3862 0070 00000000 		.4byte	.LFB78
 3863 0074 60000000 		.4byte	.LFE78
 3864 0078 00000000 		.4byte	.LFB79
 3865 007c 44000000 		.4byte	.LFE79
 3866 0080 00000000 		.4byte	.LFB80
 3867 0084 40000000 		.4byte	.LFE80
 3868 0088 00000000 		.4byte	.LFB81
 3869 008c 20000000 		.4byte	.LFE81
 3870 0090 00000000 		.4byte	0
 3871 0094 00000000 		.4byte	0
 3872              		.section	.debug_line,"",%progbits
 3873              	.Ldebug_line0:
 3874 0000 55040000 		.section	.debug_str,"MS",%progbits,1
 3874      02006901 
 3874      00000201 
 3874      FB0E0D00 
 3874      01010101 
 3875              	.LASF26:
 3876 0000 70756C73 		.ascii	"pulse_microseconds\000"
 3876      655F6D69 
 3876      63726F73 
 3876      65636F6E 
 3876      647300
 3877              	.LASF86:
 3878 0013 70726576 		.ascii	"prev_nominal_speed\000"
 3878      5F6E6F6D 
 3878      696E616C 
 3878      5F737065 
 3878      656400
 3879              	.LASF78:
 3880 0026 706C616E 		.ascii	"plan_reset_buffer\000"
 3880      5F726573 
 3880      65745F62 
 3880      75666665 
 3880      7200
 3881              	.LASF64:
 3882 0038 6D61785F 		.ascii	"max_junction_speed_sqr\000"
 3882      6A756E63 
 3882      74696F6E 
 3882      5F737065 
 3882      65645F73 
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 79


 3883              	.LASF35:
 3884 004f 666C6167 		.ascii	"flags\000"
 3884      7300
 3885              	.LASF67:
 3886 0055 706C616E 		.ascii	"plan_block_t\000"
 3886      5F626C6F 
 3886      636B5F74 
 3886      00
 3887              	.LASF91:
 3888 0062 706C5F64 		.ascii	"pl_data\000"
 3888      61746100 
 3889              	.LASF30:
 3890 006a 73746174 		.ascii	"status_report_mask\000"
 3890      75735F72 
 3890      65706F72 
 3890      745F6D61 
 3890      736B00
 3891              	.LASF12:
 3892 007d 756E7369 		.ascii	"unsigned int\000"
 3892      676E6564 
 3892      20696E74 
 3892      00
 3893              	.LASF75:
 3894 008a 6E657874 		.ascii	"next\000"
 3894      00
 3895              	.LASF50:
 3896 008f 725F6F76 		.ascii	"r_override\000"
 3896      65727269 
 3896      646500
 3897              	.LASF6:
 3898 009a 5F5F696E 		.ascii	"__int32_t\000"
 3898      7433325F 
 3898      7400
 3899              	.LASF118:
 3900 00a4 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3900      43313120 
 3900      352E342E 
 3900      31203230 
 3900      31363036 
 3901 00d7 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3901      20726576 
 3901      6973696F 
 3901      6E203233 
 3901      37373135 
 3902 010a 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3902      66756E63 
 3902      74696F6E 
 3902      2D736563 
 3902      74696F6E 
 3903              	.LASF113:
 3904 0132 7379735F 		.ascii	"sys_probe_state\000"
 3904      70726F62 
 3904      655F7374 
 3904      61746500 
 3905              	.LASF29:
 3906 0142 73746570 		.ascii	"stepper_idle_lock_time\000"
 3906      7065725F 
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 80


 3906      69646C65 
 3906      5F6C6F63 
 3906      6B5F7469 
 3907              	.LASF66:
 3908 0159 70726F67 		.ascii	"programmed_rate\000"
 3908      72616D6D 
 3908      65645F72 
 3908      61746500 
 3909              	.LASF32:
 3910 0169 6172635F 		.ascii	"arc_tolerance\000"
 3910      746F6C65 
 3910      72616E63 
 3910      6500
 3911              	.LASF107:
 3912 0177 6E657874 		.ascii	"next_buffer_head\000"
 3912      5F627566 
 3912      6665725F 
 3912      68656164 
 3912      00
 3913              	.LASF81:
 3914 0188 706C616E 		.ascii	"plan_check_full_buffer\000"
 3914      5F636865 
 3914      636B5F66 
 3914      756C6C5F 
 3914      62756666 
 3915              	.LASF59:
 3916 019f 64697265 		.ascii	"direction_bits\000"
 3916      6374696F 
 3916      6E5F6269 
 3916      747300
 3917              	.LASF24:
 3918 01ae 61636365 		.ascii	"acceleration\000"
 3918      6C657261 
 3918      74696F6E 
 3918      00
 3919              	.LASF38:
 3920 01bb 686F6D69 		.ascii	"homing_seek_rate\000"
 3920      6E675F73 
 3920      65656B5F 
 3920      72617465 
 3920      00
 3921              	.LASF100:
 3922 01cc 706C616E 		.ascii	"plan_sync_position\000"
 3922      5F73796E 
 3922      635F706F 
 3922      73697469 
 3922      6F6E00
 3923              	.LASF16:
 3924 01df 75696E74 		.ascii	"uint32_t\000"
 3924      33325F74 
 3924      00
 3925              	.LASF37:
 3926 01e8 686F6D69 		.ascii	"homing_feed_rate\000"
 3926      6E675F66 
 3926      6565645F 
 3926      72617465 
 3926      00
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 81


 3927              	.LASF61:
 3928 01f9 656E7472 		.ascii	"entry_speed_sqr\000"
 3928      795F7370 
 3928      6565645F 
 3928      73717200 
 3929              	.LASF57:
 3930 0209 73746570 		.ascii	"steps\000"
 3930      7300
 3931              	.LASF17:
 3932 020f 666C6F61 		.ascii	"float\000"
 3932      7400
 3933              	.LASF120:
 3934 0215 433A5C55 		.ascii	"C:\\Users\\barto\\Dropbox\\PSoC\\Grbl_USB_Native\\G"
 3934      73657273 
 3934      5C626172 
 3934      746F5C44 
 3934      726F7062 
 3935 0242 72626C5F 		.ascii	"rbl_USB_Native.cydsn\000"
 3935      5553425F 
 3935      4E617469 
 3935      76652E63 
 3935      7964736E 
 3936              	.LASF69:
 3937 0257 706C616E 		.ascii	"plan_line_data_t\000"
 3937      5F6C696E 
 3937      655F6461 
 3937      74615F74 
 3937      00
 3938              	.LASF11:
 3939 0268 6C6F6E67 		.ascii	"long long unsigned int\000"
 3939      206C6F6E 
 3939      6720756E 
 3939      7369676E 
 3939      65642069 
 3940              	.LASF49:
 3941 027f 665F6F76 		.ascii	"f_override\000"
 3941      65727269 
 3941      646500
 3942              	.LASF124:
 3943 028a 706C616E 		.ascii	"plan_compute_profile_parameters\000"
 3943      5F636F6D 
 3943      70757465 
 3943      5F70726F 
 3943      66696C65 
 3944              	.LASF4:
 3945 02aa 5F5F7569 		.ascii	"__uint16_t\000"
 3945      6E743136 
 3945      5F7400
 3946              	.LASF71:
 3947 02b5 70726576 		.ascii	"previous_unit_vec\000"
 3947      696F7573 
 3947      5F756E69 
 3947      745F7665 
 3947      6300
 3948              	.LASF52:
 3949 02c7 7370696E 		.ascii	"spindle_stop_ovr\000"
 3949      646C655F 
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 82


 3949      73746F70 
 3949      5F6F7672 
 3949      00
 3950              	.LASF43:
 3951 02d8 61626F72 		.ascii	"abort\000"
 3951      7400
 3952              	.LASF62:
 3953 02de 6D61785F 		.ascii	"max_entry_speed_sqr\000"
 3953      656E7472 
 3953      795F7370 
 3953      6565645F 
 3953      73717200 
 3954              	.LASF40:
 3955 02f2 686F6D69 		.ascii	"homing_pulloff\000"
 3955      6E675F70 
 3955      756C6C6F 
 3955      666600
 3956              	.LASF90:
 3957 0301 74617267 		.ascii	"target\000"
 3957      657400
 3958              	.LASF119:
 3959 0308 706C616E 		.ascii	"planner.c\000"
 3959      6E65722E 
 3959      6300
 3960              	.LASF44:
 3961 0312 73757370 		.ascii	"suspend\000"
 3961      656E6400 
 3962              	.LASF114:
 3963 031a 7379735F 		.ascii	"sys_rt_exec_state\000"
 3963      72745F65 
 3963      7865635F 
 3963      73746174 
 3963      6500
 3964              	.LASF108:
 3965 032c 626C6F63 		.ascii	"block_buffer_planned\000"
 3965      6B5F6275 
 3965      66666572 
 3965      5F706C61 
 3965      6E6E6564 
 3966              	.LASF110:
 3967 0341 73657474 		.ascii	"settings\000"
 3967      696E6773 
 3967      00
 3968              	.LASF25:
 3969 034a 6D61785F 		.ascii	"max_travel\000"
 3969      74726176 
 3969      656C00
 3970              	.LASF122:
 3971 0355 706C616E 		.ascii	"planner_recalculate\000"
 3971      6E65725F 
 3971      72656361 
 3971      6C63756C 
 3971      61746500 
 3972              	.LASF19:
 3973 0369 63686172 		.ascii	"char\000"
 3973      00
 3974              	.LASF33:
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 83


 3975 036e 72706D5F 		.ascii	"rpm_max\000"
 3975      6D617800 
 3976              	.LASF55:
 3977 0376 7370696E 		.ascii	"spindle_speed\000"
 3977      646C655F 
 3977      73706565 
 3977      6400
 3978              	.LASF58:
 3979 0384 73746570 		.ascii	"step_event_count\000"
 3979      5F657665 
 3979      6E745F63 
 3979      6F756E74 
 3979      00
 3980              	.LASF53:
 3981 0395 7265706F 		.ascii	"report_ovr_counter\000"
 3981      72745F6F 
 3981      76725F63 
 3981      6F756E74 
 3981      657200
 3982              	.LASF51:
 3983 03a8 7370696E 		.ascii	"spindle_speed_ovr\000"
 3983      646C655F 
 3983      73706565 
 3983      645F6F76 
 3983      7200
 3984              	.LASF13:
 3985 03ba 75696E74 		.ascii	"uint8_t\000"
 3985      385F7400 
 3986              	.LASF96:
 3987 03c2 6A756E63 		.ascii	"junction_unit_vec\000"
 3987      74696F6E 
 3987      5F756E69 
 3987      745F7665 
 3987      6300
 3988              	.LASF93:
 3989 03d4 706F7369 		.ascii	"position_steps\000"
 3989      74696F6E 
 3989      5F737465 
 3989      707300
 3990              	.LASF83:
 3991 03e3 706C616E 		.ascii	"plan_compute_profile_nominal_speed\000"
 3991      5F636F6D 
 3991      70757465 
 3991      5F70726F 
 3991      66696C65 
 3992              	.LASF106:
 3993 0406 626C6F63 		.ascii	"block_buffer_head\000"
 3993      6B5F6275 
 3993      66666572 
 3993      5F686561 
 3993      6400
 3994              	.LASF10:
 3995 0418 6C6F6E67 		.ascii	"long long int\000"
 3995      206C6F6E 
 3995      6720696E 
 3995      7400
 3996              	.LASF112:
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 84


 3997 0426 7379735F 		.ascii	"sys_probe_position\000"
 3997      70726F62 
 3997      655F706F 
 3997      73697469 
 3997      6F6E00
 3998              	.LASF104:
 3999 0439 626C6F63 		.ascii	"block_buffer\000"
 3999      6B5F6275 
 3999      66666572 
 3999      00
 4000              	.LASF22:
 4001 0446 73746570 		.ascii	"steps_per_mm\000"
 4001      735F7065 
 4001      725F6D6D 
 4001      00
 4002              	.LASF85:
 4003 0453 6E6F6D69 		.ascii	"nominal_speed\000"
 4003      6E616C5F 
 4003      73706565 
 4003      6400
 4004              	.LASF73:
 4005 0461 706C616E 		.ascii	"planner_t\000"
 4005      6E65725F 
 4005      7400
 4006              	.LASF105:
 4007 046b 626C6F63 		.ascii	"block_buffer_tail\000"
 4007      6B5F6275 
 4007      66666572 
 4007      5F746169 
 4007      6C00
 4008              	.LASF103:
 4009 047d 706C616E 		.ascii	"plan_cycle_reinitialize\000"
 4009      5F637963 
 4009      6C655F72 
 4009      65696E69 
 4009      7469616C 
 4010              	.LASF82:
 4011 0495 706C616E 		.ascii	"plan_next_block_index\000"
 4011      5F6E6578 
 4011      745F626C 
 4011      6F636B5F 
 4011      696E6465 
 4012              	.LASF111:
 4013 04ab 7379735F 		.ascii	"sys_position\000"
 4013      706F7369 
 4013      74696F6E 
 4013      00
 4014              	.LASF99:
 4015 04b8 73696E5F 		.ascii	"sin_theta_d2\000"
 4015      74686574 
 4015      615F6432 
 4015      00
 4016              	.LASF88:
 4017 04c5 706C616E 		.ascii	"plan_update_velocity_profile_parameters\000"
 4017      5F757064 
 4017      6174655F 
 4017      76656C6F 
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 85


 4017      63697479 
 4018              	.LASF27:
 4019 04ed 73746570 		.ascii	"step_invert_mask\000"
 4019      5F696E76 
 4019      6572745F 
 4019      6D61736B 
 4019      00
 4020              	.LASF20:
 4021 04fe 6C6F6E67 		.ascii	"long double\000"
 4021      20646F75 
 4021      626C6500 
 4022              	.LASF87:
 4023 050a 706C616E 		.ascii	"plan_discard_current_block\000"
 4023      5F646973 
 4023      63617264 
 4023      5F637572 
 4023      72656E74 
 4024              	.LASF14:
 4025 0525 75696E74 		.ascii	"uint16_t\000"
 4025      31365F74 
 4025      00
 4026              	.LASF23:
 4027 052e 6D61785F 		.ascii	"max_rate\000"
 4027      72617465 
 4027      00
 4028              	.LASF116:
 4029 0537 7379735F 		.ascii	"sys_rt_exec_motion_override\000"
 4029      72745F65 
 4029      7865635F 
 4029      6D6F7469 
 4029      6F6E5F6F 
 4030              	.LASF46:
 4031 0553 73746570 		.ascii	"step_control\000"
 4031      5F636F6E 
 4031      74726F6C 
 4031      00
 4032              	.LASF74:
 4033 0560 626C6F63 		.ascii	"block_index\000"
 4033      6B5F696E 
 4033      64657800 
 4034              	.LASF65:
 4035 056c 72617069 		.ascii	"rapid_rate\000"
 4035      645F7261 
 4035      746500
 4036              	.LASF2:
 4037 0577 73686F72 		.ascii	"short int\000"
 4037      7420696E 
 4037      7400
 4038              	.LASF123:
 4039 0581 706C616E 		.ascii	"plan_get_exec_block_exit_speed_sqr\000"
 4039      5F676574 
 4039      5F657865 
 4039      635F626C 
 4039      6F636B5F 
 4040              	.LASF7:
 4041 05a4 6C6F6E67 		.ascii	"long int\000"
 4041      20696E74 
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 86


 4041      00
 4042              	.LASF109:
 4043 05ad 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4043      52784275 
 4043      66666572 
 4043      00
 4044              	.LASF121:
 4045 05ba 706C616E 		.ascii	"plan_prev_block_index\000"
 4045      5F707265 
 4045      765F626C 
 4045      6F636B5F 
 4045      696E6465 
 4046              	.LASF56:
 4047 05d0 73797374 		.ascii	"system_t\000"
 4047      656D5F74 
 4047      00
 4048              	.LASF68:
 4049 05d9 66656564 		.ascii	"feed_rate\000"
 4049      5F726174 
 4049      6500
 4050              	.LASF54:
 4051 05e3 7265706F 		.ascii	"report_wco_counter\000"
 4051      72745F77 
 4051      636F5F63 
 4051      6F756E74 
 4051      657200
 4052              	.LASF45:
 4053 05f6 736F6674 		.ascii	"soft_limit\000"
 4053      5F6C696D 
 4053      697400
 4054              	.LASF97:
 4055 0601 6A756E63 		.ascii	"junction_cos_theta\000"
 4055      74696F6E 
 4055      5F636F73 
 4055      5F746865 
 4055      746100
 4056              	.LASF77:
 4057 0614 706C616E 		.ascii	"plan_reset\000"
 4057      5F726573 
 4057      657400
 4058              	.LASF84:
 4059 061f 626C6F63 		.ascii	"block\000"
 4059      6B00
 4060              	.LASF3:
 4061 0625 5F5F7569 		.ascii	"__uint8_t\000"
 4061      6E74385F 
 4061      7400
 4062              	.LASF47:
 4063 062f 70726F62 		.ascii	"probe_succeeded\000"
 4063      655F7375 
 4063      63636565 
 4063      64656400 
 4064              	.LASF117:
 4065 063f 7379735F 		.ascii	"sys_rt_exec_accessory_override\000"
 4065      72745F65 
 4065      7865635F 
 4065      61636365 
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 87


 4065      73736F72 
 4066              	.LASF94:
 4067 065e 756E6974 		.ascii	"unit_vec\000"
 4067      5F766563 
 4067      00
 4068              	.LASF21:
 4069 0667 73697A65 		.ascii	"sizetype\000"
 4069      74797065 
 4069      00
 4070              	.LASF9:
 4071 0670 6C6F6E67 		.ascii	"long unsigned int\000"
 4071      20756E73 
 4071      69676E65 
 4071      6420696E 
 4071      7400
 4072              	.LASF15:
 4073 0682 696E7433 		.ascii	"int32_t\000"
 4073      325F7400 
 4074              	.LASF80:
 4075 068a 706C616E 		.ascii	"plan_get_current_block\000"
 4075      5F676574 
 4075      5F637572 
 4075      72656E74 
 4075      5F626C6F 
 4076              	.LASF1:
 4077 06a1 756E7369 		.ascii	"unsigned char\000"
 4077      676E6564 
 4077      20636861 
 4077      7200
 4078              	.LASF8:
 4079 06af 5F5F7569 		.ascii	"__uint32_t\000"
 4079      6E743332 
 4079      5F7400
 4080              	.LASF42:
 4081 06ba 73746174 		.ascii	"state\000"
 4081      6500
 4082              	.LASF98:
 4083 06c0 6A756E63 		.ascii	"junction_acceleration\000"
 4083      74696F6E 
 4083      5F616363 
 4083      656C6572 
 4083      6174696F 
 4084              	.LASF115:
 4085 06d6 7379735F 		.ascii	"sys_rt_exec_alarm\000"
 4085      72745F65 
 4085      7865635F 
 4085      616C6172 
 4085      6D00
 4086              	.LASF92:
 4087 06e8 74617267 		.ascii	"target_steps\000"
 4087      65745F73 
 4087      74657073 
 4087      00
 4088              	.LASF102:
 4089 06f5 706C616E 		.ascii	"plan_get_block_buffer_count\000"
 4089      5F676574 
 4089      5F626C6F 
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 88


 4089      636B5F62 
 4089      75666665 
 4090              	.LASF89:
 4091 0711 706C616E 		.ascii	"plan_buffer_line\000"
 4091      5F627566 
 4091      6665725F 
 4091      6C696E65 
 4091      00
 4092              	.LASF95:
 4093 0722 64656C74 		.ascii	"delta_mm\000"
 4093      615F6D6D 
 4093      00
 4094              	.LASF101:
 4095 072b 706C616E 		.ascii	"plan_get_block_buffer_available\000"
 4095      5F676574 
 4095      5F626C6F 
 4095      636B5F62 
 4095      75666665 
 4096              	.LASF63:
 4097 074b 6D696C6C 		.ascii	"millimeters\000"
 4097      696D6574 
 4097      65727300 
 4098              	.LASF0:
 4099 0757 7369676E 		.ascii	"signed char\000"
 4099      65642063 
 4099      68617200 
 4100              	.LASF39:
 4101 0763 686F6D69 		.ascii	"homing_debounce_delay\000"
 4101      6E675F64 
 4101      65626F75 
 4101      6E63655F 
 4101      64656C61 
 4102              	.LASF5:
 4103 0779 73686F72 		.ascii	"short unsigned int\000"
 4103      7420756E 
 4103      7369676E 
 4103      65642069 
 4103      6E7400
 4104              	.LASF34:
 4105 078c 72706D5F 		.ascii	"rpm_min\000"
 4105      6D696E00 
 4106              	.LASF41:
 4107 0794 73657474 		.ascii	"settings_t\000"
 4107      696E6773 
 4107      5F7400
 4108              	.LASF76:
 4109 079f 63757272 		.ascii	"current\000"
 4109      656E7400 
 4110              	.LASF18:
 4111 07a7 646F7562 		.ascii	"double\000"
 4111      6C6500
 4112              	.LASF36:
 4113 07ae 686F6D69 		.ascii	"homing_dir_mask\000"
 4113      6E675F64 
 4113      69725F6D 
 4113      61736B00 
 4114              	.LASF31:
ARM GAS  C:\Users\barto\AppData\Local\Temp\ccxvLAbr.s 			page 89


 4115 07be 6A756E63 		.ascii	"junction_deviation\000"
 4115      74696F6E 
 4115      5F646576 
 4115      69617469 
 4115      6F6E00
 4116              	.LASF72:
 4117 07d1 70726576 		.ascii	"previous_nominal_speed\000"
 4117      696F7573 
 4117      5F6E6F6D 
 4117      696E616C 
 4117      5F737065 
 4118              	.LASF48:
 4119 07e8 686F6D69 		.ascii	"homing_axis_lock\000"
 4119      6E675F61 
 4119      7869735F 
 4119      6C6F636B 
 4119      00
 4120              	.LASF60:
 4121 07f9 636F6E64 		.ascii	"condition\000"
 4121      6974696F 
 4121      6E00
 4122              	.LASF70:
 4123 0803 706F7369 		.ascii	"position\000"
 4123      74696F6E 
 4123      00
 4124              	.LASF79:
 4125 080c 706C616E 		.ascii	"plan_get_system_motion_block\000"
 4125      5F676574 
 4125      5F737973 
 4125      74656D5F 
 4125      6D6F7469 
 4126              	.LASF28:
 4127 0829 6469725F 		.ascii	"dir_invert_mask\000"
 4127      696E7665 
 4127      72745F6D 
 4127      61736B00 
 4128              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
